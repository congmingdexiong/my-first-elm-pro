(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS
//
// For some reason, tabs can appear in href protocols and it still works.
// So '\tjava\tSCRIPT:alert("!!!")' and 'javascript:alert("!!!")' are the same
// in practice. That is why _VirtualDom_RE_js and _VirtualDom_RE_js_html look
// so freaky.
//
// Pulling the regular expressions out to the top level gives a slight speed
// boost in small benchmarks (4-10%) but hoisting values to reduce allocation
// can be unpredictable in large programs where JIT may have a harder time with
// functions are not fully self-contained. The benefit is more that the js and
// js_html ones are so weird that I prefer to see them near each other.


var _VirtualDom_RE_script = /^script$/i;
var _VirtualDom_RE_on_formAction = /^(on|formAction$)/i;
var _VirtualDom_RE_js = /^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/i;
var _VirtualDom_RE_js_html = /^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/i;


function _VirtualDom_noScript(tag)
{
	return _VirtualDom_RE_script.test(tag) ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return _VirtualDom_RE_on_formAction.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return _VirtualDom_RE_js.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return _VirtualDom_RE_js_html.test(value)
		? /**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlJson(value)
{
	return (typeof _Json_unwrap(value) === 'string' && _VirtualDom_RE_js_html.test(_Json_unwrap(value)))
		? _Json_wrap(
			/**_UNUSED/''//*//**/'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'//*/
		) : value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$List$cons = _List_cons;
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Https = {$: 'Https'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $elm$browser$Browser$element = _Browser_element;
var $rakutentech$r10$R10$FormTypes$NoIcon = {$: 'NoIcon'};
var $rakutentech$r10$R10$FormTypes$TextEmail = {$: 'TextEmail'};
var $rakutentech$r10$R10$FormTypes$TextPasswordNew = function (a) {
	return {$: 'TextPasswordNew', a: a};
};
var $rakutentech$r10$R10$FormTypes$TypeText = function (a) {
	return {$: 'TypeText', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$AllOf = function (a) {
	return {$: 'AllOf', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Regex = function (a) {
	return {$: 'Regex', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg = F2(
	function (a, b) {
		return {$: 'WithMsg', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression = {alpha: '^[a-zA-Z]*$', alphaNumeric: '^[a-zA-Z0-9]*$', alphaNumericDash: '^[A-Za-z0-9_.-]*$', alphaNumericDashSpace: '^[A-Za-z0-9_.-\\s]*$', decimal: '^-?\\d*(\\.\\d+)?$', email: '^(?!\\.)(?!.*\\.\\.)[~!#-&+\\--9=?A-Z^-z|]*(?!\\.)[~!#-&+\\--9=?A-Z^-z|]@[-0-9A-Za-z]+(\\.[-0-9A-Za-z]+)*(\\.[-0-9A-Za-z]{2,})$', hexColor: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', integer: '^\\d+$', numeric: '^([0-9]+)$', phoneNumber: '^\\+?[1-9]\\d+$', url: '^[\\.\\-\\+\\w]*?:\\/\\/\\w+(\\.\\w+)*(:[0-9]+)?[\\w\\-\\._~:\\/?#[\\]@!\\$&\'\\(\\)\\*\\+,;=.]+$'};
var $rakutentech$r10$R10$Form$Internal$Translator$validationCodes = {allOf: 'ALL_OF', emailFormatInvalid: 'INVALID_EMAIL_FORMAT', emailFormatValid: 'VALID_EMAIL_FORMAT', empty: 'EMPTY', equalInvalid: 'INVALID_EQUAL', formatInvalid: 'INVALID_FORMAT', formatInvalidCharactersInvalid: 'INVALID_FORMAT_INVALID_CHARACTERS', formatNoNumberInvalid: 'INVALID_FORMAT_NO_NUMBER', formatNoSpecialCharactersInvalid: 'INVALID_FORMAT_NO_SPECIAL_CHARACTERS', formatNoUppercaseInvalid: 'INVALID_FORMAT_NO_UPPERCASE', formatValid: 'VALID_FORMAT', hexColorFormatInvalid: 'INVALID_HEX_COLOR_FORMAT', jsonFormatInvalid: 'INVALID_JSON_FORMAT', lengthExactInvalid: 'INVALID_LENGTH_EXACT', lengthTooLargeInvalid: 'INVALID_LENGTH_TOO_LARGE', lengthTooSmallInvalid: 'INVALID_LENGTH_TOO_SMALL', lengthValid: 'CORRECT_LENGTH', mobileEmailDomainInvalid: 'MOBILE_EMAIL_INVALID_DOMAIN', mobileEmailFormatInvalid: 'MOBILE_EMAIL_INVALID_FORMAT', oneOf: 'ONE_OF', required: 'REQUIRED', requiredField: 'REQUIRED_FIELD', somethingWrong: 'SOMETHING_WENT_WRONG_DURING_VALIDATION', valueInvalid: 'INVALID_VALUE'};
var $rakutentech$r10$R10$Form$Internal$Validation$commonValidation = {
	alphaNumericDash: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.alphaNumericDash)),
	alphaNumericDashSpace: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.alphaNumericDashSpace)),
	email: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatInvalid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.email)),
	hexColor: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.hexColorFormatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.hexColorFormatInvalid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.hexColor)),
	numeric: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.numeric)),
	password: $rakutentech$r10$R10$Form$Internal$FieldConf$AllOf(
		_List_fromArray(
			[
				A2(
				$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
				{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoUppercaseInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoUppercaseInvalid},
				$rakutentech$r10$R10$Form$Internal$FieldConf$Regex('[A-Z]')),
				A2(
				$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
				{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoNumberInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoNumberInvalid},
				$rakutentech$r10$R10$Form$Internal$FieldConf$Regex('[0-9]')),
				A2(
				$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
				{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoSpecialCharactersInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoSpecialCharactersInvalid},
				$rakutentech$r10$R10$Form$Internal$FieldConf$Regex('[~!@#$%^&*()_+|}{\\[\\]|\\><?:\\\";\',./=-]'))
			])),
	phoneNumber: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.phoneNumber)),
	url: A2(
		$rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg,
		{err: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, ok: $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid},
		$rakutentech$r10$R10$Form$Internal$FieldConf$Regex($rakutentech$r10$R10$Form$Internal$Validation$commonRegularExpression.url))
};
var $rakutentech$r10$R10$Form$commonValidation = $rakutentech$r10$R10$Form$Internal$Validation$commonValidation;
var $rakutentech$r10$R10$Form$Internal$Conf$EntityField = function (a) {
	return {$: 'EntityField', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Conf$EntityMulti = F2(
	function (a, b) {
		return {$: 'EntityMulti', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityNormal = F2(
	function (a, b) {
		return {$: 'EntityNormal', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntitySubTitle = F2(
	function (a, b) {
		return {$: 'EntitySubTitle', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityTitle = F2(
	function (a, b) {
		return {$: 'EntityTitle', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWithBorder = F2(
	function (a, b) {
		return {$: 'EntityWithBorder', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWithTabs = F2(
	function (a, b) {
		return {$: 'EntityWithTabs', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Conf$EntityWrappable = F2(
	function (a, b) {
		return {$: 'EntityWrappable', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$entity = {field: $rakutentech$r10$R10$Form$Internal$Conf$EntityField, multi: $rakutentech$r10$R10$Form$Internal$Conf$EntityMulti, normal: $rakutentech$r10$R10$Form$Internal$Conf$EntityNormal, subTitle: $rakutentech$r10$R10$Form$Internal$Conf$EntitySubTitle, title: $rakutentech$r10$R10$Form$Internal$Conf$EntityTitle, withBorder: $rakutentech$r10$R10$Form$Internal$Conf$EntityWithBorder, withTabs: $rakutentech$r10$R10$Form$Internal$Conf$EntityWithTabs, wrappable: $rakutentech$r10$R10$Form$Internal$Conf$EntityWrappable};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$QtySubmitAttempted = function (a) {
	return {$: 'QtySubmitAttempted', a: a};
};
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt = function (_int) {
	return $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$QtySubmitAttempted(_int);
};
var $rakutentech$r10$R10$Form$Internal$State$init = {
	active: $elm$core$Maybe$Nothing,
	activeTabs: $elm$core$Dict$empty,
	changesSinceLastSubmissions: false,
	fieldsState: $elm$core$Dict$empty,
	focused: $elm$core$Maybe$Nothing,
	lastKeyDownIsProcess: false,
	multiplicableQuantities: $elm$core$Dict$empty,
	qtySubmitAttempted: $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt(0),
	removed: $elm$core$Set$empty
};
var $rakutentech$r10$R10$Form$initState = $rakutentech$r10$R10$Form$Internal$State$init;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $rakutentech$r10$R10$Form$Internal$FieldConf$DateRange = function (a) {
	return {$: 'DateRange', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Dependant = F2(
	function (a, b) {
		return {$: 'Dependant', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$FieldConf$Empty = {$: 'Empty'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Equal = function (a) {
	return {$: 'Equal', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$MaxLength = function (a) {
	return {$: 'MaxLength', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$MinLength = function (a) {
	return {$: 'MinLength', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation = {$: 'NoValidation'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Not = function (a) {
	return {$: 'Not', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$Required = {$: 'Required'};
var $rakutentech$r10$R10$Form$validation = {allOf: $rakutentech$r10$R10$Form$Internal$FieldConf$AllOf, dateRange: $rakutentech$r10$R10$Form$Internal$FieldConf$DateRange, dependant: $rakutentech$r10$R10$Form$Internal$FieldConf$Dependant, empty: $rakutentech$r10$R10$Form$Internal$FieldConf$Empty, equal: $rakutentech$r10$R10$Form$Internal$FieldConf$Equal, maxLength: $rakutentech$r10$R10$Form$Internal$FieldConf$MaxLength, minLength: $rakutentech$r10$R10$Form$Internal$FieldConf$MinLength, noValidation: $rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation, not: $rakutentech$r10$R10$Form$Internal$FieldConf$Not, oneOf: $rakutentech$r10$R10$Form$Internal$FieldConf$OneOf, regex: $rakutentech$r10$R10$Form$Internal$FieldConf$Regex, required: $rakutentech$r10$R10$Form$Internal$FieldConf$Required, withMsg: $rakutentech$r10$R10$Form$Internal$FieldConf$WithMsg};
var $author$project$Main$init = function (_v0) {
	return _Utils_Tuple2(
		{
			form: {
				conf: _List_fromArray(
					[
						$rakutentech$r10$R10$Form$entity.field(
						{
							allowOverMaxLength: false,
							autocomplete: $elm$core$Maybe$Nothing,
							clickableLabel: false,
							helperText: $elm$core$Maybe$Just('Helper text for Email'),
							id: 'email',
							idDom: $elm$core$Maybe$Nothing,
							label: 'Email',
							maxWidth: $elm$core$Maybe$Nothing,
							minWidth: $elm$core$Maybe$Nothing,
							placeholder: $elm$core$Maybe$Nothing,
							requiredLabel: $elm$core$Maybe$Just('(required)'),
							type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextEmail),
							validationSpecs: $elm$core$Maybe$Just(
								{
									pretendIsNotValidatedIfValid: true,
									showAlsoPassedValidation: false,
									validation: _List_fromArray(
										[
											$rakutentech$r10$R10$Form$commonValidation.email,
											$rakutentech$r10$R10$Form$validation.minLength(5),
											$rakutentech$r10$R10$Form$validation.maxLength(50),
											$rakutentech$r10$R10$Form$validation.required
										]),
									validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
								})
						}),
						$rakutentech$r10$R10$Form$entity.field(
						{
							allowOverMaxLength: false,
							autocomplete: $elm$core$Maybe$Nothing,
							clickableLabel: false,
							helperText: $elm$core$Maybe$Just('Helper text for Password'),
							id: 'password',
							idDom: $elm$core$Maybe$Nothing,
							label: 'Password',
							maxWidth: $elm$core$Maybe$Nothing,
							minWidth: $elm$core$Maybe$Nothing,
							placeholder: $elm$core$Maybe$Nothing,
							requiredLabel: $elm$core$Maybe$Just('(required)'),
							type_: $rakutentech$r10$R10$FormTypes$TypeText(
								$rakutentech$r10$R10$FormTypes$TextPasswordNew('Show password')),
							validationSpecs: $elm$core$Maybe$Just(
								{
									pretendIsNotValidatedIfValid: true,
									showAlsoPassedValidation: false,
									validation: _List_fromArray(
										[
											$rakutentech$r10$R10$Form$validation.minLength(8),
											$rakutentech$r10$R10$Form$validation.required
										]),
									validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
								})
						})
					]),
				state: $rakutentech$r10$R10$Form$initState
			},
			message: {id: ''}
		},
		$elm$core$Platform$Cmd$none);
};
var $author$project$Main$GotMessageFromReact = function (a) {
	return {$: 'GotMessageFromReact', a: a};
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Main$receiveFromReact = _Platform_incomingPort('receiveFromReact', $elm$json$Json$Decode$string);
var $author$project$Main$subscriptions = function (_v0) {
	return $author$project$Main$receiveFromReact($author$project$Main$GotMessageFromReact);
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Main$sendToReact = _Platform_outgoingPort('sendToReact', $elm$json$Json$Encode$string);
var $rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg = F4(
	function (a, b, c, d) {
		return {$: 'OnPhoneMsg', a: a, b: b, c: c, d: d};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg = F4(
	function (a, b, c, d) {
		return {$: 'OnSingleMsg', a: a, b: b, c: c, d: d};
	});
var $rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation = function (maybeValidationSpecs) {
	if (maybeValidationSpecs.$ === 'Just') {
		var validationSpecs = maybeValidationSpecs.a;
		return validationSpecs.showAlsoPassedValidation;
	} else {
		return false;
	}
};
var $elm$core$Basics$neq = _Utils_notEqual;
var $rakutentech$r10$R10$Form$Internal$Key$separator = '/';
var $rakutentech$r10$R10$Form$Internal$Key$toString = function (_v0) {
	var keys = _v0.a;
	return A2(
		$elm$core$String$join,
		$rakutentech$r10$R10$Form$Internal$Key$separator,
		$elm$core$List$reverse(keys));
};
var $rakutentech$r10$R10$Form$Internal$Update$onActivate = F2(
	function (key, formState) {
		return _Utils_update(
			formState,
			{
				active: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Key$toString(key))
			});
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$NotYetValidated = {$: 'NotYetValidated'};
var $rakutentech$r10$R10$Form$Internal$FieldState$init = {dirty: false, disabled: false, lostFocusOneOrMoreTime: false, over: $elm$core$Maybe$Nothing, scroll: 0, search: '', select: '', showPassword: false, validation: $rakutentech$r10$R10$Form$Internal$FieldState$NotYetValidated, value: '', valueWhenFocused: ''};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault = function (maybeFieldState) {
	return A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$FieldState$init, maybeFieldState);
};
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateOver = F2(
	function (over, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{over: over}));
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Dict$update = function (key) {
	return $elm$core$Dict$update(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $rakutentech$r10$R10$Form$Internal$Update$onChangeOver = F3(
	function (key, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateOver(string),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateSearch = F2(
	function (value, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{search: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onChangeSearch = F3(
	function (key, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateSearch(string),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateSelect = F2(
	function (value, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{select: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onChangeSelect = F3(
	function (key, string, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateSelect(string),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Key$Key = function (a) {
	return {$: 'Key', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Key$fromString = function (keyAsString) {
	return $rakutentech$r10$R10$Form$Internal$Key$Key(
		$elm$core$List$reverse(
			A2($elm$core$String$split, $rakutentech$r10$R10$Form$Internal$Key$separator, keyAsString)));
};
var $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey = $rakutentech$r10$R10$Form$Internal$Key$fromString('copyEmailIntoUsername');
var $rakutentech$r10$R10$Form$Internal$Shared$defaultEmailFieldKeyString = 'email';
var $rakutentech$r10$R10$Form$Internal$Shared$defaultUsernameFieldKeyString = 'username';
var $rakutentech$r10$R10$Form$Internal$Dict$get = function (key) {
	return $elm$core$Dict$get(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$String$fromList = _String_fromList;
var $tasuki$elm_punycode$Helpers$baseConstant = 36;
var $tasuki$elm_punycode$Helpers$damp = 700;
var $tasuki$elm_punycode$Helpers$tmax = 26;
var $tasuki$elm_punycode$Helpers$tmin = 1;
var $tasuki$elm_punycode$Helpers$reduceDelta = F2(
	function (delta, divisions) {
		reduceDelta:
		while (true) {
			if (_Utils_cmp(delta, ((($tasuki$elm_punycode$Helpers$baseConstant - $tasuki$elm_punycode$Helpers$tmin) * $tasuki$elm_punycode$Helpers$tmax) / 2) | 0) > 0) {
				var $temp$delta = (delta / ($tasuki$elm_punycode$Helpers$baseConstant - $tasuki$elm_punycode$Helpers$tmin)) | 0,
					$temp$divisions = divisions + $tasuki$elm_punycode$Helpers$baseConstant;
				delta = $temp$delta;
				divisions = $temp$divisions;
				continue reduceDelta;
			} else {
				return _Utils_Tuple2(delta, divisions);
			}
		}
	});
var $tasuki$elm_punycode$Helpers$skew = 38;
var $tasuki$elm_punycode$Helpers$adapt = F3(
	function (delta, first, numchars) {
		var divisor = first ? $tasuki$elm_punycode$Helpers$damp : 2;
		var intermediateDelta = ((delta / divisor) | 0) + ((((delta / divisor) | 0) / numchars) | 0);
		var _v0 = A2($tasuki$elm_punycode$Helpers$reduceDelta, intermediateDelta, 0);
		var newDelta = _v0.a;
		var divisions = _v0.b;
		return divisions + ((((($tasuki$elm_punycode$Helpers$baseConstant - $tasuki$elm_punycode$Helpers$tmin) + 1) * newDelta) / (newDelta + $tasuki$elm_punycode$Helpers$skew)) | 0);
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $tasuki$elm_punycode$Helpers$getT = F2(
	function (j, bias) {
		var res = ($tasuki$elm_punycode$Helpers$baseConstant * (j + 1)) - bias;
		return (_Utils_cmp(res, $tasuki$elm_punycode$Helpers$tmin) < 0) ? $tasuki$elm_punycode$Helpers$tmin : ((_Utils_cmp(res, $tasuki$elm_punycode$Helpers$tmax) > 0) ? $tasuki$elm_punycode$Helpers$tmax : res);
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $tasuki$elm_punycode$Helpers$decodeGeneralizedNumberHelper = F6(
	function (result, w, j, extended, extpos, bias) {
		var toOrd = function (c) {
			return ((65 <= c) && (c <= 90)) ? $elm$core$Maybe$Just(c - 65) : (((48 <= c) && (c <= 57)) ? $elm$core$Maybe$Just(c - 22) : $elm$core$Maybe$Nothing);
		};
		var t = A2($tasuki$elm_punycode$Helpers$getT, j, bias);
		var getResult = F3(
			function (d, newPos, newResult) {
				return (_Utils_cmp(d, t) < 0) ? $elm$core$Result$Ok(
					_Utils_Tuple2(newPos, newResult)) : A6($tasuki$elm_punycode$Helpers$decodeGeneralizedNumberHelper, newResult, w * ($tasuki$elm_punycode$Helpers$baseConstant - t), j + 1, extended, newPos, bias);
			});
		var _char = $elm$core$List$head(
			A2($elm$core$List$drop, extpos, extended));
		var digit = A2(
			$elm$core$Maybe$andThen,
			toOrd,
			A2($elm$core$Maybe$map, $elm$core$Char$toCode, _char));
		if (digit.$ === 'Just') {
			var d = digit.a;
			return A3(getResult, d, extpos + 1, result + (d * w));
		} else {
			return $elm$core$Result$Err('borked');
		}
	});
var $tasuki$elm_punycode$Helpers$decodeGeneralizedNumber = F3(
	function (extended, extpos, bias) {
		return A6($tasuki$elm_punycode$Helpers$decodeGeneralizedNumberHelper, 0, 1, 0, extended, extpos, bias);
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $tasuki$elm_punycode$Helpers$insertionSortHelper = F6(
	function (base, extended, _char, pos, bias, extpos) {
		var recurse = F2(
			function (nextpos, delta) {
				var onePlus = 1 + $elm$core$List$length(base);
				var intermediatePos = (pos + delta) + 1;
				var newChar = _char + ((intermediatePos / onePlus) | 0);
				var newPos = A2($elm$core$Basics$modBy, onePlus, intermediatePos);
				var newBase = _Utils_ap(
					A2($elm$core$List$take, newPos, base),
					_Utils_ap(
						_List_fromArray(
							[
								$elm$core$Char$fromCode(newChar)
							]),
						A2($elm$core$List$drop, newPos, base)));
				var newBias = A3(
					$tasuki$elm_punycode$Helpers$adapt,
					delta,
					!extpos,
					$elm$core$List$length(newBase));
				return A6($tasuki$elm_punycode$Helpers$insertionSortHelper, newBase, extended, newChar, newPos, newBias, nextpos);
			});
		if (_Utils_cmp(
			extpos,
			$elm$core$List$length(extended)) < 0) {
			var _v0 = A3($tasuki$elm_punycode$Helpers$decodeGeneralizedNumber, extended, extpos, bias);
			if (_v0.$ === 'Ok') {
				var _v1 = _v0.a;
				var nextpos = _v1.a;
				var delta = _v1.b;
				return A2(recurse, nextpos, delta);
			} else {
				return base;
			}
		} else {
			return base;
		}
	});
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $tasuki$elm_punycode$Helpers$insertionSort = F2(
	function (base, extended) {
		return $elm$core$String$fromList(
			A6(
				$tasuki$elm_punycode$Helpers$insertionSortHelper,
				$elm$core$String$toList(base),
				$elm$core$String$toList(extended),
				128,
				-1,
				72,
				0));
	});
var $elm_community$string_extra$String$Extra$leftOfBack = F2(
	function (pattern, string) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (a) {
					return A2($elm$core$String$left, a, string);
				},
				$elm$core$List$head(
					$elm$core$List$reverse(
						A2($elm$core$String$indexes, pattern, string)))));
	});
var $elm$core$String$toUpper = _String_toUpper;
var $tasuki$elm_punycode$Punycode$decode = function (inputStr) {
	var base = A2($elm_community$string_extra$String$Extra$leftOfBack, '-', inputStr);
	var extensionStart = A2($elm$core$String$contains, '-', inputStr) ? (1 + $elm$core$String$length(base)) : 0;
	var extended = A2(
		$elm$core$String$dropLeft,
		extensionStart,
		$elm$core$String$toUpper(inputStr));
	return A2($tasuki$elm_punycode$Helpers$insertionSort, base, extended);
};
var $tasuki$elm_punycode$Punycode$idnPrefix = 'xn--';
var $tasuki$elm_punycode$Punycode$idnPrefixLen = $elm$core$String$length($tasuki$elm_punycode$Punycode$idnPrefix);
var $tasuki$elm_punycode$Punycode$decodeIdnPart = function (idnPart) {
	return A2($elm$core$String$startsWith, $tasuki$elm_punycode$Punycode$idnPrefix, idnPart) ? $tasuki$elm_punycode$Punycode$decode(
		A2($elm$core$String$dropLeft, $tasuki$elm_punycode$Punycode$idnPrefixLen, idnPart)) : idnPart;
};
var $tasuki$elm_punycode$Punycode$decodeIdn = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$split('.'),
	A2(
		$elm$core$Basics$composeR,
		$elm$core$List$map($tasuki$elm_punycode$Punycode$decodeIdnPart),
		$elm$core$String$join('.')));
var $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode = function (string) {
	return A2(
		$elm$core$String$join,
		'@',
		A2(
			$elm$core$List$map,
			$tasuki$elm_punycode$Punycode$decodeIdn,
			A2($elm$core$String$split, '@', string)));
};
var $elm$core$String$toLower = _String_toLower;
var $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool = function (string) {
	return $elm$core$String$toLower(string) === 'true';
};
var $rakutentech$r10$R10$Form$Internal$Update$helperCopyEmailIntoUsername = F3(
	function (key, value, fieldsState) {
		var usernameKeyString = $rakutentech$r10$R10$Form$Internal$Shared$defaultUsernameFieldKeyString;
		var usernameFieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
			A2($elm$core$Dict$get, usernameKeyString, fieldsState));
		var needCopyIntoUsername = $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(
			$rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey, fieldsState)).value);
		var emailKeyString = $rakutentech$r10$R10$Form$Internal$Shared$defaultEmailFieldKeyString;
		var emailFieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
			A2($elm$core$Dict$get, emailKeyString, fieldsState));
		return (_Utils_eq(
			$rakutentech$r10$R10$Form$Internal$Key$toString(key),
			emailKeyString) && needCopyIntoUsername) ? A3(
			$elm$core$Dict$insert,
			usernameKeyString,
			_Utils_update(
				usernameFieldState,
				{
					dirty: true,
					value: $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode(value)
				}),
			fieldsState) : (_Utils_eq(key, $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey) ? ($rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(value) ? A3(
			$elm$core$Dict$insert,
			usernameKeyString,
			_Utils_update(
				usernameFieldState,
				{
					value: $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode(emailFieldState.value)
				}),
			fieldsState) : A3(
			$elm$core$Dict$insert,
			usernameKeyString,
			_Utils_update(
				usernameFieldState,
				{dirty: true, lostFocusOneOrMoreTime: true, value: ''}),
			fieldsState)) : fieldsState);
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$Validated = function (a) {
	return {$: 'Validated', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Helpers$clearFieldValidation = F2(
	function (key, formState) {
		var newFieldsState = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$Form$Internal$FieldState$init,
			A2($elm$core$Dict$get, key, formState.fieldsState));
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$elm$core$Dict$insert,
					key,
					_Utils_update(
						newFieldsState,
						{
							validation: function () {
								var _v0 = newFieldsState.validation;
								if (_v0.$ === 'NotYetValidated') {
									return $rakutentech$r10$R10$Form$Internal$FieldState$NotYetValidated;
								} else {
									return $rakutentech$r10$R10$Form$Internal$FieldState$Validated(_List_Nil);
								}
							}()
						}),
					formState.fieldsState)
			});
	});
var $elm_community$list_extra$List$Extra$findMap = F2(
	function (f, list) {
		findMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var a = list.a;
				var tail = list.b;
				var _v1 = f(a);
				if (_v1.$ === 'Just') {
					var b = _v1.a;
					return $elm$core$Maybe$Just(b);
				} else {
					var $temp$f = f,
						$temp$list = tail;
					f = $temp$f;
					list = $temp$list;
					continue findMap;
				}
			}
		}
	});
var $rakutentech$r10$R10$Form$Internal$Conf$getFieldConfByFieldId = F2(
	function (fieldId, formConf) {
		return A2(
			$elm_community$list_extra$List$Extra$findMap,
			function (entity) {
				if (entity.$ === 'EntityField') {
					var fieldConf = entity.a;
					return _Utils_eq(fieldConf.id, fieldId) ? $elm$core$Maybe$Just(fieldConf) : $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			formConf);
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$getField = F2(
	function (key, formState) {
		return A2($elm$core$Dict$get, key, formState.fieldsState);
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$getFieldValue = F2(
	function (key, formState) {
		return A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.value;
			},
			A2($rakutentech$r10$R10$Form$Internal$Helpers$getField, key, formState));
	});
var $rakutentech$r10$R10$FormTypes$TextPlain = {$: 'TextPlain'};
var $rakutentech$r10$R10$Form$Internal$FieldConf$initValidationSpecs = {
	pretendIsNotValidatedIfValid: false,
	showAlsoPassedValidation: false,
	validation: _List_fromArray(
		[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]),
	validationIcon: $rakutentech$r10$R10$FormTypes$NoIcon
};
var $rakutentech$r10$R10$Form$Internal$FieldConf$init = {
	allowOverMaxLength: true,
	autocomplete: $elm$core$Maybe$Nothing,
	clickableLabel: true,
	helperText: $elm$core$Maybe$Nothing,
	id: '',
	idDom: $elm$core$Maybe$Nothing,
	label: '',
	maxWidth: $elm$core$Maybe$Nothing,
	minWidth: $elm$core$Maybe$Nothing,
	placeholder: $elm$core$Maybe$Nothing,
	requiredLabel: $elm$core$Maybe$Nothing,
	type_: $rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
	validationSpecs: $elm$core$Maybe$Just($rakutentech$r10$R10$Form$Internal$FieldConf$initValidationSpecs)
};
var $rakutentech$r10$R10$Country$Japan = {$: 'Japan'};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm$core$String$trim = _String_trim;
var $elm_community$string_extra$String$Extra$clean = function (string) {
	return $elm$core$String$trim(
		A3(
			$elm$regex$Regex$replace,
			$elm_community$string_extra$String$Extra$regexFromString('\\s\\s+'),
			$elm$core$Basics$always(' '),
			string));
};
var $rakutentech$r10$R10$Country$Afghanistan = {$: 'Afghanistan'};
var $rakutentech$r10$R10$Country$Albania = {$: 'Albania'};
var $rakutentech$r10$R10$Country$Algeria = {$: 'Algeria'};
var $rakutentech$r10$R10$Country$AmericanSamoa = {$: 'AmericanSamoa'};
var $rakutentech$r10$R10$Country$Andorra = {$: 'Andorra'};
var $rakutentech$r10$R10$Country$Angola = {$: 'Angola'};
var $rakutentech$r10$R10$Country$Anguilla = {$: 'Anguilla'};
var $rakutentech$r10$R10$Country$Antarctica = {$: 'Antarctica'};
var $rakutentech$r10$R10$Country$AntiguaandBarbuda = {$: 'AntiguaandBarbuda'};
var $rakutentech$r10$R10$Country$Argentina = {$: 'Argentina'};
var $rakutentech$r10$R10$Country$Armenia = {$: 'Armenia'};
var $rakutentech$r10$R10$Country$Aruba = {$: 'Aruba'};
var $rakutentech$r10$R10$Country$Australia = {$: 'Australia'};
var $rakutentech$r10$R10$Country$Austria = {$: 'Austria'};
var $rakutentech$r10$R10$Country$Azerbaijan = {$: 'Azerbaijan'};
var $rakutentech$r10$R10$Country$Bahamas = {$: 'Bahamas'};
var $rakutentech$r10$R10$Country$Bahrain = {$: 'Bahrain'};
var $rakutentech$r10$R10$Country$Bangladesh = {$: 'Bangladesh'};
var $rakutentech$r10$R10$Country$Barbados = {$: 'Barbados'};
var $rakutentech$r10$R10$Country$Belarus = {$: 'Belarus'};
var $rakutentech$r10$R10$Country$Belgium = {$: 'Belgium'};
var $rakutentech$r10$R10$Country$Belize = {$: 'Belize'};
var $rakutentech$r10$R10$Country$Benin = {$: 'Benin'};
var $rakutentech$r10$R10$Country$Bermuda = {$: 'Bermuda'};
var $rakutentech$r10$R10$Country$Bhutan = {$: 'Bhutan'};
var $rakutentech$r10$R10$Country$Bolivia = {$: 'Bolivia'};
var $rakutentech$r10$R10$Country$BosniaandHerzegovina = {$: 'BosniaandHerzegovina'};
var $rakutentech$r10$R10$Country$Botswana = {$: 'Botswana'};
var $rakutentech$r10$R10$Country$Brazil = {$: 'Brazil'};
var $rakutentech$r10$R10$Country$BritishIndianOceanTerritory = {$: 'BritishIndianOceanTerritory'};
var $rakutentech$r10$R10$Country$BritishVirginIslands = {$: 'BritishVirginIslands'};
var $rakutentech$r10$R10$Country$Brunei = {$: 'Brunei'};
var $rakutentech$r10$R10$Country$Bulgaria = {$: 'Bulgaria'};
var $rakutentech$r10$R10$Country$BurkinaFaso = {$: 'BurkinaFaso'};
var $rakutentech$r10$R10$Country$Burundi = {$: 'Burundi'};
var $rakutentech$r10$R10$Country$Cambodia = {$: 'Cambodia'};
var $rakutentech$r10$R10$Country$Cameroon = {$: 'Cameroon'};
var $rakutentech$r10$R10$Country$CapeVerde = {$: 'CapeVerde'};
var $rakutentech$r10$R10$Country$CaymanIslands = {$: 'CaymanIslands'};
var $rakutentech$r10$R10$Country$CentralAfricanRepublic = {$: 'CentralAfricanRepublic'};
var $rakutentech$r10$R10$Country$Chad = {$: 'Chad'};
var $rakutentech$r10$R10$Country$Chile = {$: 'Chile'};
var $rakutentech$r10$R10$Country$China = {$: 'China'};
var $rakutentech$r10$R10$Country$ChristmasIsland = {$: 'ChristmasIsland'};
var $rakutentech$r10$R10$Country$CocosIslands = {$: 'CocosIslands'};
var $rakutentech$r10$R10$Country$Colombia = {$: 'Colombia'};
var $rakutentech$r10$R10$Country$Comoros = {$: 'Comoros'};
var $rakutentech$r10$R10$Country$CookIslands = {$: 'CookIslands'};
var $rakutentech$r10$R10$Country$CostaRica = {$: 'CostaRica'};
var $rakutentech$r10$R10$Country$Croatia = {$: 'Croatia'};
var $rakutentech$r10$R10$Country$Cuba = {$: 'Cuba'};
var $rakutentech$r10$R10$Country$Curacao = {$: 'Curacao'};
var $rakutentech$r10$R10$Country$Cyprus = {$: 'Cyprus'};
var $rakutentech$r10$R10$Country$CzechRepublic = {$: 'CzechRepublic'};
var $rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo = {$: 'DemocraticRepublicoftheCongo'};
var $rakutentech$r10$R10$Country$Denmark = {$: 'Denmark'};
var $rakutentech$r10$R10$Country$Djibouti = {$: 'Djibouti'};
var $rakutentech$r10$R10$Country$Dominica = {$: 'Dominica'};
var $rakutentech$r10$R10$Country$DominicanRepublic = {$: 'DominicanRepublic'};
var $rakutentech$r10$R10$Country$EastTimor = {$: 'EastTimor'};
var $rakutentech$r10$R10$Country$Ecuador = {$: 'Ecuador'};
var $rakutentech$r10$R10$Country$Egypt = {$: 'Egypt'};
var $rakutentech$r10$R10$Country$ElSalvador = {$: 'ElSalvador'};
var $rakutentech$r10$R10$Country$EquatorialGuinea = {$: 'EquatorialGuinea'};
var $rakutentech$r10$R10$Country$Eritrea = {$: 'Eritrea'};
var $rakutentech$r10$R10$Country$Estonia = {$: 'Estonia'};
var $rakutentech$r10$R10$Country$Ethiopia = {$: 'Ethiopia'};
var $rakutentech$r10$R10$Country$FalklandIslands = {$: 'FalklandIslands'};
var $rakutentech$r10$R10$Country$FaroeIslands = {$: 'FaroeIslands'};
var $rakutentech$r10$R10$Country$Fiji = {$: 'Fiji'};
var $rakutentech$r10$R10$Country$Finland = {$: 'Finland'};
var $rakutentech$r10$R10$Country$France = {$: 'France'};
var $rakutentech$r10$R10$Country$FrenchPolynesia = {$: 'FrenchPolynesia'};
var $rakutentech$r10$R10$Country$Gabon = {$: 'Gabon'};
var $rakutentech$r10$R10$Country$Gambia = {$: 'Gambia'};
var $rakutentech$r10$R10$Country$Georgia = {$: 'Georgia'};
var $rakutentech$r10$R10$Country$Germany = {$: 'Germany'};
var $rakutentech$r10$R10$Country$Ghana = {$: 'Ghana'};
var $rakutentech$r10$R10$Country$Gibraltar = {$: 'Gibraltar'};
var $rakutentech$r10$R10$Country$Greece = {$: 'Greece'};
var $rakutentech$r10$R10$Country$Greenland = {$: 'Greenland'};
var $rakutentech$r10$R10$Country$Grenada = {$: 'Grenada'};
var $rakutentech$r10$R10$Country$Guam = {$: 'Guam'};
var $rakutentech$r10$R10$Country$Guatemala = {$: 'Guatemala'};
var $rakutentech$r10$R10$Country$Guernsey = {$: 'Guernsey'};
var $rakutentech$r10$R10$Country$Guinea = {$: 'Guinea'};
var $rakutentech$r10$R10$Country$GuineaBissau = {$: 'GuineaBissau'};
var $rakutentech$r10$R10$Country$Guyana = {$: 'Guyana'};
var $rakutentech$r10$R10$Country$Haiti = {$: 'Haiti'};
var $rakutentech$r10$R10$Country$Honduras = {$: 'Honduras'};
var $rakutentech$r10$R10$Country$HongKong = {$: 'HongKong'};
var $rakutentech$r10$R10$Country$Hungary = {$: 'Hungary'};
var $rakutentech$r10$R10$Country$Iceland = {$: 'Iceland'};
var $rakutentech$r10$R10$Country$India = {$: 'India'};
var $rakutentech$r10$R10$Country$Indonesia = {$: 'Indonesia'};
var $rakutentech$r10$R10$Country$Iran = {$: 'Iran'};
var $rakutentech$r10$R10$Country$Iraq = {$: 'Iraq'};
var $rakutentech$r10$R10$Country$Ireland = {$: 'Ireland'};
var $rakutentech$r10$R10$Country$IsleofMan = {$: 'IsleofMan'};
var $rakutentech$r10$R10$Country$Israel = {$: 'Israel'};
var $rakutentech$r10$R10$Country$Italy = {$: 'Italy'};
var $rakutentech$r10$R10$Country$IvoryCoast = {$: 'IvoryCoast'};
var $rakutentech$r10$R10$Country$Jamaica = {$: 'Jamaica'};
var $rakutentech$r10$R10$Country$Jersey = {$: 'Jersey'};
var $rakutentech$r10$R10$Country$Jordan = {$: 'Jordan'};
var $rakutentech$r10$R10$Country$Kenya = {$: 'Kenya'};
var $rakutentech$r10$R10$Country$Kiribati = {$: 'Kiribati'};
var $rakutentech$r10$R10$Country$Kosovo = {$: 'Kosovo'};
var $rakutentech$r10$R10$Country$Kuwait = {$: 'Kuwait'};
var $rakutentech$r10$R10$Country$Kyrgyzstan = {$: 'Kyrgyzstan'};
var $rakutentech$r10$R10$Country$Laos = {$: 'Laos'};
var $rakutentech$r10$R10$Country$Latvia = {$: 'Latvia'};
var $rakutentech$r10$R10$Country$Lebanon = {$: 'Lebanon'};
var $rakutentech$r10$R10$Country$Lesotho = {$: 'Lesotho'};
var $rakutentech$r10$R10$Country$Liberia = {$: 'Liberia'};
var $rakutentech$r10$R10$Country$Libya = {$: 'Libya'};
var $rakutentech$r10$R10$Country$Liechtenstein = {$: 'Liechtenstein'};
var $rakutentech$r10$R10$Country$Lithuania = {$: 'Lithuania'};
var $rakutentech$r10$R10$Country$Luxembourg = {$: 'Luxembourg'};
var $rakutentech$r10$R10$Country$Macau = {$: 'Macau'};
var $rakutentech$r10$R10$Country$Macedonia = {$: 'Macedonia'};
var $rakutentech$r10$R10$Country$Madagascar = {$: 'Madagascar'};
var $rakutentech$r10$R10$Country$Malawi = {$: 'Malawi'};
var $rakutentech$r10$R10$Country$Malaysia = {$: 'Malaysia'};
var $rakutentech$r10$R10$Country$Maldives = {$: 'Maldives'};
var $rakutentech$r10$R10$Country$Mali = {$: 'Mali'};
var $rakutentech$r10$R10$Country$Malta = {$: 'Malta'};
var $rakutentech$r10$R10$Country$MarshallIslands = {$: 'MarshallIslands'};
var $rakutentech$r10$R10$Country$Mauritania = {$: 'Mauritania'};
var $rakutentech$r10$R10$Country$Mauritius = {$: 'Mauritius'};
var $rakutentech$r10$R10$Country$Mayotte = {$: 'Mayotte'};
var $rakutentech$r10$R10$Country$Mexico = {$: 'Mexico'};
var $rakutentech$r10$R10$Country$Micronesia = {$: 'Micronesia'};
var $rakutentech$r10$R10$Country$Moldova = {$: 'Moldova'};
var $rakutentech$r10$R10$Country$Monaco = {$: 'Monaco'};
var $rakutentech$r10$R10$Country$Mongolia = {$: 'Mongolia'};
var $rakutentech$r10$R10$Country$Montenegro = {$: 'Montenegro'};
var $rakutentech$r10$R10$Country$Montserrat = {$: 'Montserrat'};
var $rakutentech$r10$R10$Country$Morocco = {$: 'Morocco'};
var $rakutentech$r10$R10$Country$Mozambique = {$: 'Mozambique'};
var $rakutentech$r10$R10$Country$Myanmar = {$: 'Myanmar'};
var $rakutentech$r10$R10$Country$Namibia = {$: 'Namibia'};
var $rakutentech$r10$R10$Country$Nauru = {$: 'Nauru'};
var $rakutentech$r10$R10$Country$Nepal = {$: 'Nepal'};
var $rakutentech$r10$R10$Country$Netherlands = {$: 'Netherlands'};
var $rakutentech$r10$R10$Country$NewCaledonia = {$: 'NewCaledonia'};
var $rakutentech$r10$R10$Country$NewZealand = {$: 'NewZealand'};
var $rakutentech$r10$R10$Country$Nicaragua = {$: 'Nicaragua'};
var $rakutentech$r10$R10$Country$Niger = {$: 'Niger'};
var $rakutentech$r10$R10$Country$Nigeria = {$: 'Nigeria'};
var $rakutentech$r10$R10$Country$Niue = {$: 'Niue'};
var $rakutentech$r10$R10$Country$NorthKorea = {$: 'NorthKorea'};
var $rakutentech$r10$R10$Country$NorthernMarianaIslands = {$: 'NorthernMarianaIslands'};
var $rakutentech$r10$R10$Country$Norway = {$: 'Norway'};
var $rakutentech$r10$R10$Country$Oman = {$: 'Oman'};
var $rakutentech$r10$R10$Country$Pakistan = {$: 'Pakistan'};
var $rakutentech$r10$R10$Country$Palau = {$: 'Palau'};
var $rakutentech$r10$R10$Country$Palestine = {$: 'Palestine'};
var $rakutentech$r10$R10$Country$Panama = {$: 'Panama'};
var $rakutentech$r10$R10$Country$PapuaNewGuinea = {$: 'PapuaNewGuinea'};
var $rakutentech$r10$R10$Country$Paraguay = {$: 'Paraguay'};
var $rakutentech$r10$R10$Country$Peru = {$: 'Peru'};
var $rakutentech$r10$R10$Country$Philippines = {$: 'Philippines'};
var $rakutentech$r10$R10$Country$Poland = {$: 'Poland'};
var $rakutentech$r10$R10$Country$Portugal = {$: 'Portugal'};
var $rakutentech$r10$R10$Country$PuertoRico = {$: 'PuertoRico'};
var $rakutentech$r10$R10$Country$Qatar = {$: 'Qatar'};
var $rakutentech$r10$R10$Country$RepublicoftheCongo = {$: 'RepublicoftheCongo'};
var $rakutentech$r10$R10$Country$Reunion = {$: 'Reunion'};
var $rakutentech$r10$R10$Country$Romania = {$: 'Romania'};
var $rakutentech$r10$R10$Country$Russia = {$: 'Russia'};
var $rakutentech$r10$R10$Country$Rwanda = {$: 'Rwanda'};
var $rakutentech$r10$R10$Country$SaintHelena = {$: 'SaintHelena'};
var $rakutentech$r10$R10$Country$SaintKittsandNevis = {$: 'SaintKittsandNevis'};
var $rakutentech$r10$R10$Country$SaintLucia = {$: 'SaintLucia'};
var $rakutentech$r10$R10$Country$SaintPierreandMiquelon = {$: 'SaintPierreandMiquelon'};
var $rakutentech$r10$R10$Country$SaintVincentandTheGrenadines = {$: 'SaintVincentandTheGrenadines'};
var $rakutentech$r10$R10$Country$Samoa = {$: 'Samoa'};
var $rakutentech$r10$R10$Country$SanMarino = {$: 'SanMarino'};
var $rakutentech$r10$R10$Country$SaoTomeandPrincipe = {$: 'SaoTomeandPrincipe'};
var $rakutentech$r10$R10$Country$SaudiArabia = {$: 'SaudiArabia'};
var $rakutentech$r10$R10$Country$Senegal = {$: 'Senegal'};
var $rakutentech$r10$R10$Country$Serbia = {$: 'Serbia'};
var $rakutentech$r10$R10$Country$Seychelles = {$: 'Seychelles'};
var $rakutentech$r10$R10$Country$SierraLeone = {$: 'SierraLeone'};
var $rakutentech$r10$R10$Country$Singapore = {$: 'Singapore'};
var $rakutentech$r10$R10$Country$SintMaarten = {$: 'SintMaarten'};
var $rakutentech$r10$R10$Country$Slovakia = {$: 'Slovakia'};
var $rakutentech$r10$R10$Country$Slovenia = {$: 'Slovenia'};
var $rakutentech$r10$R10$Country$SolomonIslands = {$: 'SolomonIslands'};
var $rakutentech$r10$R10$Country$Somalia = {$: 'Somalia'};
var $rakutentech$r10$R10$Country$SouthAfrica = {$: 'SouthAfrica'};
var $rakutentech$r10$R10$Country$SouthKorea = {$: 'SouthKorea'};
var $rakutentech$r10$R10$Country$SouthSudan = {$: 'SouthSudan'};
var $rakutentech$r10$R10$Country$Spain = {$: 'Spain'};
var $rakutentech$r10$R10$Country$SriLanka = {$: 'SriLanka'};
var $rakutentech$r10$R10$Country$Sudan = {$: 'Sudan'};
var $rakutentech$r10$R10$Country$Suriname = {$: 'Suriname'};
var $rakutentech$r10$R10$Country$SvalbardandJanMayen = {$: 'SvalbardandJanMayen'};
var $rakutentech$r10$R10$Country$Swaziland = {$: 'Swaziland'};
var $rakutentech$r10$R10$Country$Sweden = {$: 'Sweden'};
var $rakutentech$r10$R10$Country$Switzerland = {$: 'Switzerland'};
var $rakutentech$r10$R10$Country$Syria = {$: 'Syria'};
var $rakutentech$r10$R10$Country$Taiwan = {$: 'Taiwan'};
var $rakutentech$r10$R10$Country$Tajikistan = {$: 'Tajikistan'};
var $rakutentech$r10$R10$Country$Tanzania = {$: 'Tanzania'};
var $rakutentech$r10$R10$Country$Thailand = {$: 'Thailand'};
var $rakutentech$r10$R10$Country$Togo = {$: 'Togo'};
var $rakutentech$r10$R10$Country$Tokelau = {$: 'Tokelau'};
var $rakutentech$r10$R10$Country$Tonga = {$: 'Tonga'};
var $rakutentech$r10$R10$Country$TrinidadandTobago = {$: 'TrinidadandTobago'};
var $rakutentech$r10$R10$Country$Tunisia = {$: 'Tunisia'};
var $rakutentech$r10$R10$Country$Turkey = {$: 'Turkey'};
var $rakutentech$r10$R10$Country$Turkmenistan = {$: 'Turkmenistan'};
var $rakutentech$r10$R10$Country$TurksandCaicosIslands = {$: 'TurksandCaicosIslands'};
var $rakutentech$r10$R10$Country$Tuvalu = {$: 'Tuvalu'};
var $rakutentech$r10$R10$Country$USVirginIslands = {$: 'USVirginIslands'};
var $rakutentech$r10$R10$Country$Uganda = {$: 'Uganda'};
var $rakutentech$r10$R10$Country$Ukraine = {$: 'Ukraine'};
var $rakutentech$r10$R10$Country$UnitedArabEmirates = {$: 'UnitedArabEmirates'};
var $rakutentech$r10$R10$Country$UnitedKingdom = {$: 'UnitedKingdom'};
var $rakutentech$r10$R10$Country$UnitedStates = {$: 'UnitedStates'};
var $rakutentech$r10$R10$Country$Uruguay = {$: 'Uruguay'};
var $rakutentech$r10$R10$Country$Uzbekistan = {$: 'Uzbekistan'};
var $rakutentech$r10$R10$Country$Vanuatu = {$: 'Vanuatu'};
var $rakutentech$r10$R10$Country$Vatican = {$: 'Vatican'};
var $rakutentech$r10$R10$Country$Venezuela = {$: 'Venezuela'};
var $rakutentech$r10$R10$Country$Vietnam = {$: 'Vietnam'};
var $rakutentech$r10$R10$Country$WallisandFutuna = {$: 'WallisandFutuna'};
var $rakutentech$r10$R10$Country$Yemen = {$: 'Yemen'};
var $rakutentech$r10$R10$Country$Zambia = {$: 'Zambia'};
var $rakutentech$r10$R10$Country$Zimbabwe = {$: 'Zimbabwe'};
var $rakutentech$r10$R10$Country$fromCountryTelCode = function (code) {
	switch (code) {
		case '+93':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Afghanistan);
		case '+355':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Albania);
		case '+213':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Algeria);
		case '+1684':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AmericanSamoa);
		case '+376':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Andorra);
		case '+244':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Angola);
		case '+1264':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Anguilla);
		case '+672':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Antarctica);
		case '+1268':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AntiguaandBarbuda);
		case '+54':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Argentina);
		case '+374':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Armenia);
		case '+297':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Aruba);
		case '+61':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Australia);
		case '+43':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Austria);
		case '+994':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Azerbaijan);
		case '+1242':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahamas);
		case '+973':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahrain);
		case '+880':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bangladesh);
		case '+1246':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Barbados);
		case '+375':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belarus);
		case '+32':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belgium);
		case '+501':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belize);
		case '+229':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Benin);
		case '+1441':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bermuda);
		case '+975':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bhutan);
		case '+591':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bolivia);
		case '+387':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BosniaandHerzegovina);
		case '+267':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Botswana);
		case '+55':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brazil);
		case '+246':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishIndianOceanTerritory);
		case '+1284':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishVirginIslands);
		case '+673':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brunei);
		case '+359':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bulgaria);
		case '+226':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BurkinaFaso);
		case '+257':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Burundi);
		case '+855':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cambodia);
		case '+237':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cameroon);
		case '+238':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CapeVerde);
		case '+1345':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CaymanIslands);
		case '+236':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CentralAfricanRepublic);
		case '+235':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chad);
		case '+56':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chile);
		case '+86':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$China);
		case '+6189164':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ChristmasIsland);
		case '+6189162':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CocosIslands);
		case '+57':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Colombia);
		case '+269':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Comoros);
		case '+682':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CookIslands);
		case '+506':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CostaRica);
		case '+385':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Croatia);
		case '+53':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cuba);
		case '+599':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Curacao);
		case '+357':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cyprus);
		case '+420':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CzechRepublic);
		case '+243':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo);
		case '+45':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Denmark);
		case '+253':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Djibouti);
		case '+1767':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Dominica);
		case '+1809':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+1829':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+1849':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case '+670':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EastTimor);
		case '+593':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ecuador);
		case '+20':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Egypt);
		case '+503':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ElSalvador);
		case '+240':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EquatorialGuinea);
		case '+291':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Eritrea);
		case '+372':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Estonia);
		case '+251':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ethiopia);
		case '+500':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FalklandIslands);
		case '+298':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FaroeIslands);
		case '+679':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Fiji);
		case '+358':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Finland);
		case '+33':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$France);
		case '+689':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FrenchPolynesia);
		case '+241':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gabon);
		case '+220':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gambia);
		case '+995':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Georgia);
		case '+49':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Germany);
		case '+233':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ghana);
		case '+350':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gibraltar);
		case '+30':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greece);
		case '+299':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greenland);
		case '+1473':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Grenada);
		case '+1671':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guam);
		case '+502':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guatemala);
		case '+441481':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guernsey);
		case '+224':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guinea);
		case '+245':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$GuineaBissau);
		case '+592':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guyana);
		case '+509':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Haiti);
		case '+504':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Honduras);
		case '+852':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$HongKong);
		case '+36':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Hungary);
		case '+354':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iceland);
		case '+91':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$India);
		case '+62':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Indonesia);
		case '+98':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iran);
		case '+964':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iraq);
		case '+353':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ireland);
		case '+441624':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IsleofMan);
		case '+972':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Israel);
		case '+39':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Italy);
		case '+225':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IvoryCoast);
		case '+1876':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jamaica);
		case '+81':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Japan);
		case '+441534':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jersey);
		case '+962':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jordan);
		case '+254':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kenya);
		case '+686':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kiribati);
		case '+383':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kosovo);
		case '+965':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kuwait);
		case '+996':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kyrgyzstan);
		case '+856':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Laos);
		case '+371':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Latvia);
		case '+961':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lebanon);
		case '+266':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lesotho);
		case '+231':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liberia);
		case '+218':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Libya);
		case '+423':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liechtenstein);
		case '+370':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lithuania);
		case '+352':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Luxembourg);
		case '+853':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macau);
		case '+389':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macedonia);
		case '+261':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Madagascar);
		case '+265':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malawi);
		case '+60':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malaysia);
		case '+960':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Maldives);
		case '+223':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mali);
		case '+356':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malta);
		case '+692':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$MarshallIslands);
		case '+222':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritania);
		case '+230':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritius);
		case '+262269':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case '+262639':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case '+52':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mexico);
		case '+691':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Micronesia);
		case '+373':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Moldova);
		case '+377':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Monaco);
		case '+976':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mongolia);
		case '+382':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montenegro);
		case '+1664':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montserrat);
		case '+212':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Morocco);
		case '+258':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mozambique);
		case '+95':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Myanmar);
		case '+264':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Namibia);
		case '+674':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nauru);
		case '+977':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nepal);
		case '+31':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Netherlands);
		case '+687':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewCaledonia);
		case '+64':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewZealand);
		case '+505':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nicaragua);
		case '+227':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niger);
		case '+234':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nigeria);
		case '+683':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niue);
		case '+850':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthKorea);
		case '+1670':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthernMarianaIslands);
		case '+47':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Norway);
		case '+968':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Oman);
		case '+92':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pakistan);
		case '+680':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palau);
		case '+970':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palestine);
		case '+507':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Panama);
		case '+675':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PapuaNewGuinea);
		case '+595':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Paraguay);
		case '+51':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Peru);
		case '+63':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Philippines);
		case '+48':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Poland);
		case '+351':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Portugal);
		case '+1787':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case '+1939':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case '+974':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Qatar);
		case '+242':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$RepublicoftheCongo);
		case '+262':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Reunion);
		case '+40':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Romania);
		case '+7':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Russia);
		case '+250':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Rwanda);
		case '+290':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintHelena);
		case '+1869':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintKittsandNevis);
		case '+1758':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintLucia);
		case '+508':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintPierreandMiquelon);
		case '+1784':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintVincentandTheGrenadines);
		case '+685':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Samoa);
		case '+378':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SanMarino);
		case '+239':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaoTomeandPrincipe);
		case '+966':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaudiArabia);
		case '+221':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Senegal);
		case '+381':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Serbia);
		case '+248':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Seychelles);
		case '+232':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SierraLeone);
		case '+65':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Singapore);
		case '+1721':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SintMaarten);
		case '+421':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovakia);
		case '+386':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovenia);
		case '+677':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SolomonIslands);
		case '+252':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Somalia);
		case '+27':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthAfrica);
		case '+82':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthKorea);
		case '+211':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthSudan);
		case '+34':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Spain);
		case '+94':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SriLanka);
		case '+249':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sudan);
		case '+597':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Suriname);
		case '+4779':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SvalbardandJanMayen);
		case '+268':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Swaziland);
		case '+46':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sweden);
		case '+41':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Switzerland);
		case '+963':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Syria);
		case '+886':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Taiwan);
		case '+992':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tajikistan);
		case '+255':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tanzania);
		case '+66':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Thailand);
		case '+228':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Togo);
		case '+690':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tokelau);
		case '+676':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tonga);
		case '+1868':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TrinidadandTobago);
		case '+216':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tunisia);
		case '+90':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkey);
		case '+993':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkmenistan);
		case '+1649':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TurksandCaicosIslands);
		case '+688':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tuvalu);
		case '+1340':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$USVirginIslands);
		case '+256':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uganda);
		case '+380':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ukraine);
		case '+971':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedArabEmirates);
		case '+44':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedKingdom);
		case '+1':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedStates);
		case '+598':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uruguay);
		case '+998':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uzbekistan);
		case '+678':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vanuatu);
		case '+379':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vatican);
		case '+58':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Venezuela);
		case '+84':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vietnam);
		case '+681':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WallisandFutuna);
		case '+967':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Yemen);
		case '+260':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zambia);
		case '+263':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zimbabwe);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $rakutentech$r10$R10$Country$generatePrefixes = F2(
	function (listPrefixes, telephone) {
		generatePrefixes:
		while (true) {
			if ($elm$core$String$length(telephone) <= 1) {
				return listPrefixes;
			} else {
				var $temp$listPrefixes = A2($elm$core$List$cons, telephone, listPrefixes),
					$temp$telephone = A2($elm$core$String$dropRight, 1, telephone);
				listPrefixes = $temp$listPrefixes;
				telephone = $temp$telephone;
				continue generatePrefixes;
			}
		}
	});
var $rakutentech$r10$R10$Country$fromTelephoneAsString = function (telephone) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (string, acc) {
				if (acc.$ === 'Just') {
					return acc;
				} else {
					return $rakutentech$r10$R10$Country$fromCountryTelCode(string);
				}
			}),
		$elm$core$Maybe$Nothing,
		$elm$core$List$reverse(
			A2(
				$rakutentech$r10$R10$Country$generatePrefixes,
				_List_Nil,
				A2(
					$elm$core$String$left,
					8,
					$elm_community$string_extra$String$Extra$clean(telephone)))));
};
var $rakutentech$r10$R10$Country$toCountryTelCode = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return '+93';
		case 'Albania':
			return '+355';
		case 'Algeria':
			return '+213';
		case 'AmericanSamoa':
			return '+1684';
		case 'Andorra':
			return '+376';
		case 'Angola':
			return '+244';
		case 'Anguilla':
			return '+1264';
		case 'Antarctica':
			return '+672';
		case 'AntiguaandBarbuda':
			return '+1268';
		case 'Argentina':
			return '+54';
		case 'Armenia':
			return '+374';
		case 'Aruba':
			return '+297';
		case 'Australia':
			return '+61';
		case 'Austria':
			return '+43';
		case 'Azerbaijan':
			return '+994';
		case 'Bahamas':
			return '+1242';
		case 'Bahrain':
			return '+973';
		case 'Bangladesh':
			return '+880';
		case 'Barbados':
			return '+1246';
		case 'Belarus':
			return '+375';
		case 'Belgium':
			return '+32';
		case 'Belize':
			return '+501';
		case 'Benin':
			return '+229';
		case 'Bermuda':
			return '+1441';
		case 'Bhutan':
			return '+975';
		case 'Bolivia':
			return '+591';
		case 'BosniaandHerzegovina':
			return '+387';
		case 'Botswana':
			return '+267';
		case 'Brazil':
			return '+55';
		case 'BritishIndianOceanTerritory':
			return '+246';
		case 'BritishVirginIslands':
			return '+1284';
		case 'Brunei':
			return '+673';
		case 'Bulgaria':
			return '+359';
		case 'BurkinaFaso':
			return '+226';
		case 'Burundi':
			return '+257';
		case 'Cambodia':
			return '+855';
		case 'Cameroon':
			return '+237';
		case 'Canada':
			return '+1';
		case 'CapeVerde':
			return '+238';
		case 'CaymanIslands':
			return '+1345';
		case 'CentralAfricanRepublic':
			return '+236';
		case 'Chad':
			return '+235';
		case 'Chile':
			return '+56';
		case 'China':
			return '+86';
		case 'ChristmasIsland':
			return '+6189164';
		case 'CocosIslands':
			return '+6189162';
		case 'Colombia':
			return '+57';
		case 'Comoros':
			return '+269';
		case 'CookIslands':
			return '+682';
		case 'CostaRica':
			return '+506';
		case 'Croatia':
			return '+385';
		case 'Cuba':
			return '+53';
		case 'Curacao':
			return '+599';
		case 'Cyprus':
			return '+357';
		case 'CzechRepublic':
			return '+420';
		case 'DemocraticRepublicoftheCongo':
			return '+243';
		case 'Denmark':
			return '+45';
		case 'Djibouti':
			return '+253';
		case 'Dominica':
			return '+1767';
		case 'DominicanRepublic':
			return '+1809';
		case 'EastTimor':
			return '+670';
		case 'Ecuador':
			return '+593';
		case 'Egypt':
			return '+20';
		case 'ElSalvador':
			return '+503';
		case 'EquatorialGuinea':
			return '+240';
		case 'Eritrea':
			return '+291';
		case 'Estonia':
			return '+372';
		case 'Ethiopia':
			return '+251';
		case 'FalklandIslands':
			return '+500';
		case 'FaroeIslands':
			return '+298';
		case 'Fiji':
			return '+679';
		case 'Finland':
			return '+358';
		case 'France':
			return '+33';
		case 'FrenchPolynesia':
			return '+689';
		case 'Gabon':
			return '+241';
		case 'Gambia':
			return '+220';
		case 'Georgia':
			return '+995';
		case 'Germany':
			return '+49';
		case 'Ghana':
			return '+233';
		case 'Gibraltar':
			return '+350';
		case 'Greece':
			return '+30';
		case 'Greenland':
			return '+299';
		case 'Grenada':
			return '+1473';
		case 'Guam':
			return '+1671';
		case 'Guatemala':
			return '+502';
		case 'Guernsey':
			return '+441481';
		case 'Guinea':
			return '+224';
		case 'GuineaBissau':
			return '+245';
		case 'Guyana':
			return '+592';
		case 'Haiti':
			return '+509';
		case 'Honduras':
			return '+504';
		case 'HongKong':
			return '+852';
		case 'Hungary':
			return '+36';
		case 'Iceland':
			return '+354';
		case 'India':
			return '+91';
		case 'Indonesia':
			return '+62';
		case 'Iran':
			return '+98';
		case 'Iraq':
			return '+964';
		case 'Ireland':
			return '+353';
		case 'IsleofMan':
			return '+441624';
		case 'Israel':
			return '+972';
		case 'Italy':
			return '+39';
		case 'IvoryCoast':
			return '+225';
		case 'Jamaica':
			return '+1876';
		case 'Japan':
			return '+81';
		case 'Jersey':
			return '+441534';
		case 'Jordan':
			return '+962';
		case 'Kazakhstan':
			return '+7';
		case 'Kenya':
			return '+254';
		case 'Kiribati':
			return '+686';
		case 'Kosovo':
			return '+383';
		case 'Kuwait':
			return '+965';
		case 'Kyrgyzstan':
			return '+996';
		case 'Laos':
			return '+856';
		case 'Latvia':
			return '+371';
		case 'Lebanon':
			return '+961';
		case 'Lesotho':
			return '+266';
		case 'Liberia':
			return '+231';
		case 'Libya':
			return '+218';
		case 'Liechtenstein':
			return '+423';
		case 'Lithuania':
			return '+370';
		case 'Luxembourg':
			return '+352';
		case 'Macau':
			return '+853';
		case 'Macedonia':
			return '+389';
		case 'Madagascar':
			return '+261';
		case 'Malawi':
			return '+265';
		case 'Malaysia':
			return '+60';
		case 'Maldives':
			return '+960';
		case 'Mali':
			return '+223';
		case 'Malta':
			return '+356';
		case 'MarshallIslands':
			return '+692';
		case 'Mauritania':
			return '+222';
		case 'Mauritius':
			return '+230';
		case 'Mayotte':
			return '+262';
		case 'Mexico':
			return '+52';
		case 'Micronesia':
			return '+691';
		case 'Moldova':
			return '+373';
		case 'Monaco':
			return '+377';
		case 'Mongolia':
			return '+976';
		case 'Montenegro':
			return '+382';
		case 'Montserrat':
			return '+1664';
		case 'Morocco':
			return '+212';
		case 'Mozambique':
			return '+258';
		case 'Myanmar':
			return '+95';
		case 'Namibia':
			return '+264';
		case 'Nauru':
			return '+674';
		case 'Nepal':
			return '+977';
		case 'Netherlands':
			return '+31';
		case 'NewCaledonia':
			return '+687';
		case 'NewZealand':
			return '+64';
		case 'Nicaragua':
			return '+505';
		case 'Niger':
			return '+227';
		case 'Nigeria':
			return '+234';
		case 'Niue':
			return '+683';
		case 'NorthKorea':
			return '+850';
		case 'NorthernMarianaIslands':
			return '+1670';
		case 'Norway':
			return '+47';
		case 'Oman':
			return '+968';
		case 'Pakistan':
			return '+92';
		case 'Palau':
			return '+680';
		case 'Palestine':
			return '+970';
		case 'Panama':
			return '+507';
		case 'PapuaNewGuinea':
			return '+675';
		case 'Paraguay':
			return '+595';
		case 'Peru':
			return '+51';
		case 'Philippines':
			return '+63';
		case 'Pitcairn':
			return '+64';
		case 'Poland':
			return '+48';
		case 'Portugal':
			return '+351';
		case 'PuertoRico':
			return '+1787';
		case 'Qatar':
			return '+974';
		case 'RepublicoftheCongo':
			return '+242';
		case 'Reunion':
			return '+262';
		case 'Romania':
			return '+40';
		case 'Russia':
			return '+7';
		case 'Rwanda':
			return '+250';
		case 'SaintBarthelemy':
			return '+590';
		case 'SaintHelena':
			return '+290';
		case 'SaintKittsandNevis':
			return '+1869';
		case 'SaintLucia':
			return '+1758';
		case 'SaintMartin':
			return '+590';
		case 'SaintPierreandMiquelon':
			return '+508';
		case 'SaintVincentandTheGrenadines':
			return '+1784';
		case 'Samoa':
			return '+685';
		case 'SanMarino':
			return '+378';
		case 'SaoTomeandPrincipe':
			return '+239';
		case 'SaudiArabia':
			return '+966';
		case 'Senegal':
			return '+221';
		case 'Serbia':
			return '+381';
		case 'Seychelles':
			return '+248';
		case 'SierraLeone':
			return '+232';
		case 'Singapore':
			return '+65';
		case 'SintMaarten':
			return '+1721';
		case 'Slovakia':
			return '+421';
		case 'Slovenia':
			return '+386';
		case 'SolomonIslands':
			return '+677';
		case 'Somalia':
			return '+252';
		case 'SouthAfrica':
			return '+27';
		case 'SouthKorea':
			return '+82';
		case 'SouthSudan':
			return '+211';
		case 'Spain':
			return '+34';
		case 'SriLanka':
			return '+94';
		case 'Sudan':
			return '+249';
		case 'Suriname':
			return '+597';
		case 'SvalbardandJanMayen':
			return '+47';
		case 'Swaziland':
			return '+268';
		case 'Sweden':
			return '+46';
		case 'Switzerland':
			return '+41';
		case 'Syria':
			return '+963';
		case 'Taiwan':
			return '+886';
		case 'Tajikistan':
			return '+992';
		case 'Tanzania':
			return '+255';
		case 'Thailand':
			return '+66';
		case 'Togo':
			return '+228';
		case 'Tokelau':
			return '+690';
		case 'Tonga':
			return '+676';
		case 'TrinidadandTobago':
			return '+1868';
		case 'Tunisia':
			return '+216';
		case 'Turkey':
			return '+90';
		case 'Turkmenistan':
			return '+993';
		case 'TurksandCaicosIslands':
			return '+1649';
		case 'Tuvalu':
			return '+688';
		case 'USVirginIslands':
			return '+1340';
		case 'Uganda':
			return '+256';
		case 'Ukraine':
			return '+380';
		case 'UnitedArabEmirates':
			return '+971';
		case 'UnitedKingdom':
			return '+44';
		case 'UnitedStates':
			return '+1';
		case 'Uruguay':
			return '+598';
		case 'Uzbekistan':
			return '+998';
		case 'Vanuatu':
			return '+678';
		case 'Vatican':
			return '+379';
		case 'Venezuela':
			return '+58';
		case 'Vietnam':
			return '+84';
		case 'WallisandFutuna':
			return '+681';
		case 'WesternSahara':
			return '+212';
		case 'Yemen':
			return '+967';
		case 'Zambia':
			return '+260';
		default:
			return '+263';
	}
};
var $rakutentech$r10$R10$Utils$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 'Nothing') {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$cleanPhoneNumber = function (value) {
	var cleanedValue = function () {
		var cleanedPhoneNumber = A3(
			$rakutentech$r10$R10$Utils$userReplace,
			'[^\\d]',
			function (_v1) {
				return '';
			},
			A3(
				$rakutentech$r10$R10$Utils$userReplace,
				'[^0-9 \\-\\(\\).]',
				function (_v0) {
					return '';
				},
				$elm_community$string_extra$String$Extra$clean(value)));
		return ($elm$core$String$length(cleanedPhoneNumber) > 0) ? ('+' + cleanedPhoneNumber) : '';
	}();
	var countryTelCode = A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$core$Maybe$map,
			$rakutentech$r10$R10$Country$toCountryTelCode,
			$rakutentech$r10$R10$Country$fromTelephoneAsString(cleanedValue)));
	var newValue = _Utils_eq(countryTelCode, cleanedValue) ? '' : cleanedValue;
	return newValue;
};
var $rakutentech$r10$R10$Form$Internal$Validation$cleanPhoneNumber = F2(
	function (fieldType, value) {
		if (fieldType.$ === 'TypeSpecial') {
			return $rakutentech$r10$R10$Form$Internal$Helpers$cleanPhoneNumber(value);
		} else {
			return value;
		}
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $rakutentech$r10$R10$Form$Internal$Key$headId = function (_v0) {
	var list = _v0.a;
	return A2(
		$elm$core$Maybe$withDefault,
		'CANNOT_FIND_THE_HEAD_ID_IN_AN_EMPTY_KEY',
		$elm$core$List$head(list));
};
var $rakutentech$r10$R10$Form$Internal$Validation$punydecodeIfEmail = F2(
	function (fieldType, value) {
		_v0$3:
		while (true) {
			if (fieldType.$ === 'TypeText') {
				switch (fieldType.a.$) {
					case 'TextEmail':
						var _v1 = fieldType.a;
						return $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode(value);
					case 'TextMobileEmail':
						var _v2 = fieldType.a;
						return $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode(value);
					case 'TextEmailWithSuggestions':
						return $rakutentech$r10$R10$Form$Internal$Helpers$punyDecode(value);
					default:
						break _v0$3;
				}
			} else {
				break _v0$3;
			}
		}
		return value;
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$MessageErr = F2(
	function (a, b) {
		return {$: 'MessageErr', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$FieldState$MessageOk = F2(
	function (a, b) {
		return {$: 'MessageOk', a: a, b: b};
	});
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$Basics$not = _Basics_not;
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $rakutentech$r10$R10$Form$Internal$Validation$isValid = function (outcome) {
	if (outcome.$ === 'MessageOk') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $rakutentech$r10$R10$Form$Internal$Key$fromList = function (list) {
	return $rakutentech$r10$R10$Form$Internal$Key$Key(
		A2(
			$elm$core$List$filter,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
			list));
};
var $rakutentech$r10$R10$Form$Internal$Key$replaceLeaf = F2(
	function (newLeaf, _v0) {
		var keyList = _v0.a;
		return $elm$core$List$isEmpty(keyList) ? $rakutentech$r10$R10$Form$Internal$Key$fromList(keyList) : $rakutentech$r10$R10$Form$Internal$Key$fromList(
			A2(
				$elm$core$List$cons,
				newLeaf,
				A2($elm$core$List$drop, 1, keyList)));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty = F3(
	function (value, showAlsoPassedValidation, validationOutcome) {
		return showAlsoPassedValidation ? $elm$core$Maybe$Just(validationOutcome) : ($elm$core$String$isEmpty(value) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(validationOutcome));
	});
var $rakutentech$r10$R10$ValidationDate$InvertedMinMax = {$: 'InvertedMinMax'};
var $rakutentech$r10$R10$ValidationDate$TooNew = {$: 'TooNew'};
var $rakutentech$r10$R10$ValidationDate$TooOld = {$: 'TooOld'};
var $rakutentech$r10$R10$ValidationDate$ParsingError = function (a) {
	return {$: 'ParsingError', a: a};
};
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $rakutentech$r10$R10$ValidationDate$Need8Digits = {$: 'Need8Digits'};
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $rakutentech$r10$R10$ValidationDate$prepareDate = function (value) {
	var newValue = function (v) {
		return ($elm$core$String$length(v) === 7) ? (A2($elm$core$String$left, 6, v) + ('0' + A2($elm$core$String$right, 1, v))) : v;
	}(
		A3(
			$rakutentech$r10$R10$Utils$userReplace,
			'[^\\d]',
			function (_v0) {
				return '';
			},
			value));
	if ($elm$core$String$length(newValue) !== 8) {
		return $elm$core$Result$Err($rakutentech$r10$R10$ValidationDate$Need8Digits);
	} else {
		var year = A3($elm$core$String$slice, 0, 4, newValue);
		var month = A3($elm$core$String$slice, 4, 6, newValue);
		var day = A3($elm$core$String$slice, 6, 8, newValue);
		return $elm$core$Result$Ok(year + ('-' + (month + ('-' + day))));
	}
};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$core$Basics$round = _Basics_round;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (_v0.$ === 'Just') {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (_v0.$ === 'Just') {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
										$elm$parser$Parser$succeed(0)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $rakutentech$r10$R10$ValidationDate$dateToMillis = function (date) {
	var _v0 = $rakutentech$r10$R10$ValidationDate$prepareDate(date);
	if (_v0.$ === 'Err') {
		var rangeResult = _v0.a;
		return $elm$core$Result$Err(rangeResult);
	} else {
		var preparedDate = _v0.a;
		var _v1 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(preparedDate);
		if (_v1.$ === 'Err') {
			var iso8601Error = _v1.a;
			return $elm$core$Result$Err(
				$rakutentech$r10$R10$ValidationDate$ParsingError(iso8601Error));
		} else {
			var posix = _v1.a;
			return $elm$core$Result$Ok(
				$elm$time$Time$posixToMillis(posix));
		}
	}
};
var $rakutentech$r10$R10$ValidationDate$range = F2(
	function (_v0, date) {
		var min = _v0.min;
		var max = _v0.max;
		var maybePosixDate = $rakutentech$r10$R10$ValidationDate$dateToMillis(date);
		if (maybePosixDate.$ === 'Err') {
			var err = maybePosixDate.a;
			return $elm$core$Result$Err(err);
		} else {
			var posixDate = maybePosixDate.a;
			return (_Utils_cmp(min, max) > 0) ? $elm$core$Result$Err($rakutentech$r10$R10$ValidationDate$InvertedMinMax) : ((_Utils_cmp(posixDate, min) < 0) ? $elm$core$Result$Err($rakutentech$r10$R10$ValidationDate$TooOld) : ((_Utils_cmp(posixDate, max) > 0) ? $elm$core$Result$Err($rakutentech$r10$R10$ValidationDate$TooNew) : $elm$core$Result$Ok(posixDate)));
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateDateRange = F2(
	function (range, value) {
		var v = A2($rakutentech$r10$R10$ValidationDate$range, range, value);
		if ($elm$core$String$isEmpty(value)) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (v.$ === 'Ok') {
				return $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil));
			} else {
				var err = v.a;
				var invalid = $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil));
				switch (err.$) {
					case 'TooOld':
						return invalid;
					case 'TooNew':
						return invalid;
					case 'MinRangeNotValid':
						return invalid;
					case 'MaxRangeNotValid':
						return invalid;
					case 'InvertedMinMax':
						return invalid;
					case 'Need8Digits':
						return invalid;
					default:
						return invalid;
				}
			}
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateEmpty = function (value) {
	return $elm$core$String$isEmpty(value) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, _List_Nil);
};
var $rakutentech$r10$R10$Form$Internal$Validation$validateEqual = F3(
	function (value, dependantKey, formState) {
		var dependantValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2($elm$core$Dict$get, dependantKey, formState.fieldsState)));
		return _Utils_eq(value, dependantValue) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, _List_Nil);
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateMaxLength = F2(
	function (value, length) {
		return (_Utils_cmp(
			$elm$core$String$length(value),
			length) > 0) ? A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageErr,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				])) : A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageOk,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateMinLength = F2(
	function (value, length) {
		return (_Utils_cmp(
			$elm$core$String$length(value),
			length) < 0) ? A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageErr,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				])) : A2(
			$rakutentech$r10$R10$Form$Internal$FieldState$MessageOk,
			$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid,
			_List_fromArray(
				[
					$elm$core$String$fromInt(length)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$NotValid = {$: 'NotValid'};
var $rakutentech$r10$R10$Form$Internal$Validation$Valid = {$: 'Valid'};
var $elm$regex$Regex$contains = _Regex_contains;
var $rakutentech$r10$R10$Form$Internal$Validation$runRegex = F2(
	function (pattern, value) {
		var regex = A2(
			$elm$core$Maybe$withDefault,
			$elm$regex$Regex$never,
			$elm$regex$Regex$fromString(pattern));
		return A2($elm$regex$Regex$contains, regex, value) ? $rakutentech$r10$R10$Form$Internal$Validation$Valid : $rakutentech$r10$R10$Form$Internal$Validation$NotValid;
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateRegex = F2(
	function (value, regex) {
		var _v0 = A2($rakutentech$r10$R10$Form$Internal$Validation$runRegex, regex, value);
		if (_v0.$ === 'Valid') {
			return A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil);
		} else {
			return A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, _List_Nil);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateRequired = function (value) {
	return $elm$core$String$isEmpty(value) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, _List_Nil);
};
var $rakutentech$r10$R10$Form$Internal$Validation$validateAllOf = F5(
	function (showAlsoPassedValidation, key, value, formState, validations) {
		var messages = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateAllOf', showAlsoPassedValidation, key, value, formState),
				validations));
		return $elm$core$List$isEmpty(messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil) : (A2($elm$core$List$all, $rakutentech$r10$R10$Form$Internal$Validation$isValid, messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, _List_Nil));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateDependant = F5(
	function (showAlsoPassedValidation, key, dependantKey, formState, validation) {
		var newLeafKey = A2($rakutentech$r10$R10$Form$Internal$Key$replaceLeaf, dependantKey, key);
		var newLeafContextValue = A2(
			$elm$core$Maybe$map,
			function (rec) {
				return _Utils_Tuple2(rec.value, newLeafKey);
			},
			A2(
				$elm$core$Dict$get,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newLeafKey),
				formState.fieldsState));
		var newFullKey = $rakutentech$r10$R10$Form$Internal$Key$fromString(dependantKey);
		var newFullContextValue = A2(
			$elm$core$Maybe$map,
			function (rec) {
				return _Utils_Tuple2(rec.value, newFullKey);
			},
			A2(
				$elm$core$Dict$get,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newFullKey),
				formState.fieldsState));
		var defaultContextValue = _Utils_Tuple2('', newFullKey);
		var result = A2(
			$elm$core$Maybe$withDefault,
			A2($elm$core$Maybe$withDefault, defaultContextValue, newFullContextValue),
			newLeafContextValue);
		return function (_v6) {
			var newContextValue = _v6.a;
			var newKey = _v6.b;
			return A6($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateDependant', showAlsoPassedValidation, newKey, newContextValue, formState, validation);
		}(result);
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateNot = F5(
	function (showAlsoPassedValidation, key, value, formState, validation) {
		var outcome = A6($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateNot', showAlsoPassedValidation, key, value, formState, validation);
		if (outcome.$ === 'Just') {
			if (outcome.a.$ === 'MessageOk') {
				var _v4 = outcome.a;
				var a = _v4.a;
				var b = _v4.b;
				return $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, a, b));
			} else {
				var _v5 = outcome.a;
				var a = _v5.a;
				var b = _v5.b;
				return $elm$core$Maybe$Just(
					A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, a, b));
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateOneOf = F5(
	function (showAlsoPassedValidation, key, value, formState, validations) {
		var messages = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateOneOf', showAlsoPassedValidation, key, value, formState),
				validations));
		return $elm$core$List$isEmpty(messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil) : (A2($elm$core$List$any, $rakutentech$r10$R10$Form$Internal$Validation$isValid, messages) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil) : A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, _List_Nil));
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs = F6(
	function (_v1, showAlsoPassedValidation, key, value_, formState, validation) {
		var value = ($rakutentech$r10$R10$Form$Internal$Key$toString(key) === 'email') ? $elm$core$String$trim(value_) : value_;
		switch (validation.$) {
			case 'WithMsg':
				var msg = validation.a;
				var validation_ = validation.b;
				return A6($rakutentech$r10$R10$Form$Internal$Validation$validateWithMsg, showAlsoPassedValidation, key, value, msg, formState, validation_);
			case 'Dependant':
				var dependantKey = validation.a;
				var validation_ = validation.b;
				return A5($rakutentech$r10$R10$Form$Internal$Validation$validateDependant, showAlsoPassedValidation, key, dependantKey, formState, validation_);
			case 'OneOf':
				var validations = validation.a;
				return $elm$core$Maybe$Just(
					A5($rakutentech$r10$R10$Form$Internal$Validation$validateOneOf, showAlsoPassedValidation, key, value, formState, validations));
			case 'AllOf':
				var validations = validation.a;
				return $elm$core$Maybe$Just(
					A5($rakutentech$r10$R10$Form$Internal$Validation$validateAllOf, showAlsoPassedValidation, key, value, formState, validations));
			case 'Required':
				return showAlsoPassedValidation ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Validation$validateRequired(value));
			case 'Empty':
				return $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Validation$validateEmpty(value));
			case 'Regex':
				var regex = validation.a;
				return A3(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					showAlsoPassedValidation,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateRegex, value, regex));
			case 'MinLength':
				var length = validation.a;
				return A3(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					showAlsoPassedValidation,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateMinLength, value, length));
			case 'MaxLength':
				var length = validation.a;
				return A3(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					showAlsoPassedValidation,
					A2($rakutentech$r10$R10$Form$Internal$Validation$validateMaxLength, value, length));
			case 'Equal':
				var dependantKey = validation.a;
				return A3(
					$rakutentech$r10$R10$Form$Internal$Validation$skipValidationIfEmpty,
					value,
					showAlsoPassedValidation,
					A3($rakutentech$r10$R10$Form$Internal$Validation$validateEqual, value, dependantKey, formState));
			case 'Not':
				var validation_ = validation.a;
				return A5($rakutentech$r10$R10$Form$Internal$Validation$validateNot, showAlsoPassedValidation, key, value, formState, validation_);
			case 'NoValidation':
				return $elm$core$Maybe$Nothing;
			default:
				var range = validation.a;
				return A2($rakutentech$r10$R10$Form$Internal$Validation$validateDateRange, range, value);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validateWithMsg = F6(
	function (showAlsoPassedValidation, key, value, msg, formState, validation) {
		var maybeMessage = A6($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validateWithMsg', showAlsoPassedValidation, key, value, formState, validation);
		if (maybeMessage.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var message = maybeMessage.a;
			return $rakutentech$r10$R10$Form$Internal$Validation$isValid(message) ? $elm$core$Maybe$Just(
				A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, msg.ok, _List_Nil)) : $elm$core$Maybe$Just(
				A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, msg.err, _List_Nil));
		}
	});
var $rakutentech$r10$R10$Form$Internal$Validation$validate = F2(
	function (args, fieldState) {
		var newValue = A2(
			args.formStateBeforeValidationFixer,
			$rakutentech$r10$R10$Form$Internal$Key$headId(args.key),
			A2(
				$rakutentech$r10$R10$Form$Internal$Validation$cleanPhoneNumber,
				args.fieldType,
				A2($rakutentech$r10$R10$Form$Internal$Validation$punydecodeIfEmail, args.fieldType, fieldState.value)));
		var newFormState = args.formState;
		var skipValidateForUsername = _Utils_eq(
			$rakutentech$r10$R10$Form$Internal$Key$toString(args.key),
			$rakutentech$r10$R10$Form$Internal$Shared$defaultUsernameFieldKeyString) && A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (fs) {
					return $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(fs.value);
				},
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey, newFormState.fieldsState)));
		var isJapanTelCode = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (country) {
					return _Utils_eq(country, $rakutentech$r10$R10$Country$Japan);
				},
				A2(
					$elm$core$Maybe$andThen,
					$rakutentech$r10$R10$Country$fromCountryTelCode,
					A2(
						$elm$core$Maybe$map,
						$rakutentech$r10$R10$Country$toCountryTelCode,
						$rakutentech$r10$R10$Country$fromTelephoneAsString(newValue)))));
		var isDisabled = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.disabled;
				},
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, newFormState.fieldsState)));
		var validationSpec = (isDisabled || skipValidateForUsername) ? _List_fromArray(
			[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]) : A2(
			$elm$core$Maybe$withDefault,
			_List_fromArray(
				[$rakutentech$r10$R10$Form$Internal$FieldConf$NoValidation]),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validation;
				},
				args.maybeValidationSpec));
		var changeValidationSpecIfJapanPohone = function () {
			var _v0 = _Utils_Tuple2(args.fieldType, isJapanTelCode);
			if ((_v0.a.$ === 'TypeSpecial') && _v0.b) {
				var specialPhone = _v0.a.a.a;
				return specialPhone.isJapanService ? $elm$core$List$map(
					function (vi) {
						if (vi.$ === 'MinLength') {
							return $rakutentech$r10$R10$Form$Internal$FieldConf$MinLength(13);
						} else {
							return vi;
						}
					}) : $elm$core$Basics$identity;
			} else {
				return $elm$core$Basics$identity;
			}
		}();
		return _Utils_update(
			fieldState,
			{
				validation: $rakutentech$r10$R10$Form$Internal$FieldState$Validated(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						A2(
							$elm$core$List$map,
							A5($rakutentech$r10$R10$Form$Internal$Validation$validateValidationSpecs, 'validate', args.showAlsoPassedValidation, args.key, newValue, newFormState),
							changeValidationSpecIfJapanPohone(validationSpec))))
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$runOnlyExistingValidations = F4(
	function (formStateBeforeValidationFixer, allKeys, formState, fieldsState) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var key = _v0.a;
					var fieldType = _v0.b;
					var maybeValidationSpec = _v0.c;
					return A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						function (maybeFieldState) {
							if (maybeFieldState.$ === 'Nothing') {
								return maybeFieldState;
							} else {
								var fieldState = maybeFieldState.a;
								return $elm$core$Maybe$Just(
									A2(
										$rakutentech$r10$R10$Form$Internal$Validation$validate,
										{
											fieldType: fieldType,
											formState: formState,
											formStateBeforeValidationFixer: formStateBeforeValidationFixer,
											key: key,
											maybeValidationSpec: maybeValidationSpec,
											showAlsoPassedValidation: $rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(maybeValidationSpec)
										},
										fieldState));
							}
						},
						acc);
				}),
			fieldsState,
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperResetUsernameValidation = F5(
	function (key, value, formConf, formStateBeforeValidationFixer, formState) {
		var usernameKeyString = $rakutentech$r10$R10$Form$Internal$Shared$defaultUsernameFieldKeyString;
		var usernameFieldConf = A2(
			$elm$core$Maybe$withDefault,
			function (conf) {
				return _Utils_update(
					conf,
					{id: usernameKeyString});
			}($rakutentech$r10$R10$Form$Internal$FieldConf$init),
			A2($rakutentech$r10$R10$Form$Internal$Conf$getFieldConfByFieldId, usernameKeyString, formConf));
		var needCopyIntoUsername = (_Utils_eq(key, $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey) && $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(value)) || A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				$rakutentech$r10$R10$Form$Internal$Helpers$stringToBool,
				A2(
					$rakutentech$r10$R10$Form$Internal$Helpers$getFieldValue,
					$rakutentech$r10$R10$Form$Internal$Key$toString($rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey),
					formState)));
		return needCopyIntoUsername ? A2($rakutentech$r10$R10$Form$Internal$Helpers$clearFieldValidation, usernameKeyString, formState) : _Utils_update(
			formState,
			{
				fieldsState: A4(
					$rakutentech$r10$R10$Form$Internal$Update$runOnlyExistingValidations,
					formStateBeforeValidationFixer,
					_List_fromArray(
						[
							_Utils_Tuple3(
							$rakutentech$r10$R10$Form$Internal$Key$fromString(usernameKeyString),
							usernameFieldConf.type_,
							usernameFieldConf.validationSpecs)
						]),
					formState,
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateDirty = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{dirty: true}));
};
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateValue = F3(
	function (fieldConf, value, maybeFieldState) {
		var maxLength = A2(
			$elm$core$Maybe$andThen,
			$elm$core$List$head,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$filterMap(
					function (validation) {
						if (validation.$ === 'MaxLength') {
							var val = validation.a;
							return $elm$core$Maybe$Just(val);
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}),
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.validation;
					},
					fieldConf.validationSpecs)));
		var newValue = function () {
			var _v0 = _Utils_Tuple2(fieldConf.allowOverMaxLength, maxLength);
			if ((!_v0.a) && (_v0.b.$ === 'Just')) {
				var maxLength_ = _v0.b.a;
				return A2($elm$core$String$left, maxLength_, value);
			} else {
				return value;
			}
		}();
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{value: newValue}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState = F2(
	function (args, maybeFieldState) {
		return $elm$core$Maybe$Just(
			A2(
				$rakutentech$r10$R10$Form$Internal$Validation$validate,
				args,
				A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$FieldState$init, maybeFieldState)));
	});
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt = function (_v0) {
	var _int = _v0.a;
	return _int;
};
var $rakutentech$r10$R10$Form$Internal$Update$shouldValidationBeVisible = F3(
	function (fieldType, qtySubmitAttempted, fieldState) {
		var isTypeBinary = function () {
			if (fieldType.$ === 'TypeBinary') {
				return true;
			} else {
				return false;
			}
		}();
		var hasError = function () {
			var _v0 = fieldState.validation;
			if (_v0.$ === 'Validated') {
				var validationList = _v0.a;
				return A2(
					$elm$core$List$any,
					function (validation) {
						if (validation.$ === 'MessageErr') {
							return true;
						} else {
							return false;
						}
					},
					validationList);
			} else {
				return false;
			}
		}();
		return fieldState.lostFocusOneOrMoreTime || (($rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt(qtySubmitAttempted) > 0) || (isTypeBinary || ((!fieldState.lostFocusOneOrMoreTime) && hasError)));
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperValidateOnChangeValue = F2(
	function (args, maybeFieldState) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
		return A3($rakutentech$r10$R10$Form$Internal$Update$shouldValidationBeVisible, args.fieldType, args.qtySubmitAttempted, fieldState) ? A2(
			$rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState,
			{fieldType: args.fieldType, formState: args.formState, formStateBeforeValidationFixer: args.formStateBeforeValidationFixer, key: args.key, maybeValidationSpec: args.maybeValidationSpec, showAlsoPassedValidation: args.showAlsoPassedValidation},
			maybeFieldState) : maybeFieldState;
	});
var $rakutentech$r10$R10$Form$Internal$Update$onChangeValue = F7(
	function (formStateBeforeValidationFixer, showAlsoPassedValidation, key, fieldConf, formConf, string, formState) {
		return A5(
			$rakutentech$r10$R10$Form$Internal$Update$helperResetUsernameValidation,
			key,
			string,
			formConf,
			formStateBeforeValidationFixer,
			_Utils_update(
				formState,
				{
					fieldsState: A3(
						$rakutentech$r10$R10$Form$Internal$Update$helperCopyEmailIntoUsername,
						key,
						string,
						A3(
							$rakutentech$r10$R10$Form$Internal$Dict$update,
							key,
							$rakutentech$r10$R10$Form$Internal$Update$helperValidateOnChangeValue(
								{fieldType: fieldConf.type_, formState: formState, formStateBeforeValidationFixer: formStateBeforeValidationFixer, key: key, maybeValidationSpec: fieldConf.validationSpecs, qtySubmitAttempted: formState.qtySubmitAttempted, showAlsoPassedValidation: showAlsoPassedValidation}),
							A3(
								$rakutentech$r10$R10$Form$Internal$Dict$update,
								key,
								$rakutentech$r10$R10$Form$Internal$Update$helperUpdateDirty,
								A3(
									$rakutentech$r10$R10$Form$Internal$Dict$update,
									key,
									A2($rakutentech$r10$R10$Form$Internal$Update$helperUpdateValue, fieldConf, string),
									formState.fieldsState)))),
					focused: $elm$core$Maybe$Just(
						$rakutentech$r10$R10$Form$Internal$Key$toString(key)),
					lastKeyDownIsProcess: false
				}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onDeactivate = function (formState) {
	return _Utils_update(
		formState,
		{active: $elm$core$Maybe$Nothing});
};
var $rakutentech$r10$R10$Form$Internal$Update$onGetFocus = F4(
	function (formStateBeforeValidationFixer, key, fieldConf, formState) {
		var lostFocusOneOrMoreTime = A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.lostFocusOneOrMoreTime;
				},
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState)));
		return _Utils_update(
			formState,
			{
				fieldsState: function (fieldState) {
					return ($rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(fieldConf.validationSpecs) && (!lostFocusOneOrMoreTime)) ? A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						$rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState(
							{
								fieldType: fieldConf.type_,
								formState: formState,
								formStateBeforeValidationFixer: formStateBeforeValidationFixer,
								key: key,
								maybeValidationSpec: fieldConf.validationSpecs,
								showAlsoPassedValidation: $rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(fieldConf.validationSpecs)
							}),
						fieldState) : fieldState;
				}(
					A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						$elm$core$Maybe$map(
							function (v) {
								return _Utils_update(
									v,
									{valueWhenFocused: v.value});
							}),
						formState.fieldsState)),
				focused: $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$Key$toString(key))
			});
	});
var $rakutentech$r10$R10$KatakanaConverter$ConvertHalfKatakanaAndHiragana = {$: 'ConvertHalfKatakanaAndHiragana'};
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaToKatakanaConversionTable = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'ｧ',
			_Utils_chr('ァ')),
			_Utils_Tuple2(
			'ｱ',
			_Utils_chr('ア')),
			_Utils_Tuple2(
			'ｨ',
			_Utils_chr('ィ')),
			_Utils_Tuple2(
			'ｲ',
			_Utils_chr('イ')),
			_Utils_Tuple2(
			'ｩ',
			_Utils_chr('ゥ')),
			_Utils_Tuple2(
			'ｳ',
			_Utils_chr('ウ')),
			_Utils_Tuple2(
			'ｪ',
			_Utils_chr('ェ')),
			_Utils_Tuple2(
			'ｴ',
			_Utils_chr('エ')),
			_Utils_Tuple2(
			'ｫ',
			_Utils_chr('ォ')),
			_Utils_Tuple2(
			'ｵ',
			_Utils_chr('オ')),
			_Utils_Tuple2(
			'ｶ',
			_Utils_chr('カ')),
			_Utils_Tuple2(
			'ｶﾞ',
			_Utils_chr('ガ')),
			_Utils_Tuple2(
			'ｷ',
			_Utils_chr('キ')),
			_Utils_Tuple2(
			'ｷﾞ',
			_Utils_chr('ギ')),
			_Utils_Tuple2(
			'ｸ',
			_Utils_chr('ク')),
			_Utils_Tuple2(
			'ｸﾞ',
			_Utils_chr('グ')),
			_Utils_Tuple2(
			'ｹ',
			_Utils_chr('ケ')),
			_Utils_Tuple2(
			'ｹﾞ',
			_Utils_chr('ゲ')),
			_Utils_Tuple2(
			'ｺ',
			_Utils_chr('コ')),
			_Utils_Tuple2(
			'ｺﾞ',
			_Utils_chr('ゴ')),
			_Utils_Tuple2(
			'ｻ',
			_Utils_chr('サ')),
			_Utils_Tuple2(
			'ｻﾞ',
			_Utils_chr('ザ')),
			_Utils_Tuple2(
			'ｼ',
			_Utils_chr('シ')),
			_Utils_Tuple2(
			'ｼﾞ',
			_Utils_chr('ジ')),
			_Utils_Tuple2(
			'ｽ',
			_Utils_chr('ス')),
			_Utils_Tuple2(
			'ｽﾞ',
			_Utils_chr('ズ')),
			_Utils_Tuple2(
			'ｾ',
			_Utils_chr('セ')),
			_Utils_Tuple2(
			'ｾﾞ',
			_Utils_chr('ゼ')),
			_Utils_Tuple2(
			'ｿ',
			_Utils_chr('ソ')),
			_Utils_Tuple2(
			'ｿﾞ',
			_Utils_chr('ゾ')),
			_Utils_Tuple2(
			'ﾀ',
			_Utils_chr('タ')),
			_Utils_Tuple2(
			'ﾀﾞ',
			_Utils_chr('ダ')),
			_Utils_Tuple2(
			'ﾁ',
			_Utils_chr('チ')),
			_Utils_Tuple2(
			'ﾁﾞ',
			_Utils_chr('ヂ')),
			_Utils_Tuple2(
			'ｯ',
			_Utils_chr('ッ')),
			_Utils_Tuple2(
			'ﾂ',
			_Utils_chr('ツ')),
			_Utils_Tuple2(
			'ﾂﾞ',
			_Utils_chr('ヅ')),
			_Utils_Tuple2(
			'ﾃ',
			_Utils_chr('テ')),
			_Utils_Tuple2(
			'ﾃﾞ',
			_Utils_chr('デ')),
			_Utils_Tuple2(
			'ﾄ',
			_Utils_chr('ト')),
			_Utils_Tuple2(
			'ﾄﾞ',
			_Utils_chr('ド')),
			_Utils_Tuple2(
			'ﾅ',
			_Utils_chr('ナ')),
			_Utils_Tuple2(
			'ﾆ',
			_Utils_chr('ニ')),
			_Utils_Tuple2(
			'ﾇ',
			_Utils_chr('ヌ')),
			_Utils_Tuple2(
			'ﾈ',
			_Utils_chr('ネ')),
			_Utils_Tuple2(
			'ﾉ',
			_Utils_chr('ノ')),
			_Utils_Tuple2(
			'ﾊ',
			_Utils_chr('ハ')),
			_Utils_Tuple2(
			'ﾊﾞ',
			_Utils_chr('バ')),
			_Utils_Tuple2(
			'ﾊﾟ',
			_Utils_chr('パ')),
			_Utils_Tuple2(
			'ﾋ',
			_Utils_chr('ヒ')),
			_Utils_Tuple2(
			'ﾋﾞ',
			_Utils_chr('ビ')),
			_Utils_Tuple2(
			'ﾋﾟ',
			_Utils_chr('ピ')),
			_Utils_Tuple2(
			'ﾌ',
			_Utils_chr('フ')),
			_Utils_Tuple2(
			'ﾌﾞ',
			_Utils_chr('ブ')),
			_Utils_Tuple2(
			'ﾌﾟ',
			_Utils_chr('プ')),
			_Utils_Tuple2(
			'ﾍ',
			_Utils_chr('ヘ')),
			_Utils_Tuple2(
			'ﾍﾞ',
			_Utils_chr('ベ')),
			_Utils_Tuple2(
			'ﾍﾟ',
			_Utils_chr('ペ')),
			_Utils_Tuple2(
			'ﾎ',
			_Utils_chr('ホ')),
			_Utils_Tuple2(
			'ﾎﾞ',
			_Utils_chr('ボ')),
			_Utils_Tuple2(
			'ﾎﾟ',
			_Utils_chr('ポ')),
			_Utils_Tuple2(
			'ﾏ',
			_Utils_chr('マ')),
			_Utils_Tuple2(
			'ﾐ',
			_Utils_chr('ミ')),
			_Utils_Tuple2(
			'ﾑ',
			_Utils_chr('ム')),
			_Utils_Tuple2(
			'ﾒ',
			_Utils_chr('メ')),
			_Utils_Tuple2(
			'ﾓ',
			_Utils_chr('モ')),
			_Utils_Tuple2(
			'ｬ',
			_Utils_chr('ャ')),
			_Utils_Tuple2(
			'ﾔ',
			_Utils_chr('ヤ')),
			_Utils_Tuple2(
			'ｭ',
			_Utils_chr('ュ')),
			_Utils_Tuple2(
			'ﾕ',
			_Utils_chr('ユ')),
			_Utils_Tuple2(
			'ｮ',
			_Utils_chr('ョ')),
			_Utils_Tuple2(
			'ﾖ',
			_Utils_chr('ヨ')),
			_Utils_Tuple2(
			'ﾗ',
			_Utils_chr('ラ')),
			_Utils_Tuple2(
			'ﾘ',
			_Utils_chr('リ')),
			_Utils_Tuple2(
			'ﾙ',
			_Utils_chr('ル')),
			_Utils_Tuple2(
			'ﾚ',
			_Utils_chr('レ')),
			_Utils_Tuple2(
			'ﾛ',
			_Utils_chr('ロ')),
			_Utils_Tuple2(
			'ﾜ',
			_Utils_chr('ワ')),
			_Utils_Tuple2(
			'ｦ',
			_Utils_chr('ヲ')),
			_Utils_Tuple2(
			'ﾝ',
			_Utils_chr('ン')),
			_Utils_Tuple2(
			'ｳﾞ',
			_Utils_chr('ヴ')),
			_Utils_Tuple2(
			'ﾜﾞ',
			_Utils_chr('ヷ')),
			_Utils_Tuple2(
			'ｦﾞ',
			_Utils_chr('ヺ')),
			_Utils_Tuple2(
			'･',
			_Utils_chr('・')),
			_Utils_Tuple2(
			'ｰ',
			_Utils_chr('ー')),
			_Utils_Tuple2(
			'｡',
			_Utils_chr('。')),
			_Utils_Tuple2(
			'｢',
			_Utils_chr('「')),
			_Utils_Tuple2(
			'｣',
			_Utils_chr('」')),
			_Utils_Tuple2(
			'､',
			_Utils_chr('、'))
		]));
var $rakutentech$r10$R10$KatakanaConverter$helper = F5(
	function (conversionMode, _char, maybeLookahead, remaining, partialResult) {
		var returnResult = F2(
			function (maybeLookahead_, convertedChar) {
				if (maybeLookahead_.$ === 'Just') {
					var lookahead = maybeLookahead_.a;
					return _Utils_Tuple2(
						A2($elm$core$List$cons, lookahead, remaining),
						A2($elm$core$List$cons, convertedChar, partialResult));
				} else {
					return _Utils_Tuple2(
						remaining,
						A2($elm$core$List$cons, convertedChar, partialResult));
				}
			});
		var replaceSingleHalfWidthKatakana = function (listCharToLookup) {
			var _v2 = A2(
				$elm$core$Dict$get,
				$elm$core$String$fromList(listCharToLookup),
				$rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaToKatakanaConversionTable);
			if (_v2.$ === 'Just') {
				var v = _v2.a;
				return A2(returnResult, maybeLookahead, v);
			} else {
				return A2(returnResult, maybeLookahead, _char);
			}
		};
		var code = $elm$core$Char$toCode(_char);
		if (_Utils_eq(conversionMode, $rakutentech$r10$R10$KatakanaConverter$ConvertHalfKatakanaAndHiragana) && ((code >= 12353) && (code <= 12438))) {
			return A2(
				returnResult,
				maybeLookahead,
				$elm$core$Char$fromCode(code + 96));
		} else {
			if ((code >= 65377) && (code <= 65439)) {
				if (maybeLookahead.$ === 'Just') {
					var lookahead = maybeLookahead.a;
					var _v1 = A2(
						$elm$core$Dict$get,
						$elm$core$String$fromList(
							_List_fromArray(
								[_char, lookahead])),
						$rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaToKatakanaConversionTable);
					if (_v1.$ === 'Just') {
						var v = _v1.a;
						return A2(returnResult, $elm$core$Maybe$Nothing, v);
					} else {
						return replaceSingleHalfWidthKatakana(
							_List_fromArray(
								[_char]));
					}
				} else {
					return replaceSingleHalfWidthKatakana(
						_List_fromArray(
							[_char]));
				}
			} else {
				return A2(returnResult, maybeLookahead, _char);
			}
		}
	});
var $rakutentech$r10$R10$KatakanaConverter$convert = F2(
	function (conversionMode, _v0) {
		var remaining = _v0.a;
		var partialResult = _v0.b;
		if (!remaining.b) {
			return _Utils_Tuple2(_List_Nil, partialResult);
		} else {
			if (remaining.b.b) {
				var a = remaining.a;
				var _v2 = remaining.b;
				var lookahead = _v2.a;
				var xs = _v2.b;
				return A2(
					$rakutentech$r10$R10$KatakanaConverter$convert,
					conversionMode,
					A5(
						$rakutentech$r10$R10$KatakanaConverter$helper,
						conversionMode,
						a,
						$elm$core$Maybe$Just(lookahead),
						xs,
						partialResult));
			} else {
				var a = remaining.a;
				var xs = remaining.b;
				return A2(
					$rakutentech$r10$R10$KatakanaConverter$convert,
					conversionMode,
					A5($rakutentech$r10$R10$KatakanaConverter$helper, conversionMode, a, $elm$core$Maybe$Nothing, xs, partialResult));
			}
		}
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaAndHiraganaToFullWidthKatakana = function (string) {
	return $elm$core$String$fromList(
		$elm$core$List$reverse(
			A2(
				$rakutentech$r10$R10$KatakanaConverter$convert,
				$rakutentech$r10$R10$KatakanaConverter$ConvertHalfKatakanaAndHiragana,
				_Utils_Tuple2(
					$elm$core$String$toList(string),
					_List_Nil)).b));
};
var $rakutentech$r10$R10$KatakanaConverter$ConvertHalfKatakana = {$: 'ConvertHalfKatakana'};
var $rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaToFullWidthKatakana = function (string) {
	return $elm$core$String$fromList(
		$elm$core$List$reverse(
			A2(
				$rakutentech$r10$R10$KatakanaConverter$convert,
				$rakutentech$r10$R10$KatakanaConverter$ConvertHalfKatakana,
				_Utils_Tuple2(
					$elm$core$String$toList(string),
					_List_Nil)).b));
};
var $rakutentech$r10$R10$Form$Internal$Update$convertToFullwidthKatakanaIfNecessary = F2(
	function (key, fieldsState) {
		var headId = $rakutentech$r10$R10$Form$Internal$Key$headId(key);
		var maybeNewKanaValue = A2($elm$core$String$contains, 'kana', headId) ? A2(
			$elm$core$Maybe$map,
			$rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaAndHiraganaToFullWidthKatakana,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2(
					$elm$core$Dict$get,
					$rakutentech$r10$R10$Form$Internal$Key$toString(key),
					fieldsState))) : ((A2($elm$core$String$contains, 'nickname', headId) || (A2($elm$core$String$contains, 'last_name', headId) || A2($elm$core$String$contains, 'first_name', headId))) ? A2(
			$elm$core$Maybe$map,
			$rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaToFullWidthKatakana,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2(
					$elm$core$Dict$get,
					$rakutentech$r10$R10$Form$Internal$Key$toString(key),
					fieldsState))) : $elm$core$Maybe$Nothing);
		if (maybeNewKanaValue.$ === 'Nothing') {
			return fieldsState;
		} else {
			var newKanaValue = maybeNewKanaValue.a;
			return A3(
				$elm$core$Dict$update,
				$rakutentech$r10$R10$Form$Internal$Key$toString(key),
				function (mv) {
					return A2(
						$elm$core$Maybe$andThen,
						function (v) {
							return $elm$core$Maybe$Just(
								_Utils_update(
									v,
									{value: newKanaValue}));
						},
						mv);
				},
				fieldsState);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperLostFocus = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$String$isEmpty(fieldState.value) ? $elm$core$Maybe$Just(fieldState) : $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{lostFocusOneOrMoreTime: true}));
};
var $elm_community$string_extra$String$Extra$isBlank = function (string) {
	return A2(
		$elm$regex$Regex$contains,
		$elm_community$string_extra$String$Extra$regexFromString('^\\s*$'),
		string);
};
var $rakutentech$r10$R10$Form$Internal$Update$validateIfLostFocusAtLeastOnce = F2(
	function (args, maybeFieldState) {
		if (maybeFieldState.$ === 'Just') {
			var fieldState = maybeFieldState.a;
			return fieldState.lostFocusOneOrMoreTime ? A2($rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState, args, maybeFieldState) : maybeFieldState;
		} else {
			return maybeFieldState;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$onLoseFocus = F4(
	function (formStateBeforeValidationFixer, key, fieldConf, formState) {
		var valueIsTheSameAsWhenFocusedIn = A2(
			$elm$core$Maybe$withDefault,
			true,
			A2(
				$elm$core$Maybe$map,
				function (fieldState) {
					return ($elm_community$string_extra$String$Extra$isBlank(fieldState.valueWhenFocused) && $elm_community$string_extra$String$Extra$isBlank(fieldState.value)) || _Utils_eq(fieldState.valueWhenFocused, fieldState.value);
				},
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState)));
		return _Utils_update(
			formState,
			{
				fieldsState: valueIsTheSameAsWhenFocusedIn ? formState.fieldsState : A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$validateIfLostFocusAtLeastOnce(
						{
							fieldType: fieldConf.type_,
							formState: formState,
							formStateBeforeValidationFixer: formStateBeforeValidationFixer,
							key: key,
							maybeValidationSpec: fieldConf.validationSpecs,
							showAlsoPassedValidation: $rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(fieldConf.validationSpecs)
						}),
					A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						$rakutentech$r10$R10$Form$Internal$Update$helperLostFocus,
						A2($rakutentech$r10$R10$Form$Internal$Update$convertToFullwidthKatakanaIfNecessary, key, formState.fieldsState))),
				focused: $elm$core$Maybe$Nothing
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperUpdateScroll = F2(
	function (value, maybeScroll) {
		var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeScroll);
		return $elm$core$Maybe$Just(
			_Utils_update(
				fieldState,
				{scroll: value}));
	});
var $rakutentech$r10$R10$Form$Internal$Update$onScroll = F3(
	function (key, scroll, formState) {
		return _Utils_update(
			formState,
			{
				fieldsState: A3(
					$rakutentech$r10$R10$Form$Internal$Dict$update,
					key,
					$rakutentech$r10$R10$Form$Internal$Update$helperUpdateScroll(scroll),
					formState.fieldsState)
			});
	});
var $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState = function (args) {
	return ((!_Utils_eq(args.singleModel.over, args.newSingleModel.over)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onChangeOver, args.key, args.newSingleModel.over) : $elm$core$Basics$identity)(
		((!_Utils_eq(args.singleModel.opened, args.newSingleModel.opened)) ? (args.newSingleModel.opened ? $rakutentech$r10$R10$Form$Internal$Update$onActivate(args.key) : $rakutentech$r10$R10$Form$Internal$Update$onDeactivate) : $elm$core$Basics$identity)(
			((!_Utils_eq(args.singleModel.focused, args.newSingleModel.focused)) ? (args.newSingleModel.focused ? A3($rakutentech$r10$R10$Form$Internal$Update$onGetFocus, args.formStateBeforeValidationFixer, args.key, args.fieldConf) : A3($rakutentech$r10$R10$Form$Internal$Update$onLoseFocus, args.formStateBeforeValidationFixer, args.key, args.fieldConf)) : $elm$core$Basics$identity)(
				((!_Utils_eq(args.fieldState.scroll, args.newSingleModel.scroll)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onScroll, args.key, args.newSingleModel.scroll) : $elm$core$Basics$identity)(
					((!_Utils_eq(args.fieldState.select, args.newSingleModel.select)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onChangeSelect, args.key, args.newSingleModel.select) : $elm$core$Basics$identity)(
						((!_Utils_eq(args.fieldState.search, args.newSingleModel.search)) ? A2($rakutentech$r10$R10$Form$Internal$Update$onChangeSearch, args.key, args.newSingleModel.search) : $elm$core$Basics$identity)(
							((!_Utils_eq(args.fieldState.value, args.newSingleModel.value)) ? A6(
								$rakutentech$r10$R10$Form$Internal$Update$onChangeValue,
								args.formStateBeforeValidationFixer,
								$rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(args.fieldConf.validationSpecs),
								args.key,
								args.fieldConf,
								args.formConf,
								args.newSingleModel.value) : $elm$core$Basics$identity)(args.formState)))))));
};
var $rakutentech$r10$R10$Form$Internal$Msg$isChangingValues = function (msg) {
	switch (msg.$) {
		case 'ChangeValue':
			return true;
		case 'AddEntity':
			return true;
		case 'RemoveEntity':
			return true;
		default:
			return false;
	}
};
var $rakutentech$r10$R10$Form$Internal$Msg$handleChangesSinceLastSubmissions = F2(
	function (changesSinceLastSubmissions, msg) {
		if (msg.$ === 'Submit') {
			return false;
		} else {
			return $rakutentech$r10$R10$Form$Internal$Msg$isChangingValues(msg) ? true : changesSinceLastSubmissions;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$helperToggleShowPassword = function (maybeFieldState) {
	var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(maybeFieldState);
	return $elm$core$Maybe$Just(
		_Utils_update(
			fieldState,
			{showPassword: !fieldState.showPassword}));
};
var $rakutentech$r10$R10$Form$Internal$Dict$insert = function (key) {
	return $elm$core$Dict$insert(
		$rakutentech$r10$R10$Form$Internal$Key$toString(key));
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $rakutentech$r10$R10$Device$Chrome = {$: 'Chrome'};
var $rakutentech$r10$R10$Device$isMobileOS = function (_v0) {
	var os = _v0.os;
	switch (os.$) {
		case 'Android':
			return true;
		case 'IOS':
			return true;
		case 'MacOS':
			return false;
		case 'WindowsPhone':
			return true;
		default:
			return false;
	}
};
var $rakutentech$r10$R10$Device$isChromeDesktop = function (device) {
	return (!$rakutentech$r10$R10$Device$isMobileOS(device)) && _Utils_eq(device.browser, $rakutentech$r10$R10$Device$Chrome);
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$increment = function (qtySubmitAttempted) {
	return $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$fromInt(
		$rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt(qtySubmitAttempted) + 1);
};
var $rakutentech$r10$R10$Form$Internal$Key$empty = $rakutentech$r10$R10$Form$Internal$Key$fromList(_List_Nil);
var $rakutentech$r10$R10$Form$Internal$Key$composeKey = F2(
	function (_v0, extraKey) {
		var keys = _v0.a;
		return $elm$core$String$isEmpty(extraKey) ? $rakutentech$r10$R10$Form$Internal$Key$Key(keys) : $rakutentech$r10$R10$Form$Internal$Key$Key(
			A2($elm$core$List$cons, extraKey, keys));
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker = F2(
	function (key, form) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (entity) {
					switch (entity.$) {
						case 'EntityWrappable':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityWithBorder':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityNormal':
							var id = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{conf: entities, state: form.state});
						case 'EntityWithTabs':
							var id = entity.a;
							var titleEntityList = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, id),
								{
									conf: A2($elm$core$List$map, $elm$core$Tuple$second, titleEntityList),
									state: form.state
								});
						case 'EntityMulti':
							var entityId = entity.a;
							var entities = entity.b;
							return A2(
								$rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$viewEntityMulti,
								A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
								{conf: entities, state: form.state});
						case 'EntityField':
							var fieldConf = entity.a;
							return _List_fromArray(
								[
									_Utils_Tuple3(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, fieldConf.id),
									fieldConf.type_,
									fieldConf.validationSpecs)
								]);
						case 'EntityTitle':
							var entityId = entity.a;
							var textConf = entity.b;
							return _List_fromArray(
								[
									_Utils_Tuple3(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
									$rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
									textConf.validationSpecs)
								]);
						default:
							var entityId = entity.a;
							var textConf = entity.b;
							return _List_fromArray(
								[
									_Utils_Tuple3(
									A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, key, entityId),
									$rakutentech$r10$R10$FormTypes$TypeText($rakutentech$r10$R10$FormTypes$TextPlain),
									textConf.validationSpecs)
								]);
					}
				},
				form.conf));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$viewEntityMulti = F2(
	function (key, form) {
		var quantity = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, form.state.multiplicableQuantities));
		return $elm$core$List$concat(
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, _v0) {
						var newKey = A2(
							$rakutentech$r10$R10$Form$Internal$Key$composeKey,
							key,
							$elm$core$String$fromInt(index));
						var removed = A2(
							$elm$core$Set$member,
							$rakutentech$r10$R10$Form$Internal$Key$toString(newKey),
							form.state.removed);
						return removed ? _List_Nil : A2($rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker, newKey, form);
					}),
				A2($elm$core$List$repeat, quantity, _Utils_Tuple0)));
	});
var $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker = function (form) {
	return A2($rakutentech$r10$R10$Form$Internal$MakerForValidationKeys$maker, $rakutentech$r10$R10$Form$Internal$Key$empty, form);
};
var $rakutentech$r10$R10$Form$Internal$FieldState$isValid = function (listValidationMessage) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (validationMessage, acc) {
				if (validationMessage.$ === 'MessageErr') {
					return false;
				} else {
					return acc;
				}
			}),
		true,
		listValidationMessage);
};
var $rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrors = F2(
	function (allKeys, fieldsState) {
		return A2(
			$elm$core$List$filter,
			function (_v0) {
				var key = _v0.a;
				var fieldState = A2(
					$elm$core$Maybe$withDefault,
					$rakutentech$r10$R10$Form$Internal$FieldState$init,
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, fieldsState));
				var _v1 = fieldState.validation;
				if (_v1.$ === 'NotYetValidated') {
					return true;
				} else {
					var listValidationMessage = _v1.a;
					return !$rakutentech$r10$R10$Form$Internal$FieldState$isValid(listValidationMessage);
				}
			},
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$isEntireFormValid = function (form) {
	var allKeys = $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker(form);
	var fieldsWithErrors_ = A2($rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrors, allKeys, form.state.fieldsState);
	return _Utils_eq(
		$elm$core$List$head(fieldsWithErrors_),
		$elm$core$Maybe$Nothing);
};
var $rakutentech$r10$R10$Form$Internal$Update$isFormSubmittable = function (form) {
	return (!$rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$toInt(form.state.qtySubmitAttempted)) ? true : $rakutentech$r10$R10$Form$Internal$Update$isEntireFormValid(form);
};
var $rakutentech$r10$R10$Form$Internal$Update$runAllValidations = F4(
	function (formStateBeforeValidationFixer, allKeys, formState, fieldsState) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, acc) {
					var key = _v0.a;
					var fieldType = _v0.b;
					var maybeValidationSpec = _v0.c;
					return A3(
						$rakutentech$r10$R10$Form$Internal$Dict$update,
						key,
						$rakutentech$r10$R10$Form$Internal$Update$helperValidateCreatingFieldsState(
							{
								fieldType: fieldType,
								formState: formState,
								formStateBeforeValidationFixer: formStateBeforeValidationFixer,
								key: key,
								maybeValidationSpec: maybeValidationSpec,
								showAlsoPassedValidation: $rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(maybeValidationSpec)
							}),
						acc);
				}),
			fieldsState,
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$validateEntireForm = F2(
	function (formStateBeforeValidationFixer, form) {
		var state = form.state;
		var allKeys = $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker(form);
		var newFieldsState = A4($rakutentech$r10$R10$Form$Internal$Update$runAllValidations, formStateBeforeValidationFixer, allKeys, form.state, form.state.fieldsState);
		return _Utils_update(
			state,
			{fieldsState: newFieldsState});
	});
var $rakutentech$r10$R10$Form$Internal$Update$submit = F2(
	function (formStateBeforeValidationFixer, form) {
		var newQtySubmitAttempted = $rakutentech$r10$R10$Form$Internal$QtySubmitAttempted$increment(form.state.qtySubmitAttempted);
		var newFieldsState = $rakutentech$r10$R10$Form$Internal$Update$isFormSubmittable(form) ? A2($rakutentech$r10$R10$Form$Internal$Update$validateEntireForm, formStateBeforeValidationFixer, form) : form.state;
		return _Utils_update(
			newFieldsState,
			{qtySubmitAttempted: newQtySubmitAttempted});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp = {$: 'NoOp'};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$cleanPhoneNumber = function (phone) {
	return A3(
		$rakutentech$r10$R10$Utils$userReplace,
		'[^0-9 \\-\\(\\).]',
		function (_v0) {
			return '';
		},
		phone);
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId = function (key) {
	return 'dropdown-content-' + key;
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$extractCountry = function (untrimmedString) {
	var str = A3($elm$core$String$replace, ' ', '', untrimmedString);
	return A2($elm$core$String$startsWith, '+', str) ? $elm$core$List$head(
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Country$fromCountryTelCode,
				A2(
					$elm$core$List$map,
					function (i) {
						return A2($elm$core$String$left, i, str);
					},
					$elm$core$List$reverse(
						A2($elm$core$List$range, 2, 7)))))) : $elm$core$Maybe$Nothing;
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId = function (key) {
	return 'dropdown-search-' + key;
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$focusSearchBoxCmd = F2(
	function (key, _v0) {
		var model = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			model,
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						cmd,
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
						$elm$browser$Browser$Dom$focus(
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId(key)))
					])));
	});
var $rakutentech$r10$R10$Country$Canada = {$: 'Canada'};
var $rakutentech$r10$R10$Country$Kazakhstan = {$: 'Kazakhstan'};
var $rakutentech$r10$R10$Country$Pitcairn = {$: 'Pitcairn'};
var $rakutentech$r10$R10$Country$SaintBarthelemy = {$: 'SaintBarthelemy'};
var $rakutentech$r10$R10$Country$SaintMartin = {$: 'SaintMartin'};
var $rakutentech$r10$R10$Country$WesternSahara = {$: 'WesternSahara'};
var $rakutentech$r10$R10$Country$fromString = function (str) {
	switch (str) {
		case 'Afghanistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Afghanistan);
		case 'Albania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Albania);
		case 'Algeria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Algeria);
		case 'American Samoa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AmericanSamoa);
		case 'Andorra':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Andorra);
		case 'Angola':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Angola);
		case 'Anguilla':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Anguilla);
		case 'Antarctica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Antarctica);
		case 'Antigua and Barbuda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$AntiguaandBarbuda);
		case 'Argentina':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Argentina);
		case 'Armenia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Armenia);
		case 'Aruba':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Aruba);
		case 'Australia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Australia);
		case 'Austria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Austria);
		case 'Azerbaijan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Azerbaijan);
		case 'Bahamas':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahamas);
		case 'Bahrain':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bahrain);
		case 'Bangladesh':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bangladesh);
		case 'Barbados':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Barbados);
		case 'Belarus':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belarus);
		case 'Belgium':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belgium);
		case 'Belize':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Belize);
		case 'Benin':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Benin);
		case 'Bermuda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bermuda);
		case 'Bhutan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bhutan);
		case 'Bolivia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bolivia);
		case 'Bosnia and Herzegovina':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BosniaandHerzegovina);
		case 'Botswana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Botswana);
		case 'Brazil':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brazil);
		case 'British Indian Ocean Territory':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishIndianOceanTerritory);
		case 'British Virgin Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BritishVirginIslands);
		case 'Brunei':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Brunei);
		case 'Bulgaria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Bulgaria);
		case 'Burkina Faso':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$BurkinaFaso);
		case 'Burundi':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Burundi);
		case 'Cambodia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cambodia);
		case 'Cameroon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cameroon);
		case 'Canada':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Canada);
		case 'Cape Verde':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CapeVerde);
		case 'Cayman Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CaymanIslands);
		case 'Central African Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CentralAfricanRepublic);
		case 'Chad':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chad);
		case 'Chile':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Chile);
		case 'China':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$China);
		case 'Christmas Island':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ChristmasIsland);
		case 'Cocos Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CocosIslands);
		case 'Colombia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Colombia);
		case 'Comoros':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Comoros);
		case 'Cook Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CookIslands);
		case 'Costa Rica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CostaRica);
		case 'Croatia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Croatia);
		case 'Cuba':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cuba);
		case 'Curacao':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Curacao);
		case 'Cyprus':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Cyprus);
		case 'Czech Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$CzechRepublic);
		case 'Democratic Republic of the Congo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo);
		case 'Denmark':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Denmark);
		case 'Djibouti':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Djibouti);
		case 'Dominica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Dominica);
		case 'Dominican Republic':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$DominicanRepublic);
		case 'East Timor':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EastTimor);
		case 'Ecuador':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ecuador);
		case 'Egypt':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Egypt);
		case 'El Salvador':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$ElSalvador);
		case 'Equatorial Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$EquatorialGuinea);
		case 'Eritrea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Eritrea);
		case 'Estonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Estonia);
		case 'Ethiopia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ethiopia);
		case 'Falkland Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FalklandIslands);
		case 'Faroe Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FaroeIslands);
		case 'Fiji':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Fiji);
		case 'Finland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Finland);
		case 'France':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$France);
		case 'French Polynesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$FrenchPolynesia);
		case 'Gabon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gabon);
		case 'Gambia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gambia);
		case 'Georgia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Georgia);
		case 'Germany':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Germany);
		case 'Ghana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ghana);
		case 'Gibraltar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Gibraltar);
		case 'Greece':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greece);
		case 'Greenland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Greenland);
		case 'Grenada':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Grenada);
		case 'Guam':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guam);
		case 'Guatemala':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guatemala);
		case 'Guernsey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guernsey);
		case 'Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guinea);
		case 'Guinea-Bissau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$GuineaBissau);
		case 'Guyana':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Guyana);
		case 'Haiti':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Haiti);
		case 'Honduras':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Honduras);
		case 'Hong Kong':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$HongKong);
		case 'Hungary':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Hungary);
		case 'Iceland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iceland);
		case 'India':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$India);
		case 'Indonesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Indonesia);
		case 'Iran':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iran);
		case 'Iraq':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Iraq);
		case 'Ireland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ireland);
		case 'Isle of Man':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IsleofMan);
		case 'Israel':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Israel);
		case 'Italy':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Italy);
		case 'Ivory Coast':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$IvoryCoast);
		case 'Jamaica':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jamaica);
		case 'Japan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Japan);
		case 'Jersey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jersey);
		case 'Jordan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Jordan);
		case 'Kazakhstan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kazakhstan);
		case 'Kenya':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kenya);
		case 'Kiribati':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kiribati);
		case 'Kosovo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kosovo);
		case 'Kuwait':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kuwait);
		case 'Kyrgyzstan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Kyrgyzstan);
		case 'Laos':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Laos);
		case 'Latvia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Latvia);
		case 'Lebanon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lebanon);
		case 'Lesotho':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lesotho);
		case 'Liberia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liberia);
		case 'Libya':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Libya);
		case 'Liechtenstein':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Liechtenstein);
		case 'Lithuania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Lithuania);
		case 'Luxembourg':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Luxembourg);
		case 'Macau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macau);
		case 'Macedonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Macedonia);
		case 'Madagascar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Madagascar);
		case 'Malawi':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malawi);
		case 'Malaysia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malaysia);
		case 'Maldives':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Maldives);
		case 'Mali':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mali);
		case 'Malta':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Malta);
		case 'Marshall Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$MarshallIslands);
		case 'Mauritania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritania);
		case 'Mauritius':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mauritius);
		case 'Mayotte':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mayotte);
		case 'Mexico':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mexico);
		case 'Micronesia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Micronesia);
		case 'Moldova':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Moldova);
		case 'Monaco':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Monaco);
		case 'Mongolia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mongolia);
		case 'Montenegro':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montenegro);
		case 'Montserrat':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Montserrat);
		case 'Morocco':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Morocco);
		case 'Mozambique':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Mozambique);
		case 'Myanmar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Myanmar);
		case 'Namibia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Namibia);
		case 'Nauru':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nauru);
		case 'Nepal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nepal);
		case 'Netherlands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Netherlands);
		case 'New Caledonia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewCaledonia);
		case 'New Zealand':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NewZealand);
		case 'Nicaragua':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nicaragua);
		case 'Niger':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niger);
		case 'Nigeria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Nigeria);
		case 'Niue':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Niue);
		case 'North Korea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthKorea);
		case 'Northern Mariana Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$NorthernMarianaIslands);
		case 'Norway':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Norway);
		case 'Oman':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Oman);
		case 'Pakistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pakistan);
		case 'Palau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palau);
		case 'Palestine':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Palestine);
		case 'Panama':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Panama);
		case 'Papua New Guinea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PapuaNewGuinea);
		case 'Paraguay':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Paraguay);
		case 'Peru':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Peru);
		case 'Philippines':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Philippines);
		case 'Pitcairn':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Pitcairn);
		case 'Poland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Poland);
		case 'Portugal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Portugal);
		case 'Puerto Rico':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$PuertoRico);
		case 'Qatar':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Qatar);
		case 'Republic of the Congo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$RepublicoftheCongo);
		case 'Reunion':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Reunion);
		case 'Romania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Romania);
		case 'Russia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Russia);
		case 'Rwanda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Rwanda);
		case 'Saint Barthelemy':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintBarthelemy);
		case 'Saint Helena':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintHelena);
		case 'Saint Kitts and Nevis':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintKittsandNevis);
		case 'Saint Lucia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintLucia);
		case 'Saint Martin':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintMartin);
		case 'Saint Pierre and Miquelon':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintPierreandMiquelon);
		case 'Saint Vincent and The Grenadines':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaintVincentandTheGrenadines);
		case 'Samoa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Samoa);
		case 'San Marino':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SanMarino);
		case 'Sao Tome and Principe':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaoTomeandPrincipe);
		case 'Saudi Arabia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SaudiArabia);
		case 'Senegal':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Senegal);
		case 'Serbia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Serbia);
		case 'Seychelles':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Seychelles);
		case 'Sierra Leone':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SierraLeone);
		case 'Singapore':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Singapore);
		case 'Sint Maarten':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SintMaarten);
		case 'Slovakia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovakia);
		case 'Slovenia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Slovenia);
		case 'Solomon Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SolomonIslands);
		case 'Somalia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Somalia);
		case 'South Africa':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthAfrica);
		case 'South Korea':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthKorea);
		case 'South Sudan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SouthSudan);
		case 'Spain':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Spain);
		case 'Sri Lanka':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SriLanka);
		case 'Sudan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sudan);
		case 'Suriname':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Suriname);
		case 'Svalbard and Jan Mayen':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$SvalbardandJanMayen);
		case 'Swaziland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Swaziland);
		case 'Sweden':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Sweden);
		case 'Switzerland':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Switzerland);
		case 'Syria':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Syria);
		case 'Taiwan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Taiwan);
		case 'Tajikistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tajikistan);
		case 'Tanzania':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tanzania);
		case 'Thailand':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Thailand);
		case 'Togo':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Togo);
		case 'Tokelau':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tokelau);
		case 'Tonga':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tonga);
		case 'Trinidad and Tobago':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TrinidadandTobago);
		case 'Tunisia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tunisia);
		case 'Turkey':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkey);
		case 'Turkmenistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Turkmenistan);
		case 'Turks and Caicos Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$TurksandCaicosIslands);
		case 'Tuvalu':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Tuvalu);
		case 'U.S. Virgin Islands':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$USVirginIslands);
		case 'Uganda':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uganda);
		case 'Ukraine':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Ukraine);
		case 'United Arab Emirates':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedArabEmirates);
		case 'United Kingdom':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedKingdom);
		case 'United States':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$UnitedStates);
		case 'Uruguay':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uruguay);
		case 'Uzbekistan':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Uzbekistan);
		case 'Vanuatu':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vanuatu);
		case 'Vatican':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vatican);
		case 'Venezuela':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Venezuela);
		case 'Vietnam':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Vietnam);
		case 'Wallis and Futuna':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WallisandFutuna);
		case 'Western Sahara':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$WesternSahara);
		case 'Yemen':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Yemen);
		case 'Zambia':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zambia);
		case 'Zimbabwe':
			return $elm$core$Maybe$Just($rakutentech$r10$R10$Country$Zimbabwe);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex = F2(
	function (fieldOptions, value) {
		return A2(
			$elm_community$list_extra$List$Extra$findIndex,
			function (country) {
				return _Utils_eq(country, value);
			},
			fieldOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight = 10;
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight = F2(
	function (args, optionsCount) {
		var displayCount = A2(
			$elm$core$Basics$max,
			1,
			A2($elm$core$Basics$min, args.maxDisplayCount, optionsCount));
		var bottomHingeHeight = (_Utils_eq(displayCount, optionsCount) || (!optionsCount)) ? $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight : 0;
		var dropdownHeight = ((args.selectOptionHeight * displayCount) + $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight) + bottomHingeHeight;
		return dropdownHeight;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY = F4(
	function (scroll, args, optionIndex, optionsCount) {
		if (_Utils_eq(optionIndex, -1)) {
			return scroll;
		} else {
			if (!optionIndex) {
				return 0.0;
			} else {
				var maxViewport = {
					bottom: scroll + A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount),
					top: scroll
				};
				var bottomHingeHeight = _Utils_eq(optionIndex, optionsCount - 1) ? $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight : 0;
				var optionY = ((optionIndex * args.selectOptionHeight) + $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight) + bottomHingeHeight;
				return (_Utils_cmp(optionY, maxViewport.bottom) > -1) ? (optionY - (A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount) - args.selectOptionHeight)) : ((_Utils_cmp(optionY, maxViewport.top) < 1) ? optionY : scroll);
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$inboundIndex = F2(
	function (maxIdx, idx) {
		return ((idx < 0) || (_Utils_cmp(idx, maxIdx) > 0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(idx);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_ = F5(
	function (step, defaultIndex, defaultCountry, model, args) {
		var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var currentSelect = function () {
			var _v0 = $rakutentech$r10$R10$Country$fromString(model.select);
			if (_v0.$ === 'Nothing') {
				return maybeCountryValue;
			} else {
				var country = _v0.a;
				return $elm$core$Maybe$Just(country);
			}
		}();
		var currentIndex = A2(
			$elm$core$Maybe$andThen,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
			currentSelect);
		var newIndex = A2(
			$elm$core$Maybe$withDefault,
			defaultIndex,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$inboundIndex(
					$elm$core$List$length(args.filteredFieldOption) - 1),
				A2(
					$elm$core$Maybe$map,
					function (index) {
						return index + step;
					},
					currentIndex)));
		var newSelect = A2(
			$elm$core$Maybe$withDefault,
			defaultCountry,
			A2($elm_community$list_extra$List$Extra$getAt, newIndex, args.filteredFieldOption));
		var newY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
			model.scroll,
			args,
			newIndex,
			$elm$core$List$length(args.filteredFieldOption));
		return _Utils_Tuple2(newSelect, newY);
	});
var $rakutentech$r10$R10$Country$listHead = $rakutentech$r10$R10$Country$Afghanistan;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNextNewSelectAndY = F2(
	function (model, args) {
		return A5($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_, 1, 0, $rakutentech$r10$R10$Country$listHead, model, args);
	});
var $rakutentech$r10$R10$Country$listTail = $rakutentech$r10$R10$Country$Zimbabwe;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getPrevNewSelectAndY = F2(
	function (model, args) {
		return A5(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNewSelectAndY_,
			-1,
			$elm$core$List$length(args.filteredFieldOption) - 1,
			$rakutentech$r10$R10$Country$listTail,
			model,
			args);
	});
var $elm$core$Process$sleep = _Process_sleep;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$helperFocusField = function (id) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp;
		},
		A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$browser$Browser$Dom$focus(id);
			},
			$elm$core$Process$sleep(500)));
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$inputPhoneElementId = function (key) {
	return 'input-phone-' + key;
};
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $rakutentech$r10$R10$Country$toString = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return 'Afghanistan';
		case 'Albania':
			return 'Albania';
		case 'Algeria':
			return 'Algeria';
		case 'AmericanSamoa':
			return 'American Samoa';
		case 'Andorra':
			return 'Andorra';
		case 'Angola':
			return 'Angola';
		case 'Anguilla':
			return 'Anguilla';
		case 'Antarctica':
			return 'Antarctica';
		case 'AntiguaandBarbuda':
			return 'Antigua and Barbuda';
		case 'Argentina':
			return 'Argentina';
		case 'Armenia':
			return 'Armenia';
		case 'Aruba':
			return 'Aruba';
		case 'Australia':
			return 'Australia';
		case 'Austria':
			return 'Austria';
		case 'Azerbaijan':
			return 'Azerbaijan';
		case 'Bahamas':
			return 'Bahamas';
		case 'Bahrain':
			return 'Bahrain';
		case 'Bangladesh':
			return 'Bangladesh';
		case 'Barbados':
			return 'Barbados';
		case 'Belarus':
			return 'Belarus';
		case 'Belgium':
			return 'Belgium';
		case 'Belize':
			return 'Belize';
		case 'Benin':
			return 'Benin';
		case 'Bermuda':
			return 'Bermuda';
		case 'Bhutan':
			return 'Bhutan';
		case 'Bolivia':
			return 'Bolivia';
		case 'BosniaandHerzegovina':
			return 'Bosnia and Herzegovina';
		case 'Botswana':
			return 'Botswana';
		case 'Brazil':
			return 'Brazil';
		case 'BritishIndianOceanTerritory':
			return 'British Indian Ocean Territory';
		case 'BritishVirginIslands':
			return 'British Virgin Islands';
		case 'Brunei':
			return 'Brunei';
		case 'Bulgaria':
			return 'Bulgaria';
		case 'BurkinaFaso':
			return 'Burkina Faso';
		case 'Burundi':
			return 'Burundi';
		case 'Cambodia':
			return 'Cambodia';
		case 'Cameroon':
			return 'Cameroon';
		case 'Canada':
			return 'Canada';
		case 'CapeVerde':
			return 'Cape Verde';
		case 'CaymanIslands':
			return 'Cayman Islands';
		case 'CentralAfricanRepublic':
			return 'Central African Republic';
		case 'Chad':
			return 'Chad';
		case 'Chile':
			return 'Chile';
		case 'China':
			return 'China';
		case 'ChristmasIsland':
			return 'Christmas Island';
		case 'CocosIslands':
			return 'Cocos Islands';
		case 'Colombia':
			return 'Colombia';
		case 'Comoros':
			return 'Comoros';
		case 'CookIslands':
			return 'Cook Islands';
		case 'CostaRica':
			return 'Costa Rica';
		case 'Croatia':
			return 'Croatia';
		case 'Cuba':
			return 'Cuba';
		case 'Curacao':
			return 'Curacao';
		case 'Cyprus':
			return 'Cyprus';
		case 'CzechRepublic':
			return 'Czech Republic';
		case 'DemocraticRepublicoftheCongo':
			return 'Democratic Republic of the Congo';
		case 'Denmark':
			return 'Denmark';
		case 'Djibouti':
			return 'Djibouti';
		case 'Dominica':
			return 'Dominica';
		case 'DominicanRepublic':
			return 'Dominican Republic';
		case 'EastTimor':
			return 'East Timor';
		case 'Ecuador':
			return 'Ecuador';
		case 'Egypt':
			return 'Egypt';
		case 'ElSalvador':
			return 'El Salvador';
		case 'EquatorialGuinea':
			return 'Equatorial Guinea';
		case 'Eritrea':
			return 'Eritrea';
		case 'Estonia':
			return 'Estonia';
		case 'Ethiopia':
			return 'Ethiopia';
		case 'FalklandIslands':
			return 'Falkland Islands';
		case 'FaroeIslands':
			return 'Faroe Islands';
		case 'Fiji':
			return 'Fiji';
		case 'Finland':
			return 'Finland';
		case 'France':
			return 'France';
		case 'FrenchPolynesia':
			return 'French Polynesia';
		case 'Gabon':
			return 'Gabon';
		case 'Gambia':
			return 'Gambia';
		case 'Georgia':
			return 'Georgia';
		case 'Germany':
			return 'Germany';
		case 'Ghana':
			return 'Ghana';
		case 'Gibraltar':
			return 'Gibraltar';
		case 'Greece':
			return 'Greece';
		case 'Greenland':
			return 'Greenland';
		case 'Grenada':
			return 'Grenada';
		case 'Guam':
			return 'Guam';
		case 'Guatemala':
			return 'Guatemala';
		case 'Guernsey':
			return 'Guernsey';
		case 'Guinea':
			return 'Guinea';
		case 'GuineaBissau':
			return 'Guinea-Bissau';
		case 'Guyana':
			return 'Guyana';
		case 'Haiti':
			return 'Haiti';
		case 'Honduras':
			return 'Honduras';
		case 'HongKong':
			return 'Hong Kong';
		case 'Hungary':
			return 'Hungary';
		case 'Iceland':
			return 'Iceland';
		case 'India':
			return 'India';
		case 'Indonesia':
			return 'Indonesia';
		case 'Iran':
			return 'Iran';
		case 'Iraq':
			return 'Iraq';
		case 'Ireland':
			return 'Ireland';
		case 'IsleofMan':
			return 'Isle of Man';
		case 'Israel':
			return 'Israel';
		case 'Italy':
			return 'Italy';
		case 'IvoryCoast':
			return 'Ivory Coast';
		case 'Jamaica':
			return 'Jamaica';
		case 'Japan':
			return 'Japan';
		case 'Jersey':
			return 'Jersey';
		case 'Jordan':
			return 'Jordan';
		case 'Kazakhstan':
			return 'Kazakhstan';
		case 'Kenya':
			return 'Kenya';
		case 'Kiribati':
			return 'Kiribati';
		case 'Kosovo':
			return 'Kosovo';
		case 'Kuwait':
			return 'Kuwait';
		case 'Kyrgyzstan':
			return 'Kyrgyzstan';
		case 'Laos':
			return 'Laos';
		case 'Latvia':
			return 'Latvia';
		case 'Lebanon':
			return 'Lebanon';
		case 'Lesotho':
			return 'Lesotho';
		case 'Liberia':
			return 'Liberia';
		case 'Libya':
			return 'Libya';
		case 'Liechtenstein':
			return 'Liechtenstein';
		case 'Lithuania':
			return 'Lithuania';
		case 'Luxembourg':
			return 'Luxembourg';
		case 'Macau':
			return 'Macau';
		case 'Macedonia':
			return 'Macedonia';
		case 'Madagascar':
			return 'Madagascar';
		case 'Malawi':
			return 'Malawi';
		case 'Malaysia':
			return 'Malaysia';
		case 'Maldives':
			return 'Maldives';
		case 'Mali':
			return 'Mali';
		case 'Malta':
			return 'Malta';
		case 'MarshallIslands':
			return 'Marshall Islands';
		case 'Mauritania':
			return 'Mauritania';
		case 'Mauritius':
			return 'Mauritius';
		case 'Mayotte':
			return 'Mayotte';
		case 'Mexico':
			return 'Mexico';
		case 'Micronesia':
			return 'Micronesia';
		case 'Moldova':
			return 'Moldova';
		case 'Monaco':
			return 'Monaco';
		case 'Mongolia':
			return 'Mongolia';
		case 'Montenegro':
			return 'Montenegro';
		case 'Montserrat':
			return 'Montserrat';
		case 'Morocco':
			return 'Morocco';
		case 'Mozambique':
			return 'Mozambique';
		case 'Myanmar':
			return 'Myanmar';
		case 'Namibia':
			return 'Namibia';
		case 'Nauru':
			return 'Nauru';
		case 'Nepal':
			return 'Nepal';
		case 'Netherlands':
			return 'Netherlands';
		case 'NewCaledonia':
			return 'New Caledonia';
		case 'NewZealand':
			return 'New Zealand';
		case 'Nicaragua':
			return 'Nicaragua';
		case 'Niger':
			return 'Niger';
		case 'Nigeria':
			return 'Nigeria';
		case 'Niue':
			return 'Niue';
		case 'NorthKorea':
			return 'North Korea';
		case 'NorthernMarianaIslands':
			return 'Northern Mariana Islands';
		case 'Norway':
			return 'Norway';
		case 'Oman':
			return 'Oman';
		case 'Pakistan':
			return 'Pakistan';
		case 'Palau':
			return 'Palau';
		case 'Palestine':
			return 'Palestine';
		case 'Panama':
			return 'Panama';
		case 'PapuaNewGuinea':
			return 'Papua New Guinea';
		case 'Paraguay':
			return 'Paraguay';
		case 'Peru':
			return 'Peru';
		case 'Philippines':
			return 'Philippines';
		case 'Pitcairn':
			return 'Pitcairn';
		case 'Poland':
			return 'Poland';
		case 'Portugal':
			return 'Portugal';
		case 'PuertoRico':
			return 'Puerto Rico';
		case 'Qatar':
			return 'Qatar';
		case 'RepublicoftheCongo':
			return 'Republic of the Congo';
		case 'Reunion':
			return 'Reunion';
		case 'Romania':
			return 'Romania';
		case 'Russia':
			return 'Russia';
		case 'Rwanda':
			return 'Rwanda';
		case 'SaintBarthelemy':
			return 'Saint Barthelemy';
		case 'SaintHelena':
			return 'Saint Helena';
		case 'SaintKittsandNevis':
			return 'Saint Kitts and Nevis';
		case 'SaintLucia':
			return 'Saint Lucia';
		case 'SaintMartin':
			return 'Saint Martin';
		case 'SaintPierreandMiquelon':
			return 'Saint Pierre and Miquelon';
		case 'SaintVincentandTheGrenadines':
			return 'Saint Vincent and The Grenadines';
		case 'Samoa':
			return 'Samoa';
		case 'SanMarino':
			return 'San Marino';
		case 'SaoTomeandPrincipe':
			return 'Sao Tome and Principe';
		case 'SaudiArabia':
			return 'Saudi Arabia';
		case 'Senegal':
			return 'Senegal';
		case 'Serbia':
			return 'Serbia';
		case 'Seychelles':
			return 'Seychelles';
		case 'SierraLeone':
			return 'Sierra Leone';
		case 'Singapore':
			return 'Singapore';
		case 'SintMaarten':
			return 'Sint Maarten';
		case 'Slovakia':
			return 'Slovakia';
		case 'Slovenia':
			return 'Slovenia';
		case 'SolomonIslands':
			return 'Solomon Islands';
		case 'Somalia':
			return 'Somalia';
		case 'SouthAfrica':
			return 'South Africa';
		case 'SouthKorea':
			return 'South Korea';
		case 'SouthSudan':
			return 'South Sudan';
		case 'Spain':
			return 'Spain';
		case 'SriLanka':
			return 'Sri Lanka';
		case 'Sudan':
			return 'Sudan';
		case 'Suriname':
			return 'Suriname';
		case 'SvalbardandJanMayen':
			return 'Svalbard and Jan Mayen';
		case 'Swaziland':
			return 'Swaziland';
		case 'Sweden':
			return 'Sweden';
		case 'Switzerland':
			return 'Switzerland';
		case 'Syria':
			return 'Syria';
		case 'Taiwan':
			return 'Taiwan';
		case 'Tajikistan':
			return 'Tajikistan';
		case 'Tanzania':
			return 'Tanzania';
		case 'Thailand':
			return 'Thailand';
		case 'Togo':
			return 'Togo';
		case 'Tokelau':
			return 'Tokelau';
		case 'Tonga':
			return 'Tonga';
		case 'TrinidadandTobago':
			return 'Trinidad and Tobago';
		case 'Tunisia':
			return 'Tunisia';
		case 'Turkey':
			return 'Turkey';
		case 'Turkmenistan':
			return 'Turkmenistan';
		case 'TurksandCaicosIslands':
			return 'Turks and Caicos Islands';
		case 'Tuvalu':
			return 'Tuvalu';
		case 'USVirginIslands':
			return 'U.S. Virgin Islands';
		case 'Uganda':
			return 'Uganda';
		case 'Ukraine':
			return 'Ukraine';
		case 'UnitedArabEmirates':
			return 'United Arab Emirates';
		case 'UnitedKingdom':
			return 'United Kingdom';
		case 'UnitedStates':
			return 'United States';
		case 'Uruguay':
			return 'Uruguay';
		case 'Uzbekistan':
			return 'Uzbekistan';
		case 'Vanuatu':
			return 'Vanuatu';
		case 'Vatican':
			return 'Vatican';
		case 'Venezuela':
			return 'Venezuela';
		case 'Vietnam':
			return 'Vietnam';
		case 'WallisandFutuna':
			return 'Wallis and Futuna';
		case 'WesternSahara':
			return 'Western Sahara';
		case 'Yemen':
			return 'Yemen';
		case 'Zambia':
			return 'Zambia';
		default:
			return 'Zimbabwe';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper = F4(
	function (model, key, country, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					scroll: _float,
					select: $rakutentech$r10$R10$Country$toString(country)
				}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper = F3(
	function (model, key, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{opened: true, scroll: _float}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'OnFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: true, opened: false, value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnLoseFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: false, opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnScroll':
				var scroll = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: scroll}),
					$elm$core$Platform$Cmd$none);
			case 'OnEsc':
				var key = msg.a;
				var needFocusToInput = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: ''}),
					needFocusToInput ? $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$helperFocusField(
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$inputPhoneElementId(key)) : $elm$core$Platform$Cmd$none);
			case 'OnValueChange':
				var key = msg.a;
				var args = msg.b;
				var newValue_ = msg.c;
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				var newValue = function (v) {
					return _Utils_ap(
						v,
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$cleanPhoneNumber(newValue_));
				}(
					A2(
						$elm$core$Maybe$withDefault,
						'',
						A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryTelCode, maybeCountryValue)));
				var hasCurrentCountryCode = function () {
					if (maybeCountryValue.$ === 'Just') {
						var countryValue = maybeCountryValue.a;
						return A2(
							$elm$core$String$startsWith,
							$rakutentech$r10$R10$Country$toCountryTelCode(countryValue),
							A3($elm$core$String$replace, ' ', '', newValue));
					} else {
						return false;
					}
				}();
				var newCountryValue = function () {
					if (hasCurrentCountryCode) {
						return maybeCountryValue;
					} else {
						var codeFromVal = $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$extractCountry(newValue);
						return (!_Utils_eq(codeFromVal, $elm$core$Maybe$Nothing)) ? codeFromVal : maybeCountryValue;
					}
				}();
				var newY = _Utils_eq(newCountryValue, maybeCountryValue) ? model.scroll : A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						A2(
							$elm$core$Maybe$andThen,
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
							newCountryValue)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: newY, value: newValue}),
					A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
						A3(
							$elm$browser$Browser$Dom$setViewportOf,
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(key),
							0,
							newY)));
			case 'OnSearch':
				var args = msg.a;
				var newSearch = msg.b;
				var isSelectInsideCountryOptions = A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (s) {
							return A2($elm$core$List$member, s, args.filteredFieldOption);
						},
						$rakutentech$r10$R10$Country$fromString(model.select)));
				var newSelect = isSelectInsideCountryOptions ? $rakutentech$r10$R10$Country$fromString(model.select) : $elm$core$List$head(args.filteredFieldOption);
				var maybeNewIndex = A2(
					$elm$core$Maybe$andThen,
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(args.filteredFieldOption),
					newSelect);
				var newY = A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						maybeNewIndex));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							scroll: newY,
							search: newSearch,
							select: A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toString, newSelect))
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$attempt,
								$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp),
								A3(
									$elm$browser$Browser$Dom$setViewportOf,
									$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(args.key),
									0,
									newY))
							])));
			case 'OnOptionSelect':
				var key = msg.a;
				var newCountry = msg.b;
				var newCode = $rakutentech$r10$R10$Country$toCountryTelCode(newCountry);
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				var newValue = function () {
					if (maybeCountryValue.$ === 'Just') {
						var oldCountry = maybeCountryValue.a;
						var oldCode = $rakutentech$r10$R10$Country$toCountryTelCode(oldCountry);
						return A3(
							$elm$core$String$replace,
							'  ',
							' ',
							A3(
								$elm$core$String$replace,
								oldCode,
								newCode,
								A3($elm$core$String$replace, ' ', '', model.value)));
					} else {
						return _Utils_ap(newCode + ' ', model.value);
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: '', select: '', value: newValue}),
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$helperFocusField(
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$inputPhoneElementId(key)));
			case 'OnInputClick':
				var args = msg.a;
				return model.opened ? _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, scroll: args.selectedY}),
					$elm$core$Platform$Cmd$none) : A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$focusSearchBoxCmd,
					args.key,
					A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, args.selectedY));
			case 'OnArrowUp':
				var args = msg.a;
				return model.opened ? function (_v3) {
					var newValue = _v3.a;
					var newY = _v3.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper, model, args.key, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getPrevNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, model.scroll);
			case 'OnArrowDown':
				var args = msg.a;
				return model.opened ? function (_v4) {
					var newValue = _v4.a;
					var newY = _v4.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onArrowHelper, model, args.key, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getNextNewSelectAndY, model, args)) : A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$focusSearchBoxCmd,
					args.key,
					A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$onOpenHelper, model, args.key, model.scroll));
			default:
				var disabledChangeCountry = msg.a;
				var value = msg.b;
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				var countryTelCode = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryTelCode, maybeCountryValue));
				var newValue = (disabledChangeCountry && (_Utils_eq(model.value, countryTelCode) && (_Utils_cmp(
					$elm$core$String$length(model.value),
					$elm$core$String$length(value)) > 0))) ? model.value : ('+' + $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$cleanPhoneNumber(value));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{value: newValue}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp = {$: 'NoOp'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId = function (key) {
	return 'single-dropdown-content-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex = F2(
	function (filteredOptions, value) {
		return A2(
			$elm_community$list_extra$List$Extra$findIndex,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.value;
				},
				$elm$core$Basics$eq(value)),
			filteredOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight = 10;
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight = F2(
	function (args, optionsCount) {
		var displayCount = A2(
			$elm$core$Basics$max,
			1,
			A2($elm$core$Basics$min, args.maxDisplayCount, optionsCount));
		var bottomHingeHeight = (_Utils_eq(displayCount, optionsCount) || (!optionsCount)) ? $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight : 0;
		var dropdownHeight = ((args.selectOptionHeight * displayCount) + $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight) + bottomHingeHeight;
		return dropdownHeight;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY = F4(
	function (scroll, args, optionIndex, optionsCount) {
		if (_Utils_eq(optionIndex, -1)) {
			return scroll;
		} else {
			if (!optionIndex) {
				return 0.0;
			} else {
				var maxViewport = {
					bottom: scroll + A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount),
					top: scroll
				};
				var bottomHingeHeight = _Utils_eq(optionIndex, optionsCount - 1) ? $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight : 0;
				var optionY = ((optionIndex * args.selectOptionHeight) + $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight) + bottomHingeHeight;
				return (_Utils_cmp(optionY, maxViewport.bottom) > -1) ? (optionY - (A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount) - args.selectOptionHeight)) : ((_Utils_cmp(optionY, maxViewport.top) < 1) ? optionY : scroll);
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$inboundIndex = F2(
	function (maxIdx, idx) {
		return ((idx < 0) || (_Utils_cmp(idx, maxIdx) > 0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(idx);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_ = F4(
	function (step, _default, model, args) {
		var select = $elm$core$String$isEmpty(model.select) ? model.value : model.select;
		var newIndex = A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Single$Update$inboundIndex(
					$elm$core$List$length(args.filteredFieldOption) - 1),
				A2(
					$elm$core$Maybe$map,
					function (index) {
						return index + step;
					},
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, args.filteredFieldOption, select))));
		var newValue = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				A2($elm_community$list_extra$List$Extra$getAt, newIndex, args.filteredFieldOption)));
		var newY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
			model.scroll,
			args,
			newIndex,
			$elm$core$List$length(args.filteredFieldOption));
		return _Utils_Tuple2(newValue, newY);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNextNewSelectAndY = F2(
	function (model, args) {
		return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_, 1, 0, model, args);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getPrevNewSelectAndY = F2(
	function (model, args) {
		return A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNewSelectAndY_,
			-1,
			$elm$core$List$length(args.filteredFieldOption) - 1,
			model,
			args);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper = F4(
	function (key, model, value, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{scroll: _float, select: value}),
			A2(
				$elm$core$Task$attempt,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
				A3(
					$elm$browser$Browser$Dom$setViewportOf,
					$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(key),
					0,
					_float)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId = function (key) {
	return 'single-dropdown-search-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper = F3(
	function (key, model, _float) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{opened: true, scroll: _float}),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
						A3(
							$elm$browser$Browser$Dom$setViewportOf,
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(key),
							0,
							_float)),
						A2(
						$elm$core$Task$attempt,
						$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
						$elm$browser$Browser$Dom$focus(
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId(key)))
					])));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'OnFocus':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: true}),
					$elm$core$Platform$Cmd$none);
			case 'OnLoseFocus':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{focused: false, opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnScroll':
				var scroll = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: scroll}),
					$elm$core$Platform$Cmd$none);
			case 'OnEsc':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: ''}),
					$elm$core$Platform$Cmd$none);
			case 'OnSearch':
				var args = msg.a;
				var newSearch = msg.b;
				var isSelectInsideCountryOptions = A2(
					$elm$core$List$any,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.value;
						},
						$elm$core$Basics$eq(model.select)),
					args.filteredFieldOption);
				var newSelect = isSelectInsideCountryOptions ? model.select : A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.value;
						},
						$elm$core$List$head(args.filteredFieldOption)));
				var maybeNewIndex = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, args.filteredFieldOption, newSelect);
				var newY = A2(
					$elm$core$Maybe$withDefault,
					model.scroll,
					A2(
						$elm$core$Maybe$map,
						function (newIndex) {
							return A4(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
								model.scroll,
								args,
								newIndex,
								$elm$core$List$length(args.filteredFieldOption));
						},
						maybeNewIndex));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{scroll: newY, search: newSearch, select: newSelect}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$attempt,
								$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp),
								A3(
									$elm$browser$Browser$Dom$setViewportOf,
									$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(args.key),
									0,
									newY))
							])));
			case 'Hover':
				var over = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{over: over}),
					$elm$core$Platform$Cmd$none);
			case 'OnOptionSelect':
				var value = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, search: '', select: '', value: value}),
					$elm$core$Platform$Cmd$none);
			case 'OnInputClick':
				var args = msg.a;
				return model.opened ? _Utils_Tuple2(
					_Utils_update(
						model,
						{opened: false, scroll: args.selectedY}),
					$elm$core$Platform$Cmd$none) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, args.selectedY);
			case 'OnArrowUp':
				var args = msg.a;
				return model.opened ? function (_v1) {
					var newValue = _v1.a;
					var newY = _v1.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper, args.key, model, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getPrevNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, model.scroll);
			case 'OnArrowDown':
				var args = msg.a;
				return model.opened ? function (_v2) {
					var newValue = _v2.a;
					var newY = _v2.b;
					return A4($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onArrowHelper, args.key, model, newValue, newY);
				}(
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getNextNewSelectAndY, model, args)) : A3($rakutentech$r10$R10$FormComponents$Internal$Single$Update$onOpenHelper, args.key, model, model.scroll);
			default:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{value: ''}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $rakutentech$r10$R10$Form$Internal$Update$update = F3(
	function (formStateBeforeValidationFixer, msg, formStateBeforeHandleChangesSinceLastSubmissions) {
		var formState = _Utils_update(
			formStateBeforeHandleChangesSinceLastSubmissions,
			{
				changesSinceLastSubmissions: A2($rakutentech$r10$R10$Form$Internal$Msg$handleChangesSinceLastSubmissions, formStateBeforeHandleChangesSinceLastSubmissions.changesSinceLastSubmissions, msg)
			});
		switch (msg.$) {
			case 'NoOp':
				return _Utils_Tuple2(formState, $elm$core$Platform$Cmd$none);
			case 'Submit':
				var formConf = msg.a;
				return _Utils_Tuple2(
					A2(
						$rakutentech$r10$R10$Form$Internal$Update$submit,
						formStateBeforeValidationFixer,
						{conf: formConf, state: formState}),
					$elm$core$Platform$Cmd$none);
			case 'GetFocus':
				var key = msg.a;
				var fieldConf = msg.b;
				return _Utils_Tuple2(
					A4($rakutentech$r10$R10$Form$Internal$Update$onGetFocus, formStateBeforeValidationFixer, key, fieldConf, formState),
					$elm$core$Platform$Cmd$none);
			case 'LoseFocus':
				var key = msg.a;
				var fieldConf = msg.b;
				return _Utils_Tuple2(
					A4($rakutentech$r10$R10$Form$Internal$Update$onLoseFocus, formStateBeforeValidationFixer, key, fieldConf, formState),
					$elm$core$Platform$Cmd$none);
			case 'TogglePasswordShow':
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							fieldsState: A3($rakutentech$r10$R10$Form$Internal$Dict$update, key, $rakutentech$r10$R10$Form$Internal$Update$helperToggleShowPassword, formState.fieldsState)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeTab':
				var key = msg.a;
				var string = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							activeTabs: A3($rakutentech$r10$R10$Form$Internal$Dict$insert, key, string, formState.activeTabs)
						}),
					$elm$core$Platform$Cmd$none);
			case 'AddEntity':
				var key = msg.a;
				var presentQuantity = A2(
					$elm$core$Maybe$withDefault,
					1,
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.multiplicableQuantities));
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							multiplicableQuantities: A3($rakutentech$r10$R10$Form$Internal$Dict$insert, key, presentQuantity + 1, formState.multiplicableQuantities)
						}),
					$elm$core$Platform$Cmd$none);
			case 'RemoveEntity':
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							removed: A2(
								$elm$core$Set$insert,
								$rakutentech$r10$R10$Form$Internal$Key$toString(key),
								formState.removed)
						}),
					$elm$core$Platform$Cmd$none);
			case 'KeyDown':
				var keyCode = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{lastKeyDownIsProcess: keyCode === 229}),
					$elm$core$Platform$Cmd$none);
			case 'Hover':
				var key = msg.a;
				var over = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						formState,
						{
							fieldsState: A3(
								$rakutentech$r10$R10$Form$Internal$Dict$update,
								key,
								$rakutentech$r10$R10$Form$Internal$Update$helperUpdateOver(over),
								formState.fieldsState)
						}),
					$elm$core$Platform$Cmd$none);
			case 'ChangeValue':
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var contextR10 = msg.d;
				var string = msg.e;
				return (formState.lastKeyDownIsProcess && $rakutentech$r10$R10$Device$isChromeDesktop(contextR10.device)) ? _Utils_Tuple2(
					_Utils_update(
						formState,
						{lastKeyDownIsProcess: false}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					A7(
						$rakutentech$r10$R10$Form$Internal$Update$onChangeValue,
						formStateBeforeValidationFixer,
						$rakutentech$r10$R10$Form$Internal$Update$isShowAlsoPassedValidation(fieldConf.validationSpecs),
						key,
						fieldConf,
						formConf,
						string,
						formState),
					$elm$core$Platform$Cmd$none);
			case 'OnSingleMsg':
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var singleMsg = msg.d;
				var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState));
				var singleModel = {
					focused: _Utils_eq(
						formState.focused,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					opened: _Utils_eq(
						formState.active,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					over: fieldState.over,
					scroll: fieldState.scroll,
					search: fieldState.search,
					select: fieldState.select,
					value: fieldState.value
				};
				var _v1 = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$update, singleMsg, singleModel);
				var newSingleModel = _v1.a;
				var singleCmd = _v1.b;
				var newFormState = $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState(
					{fieldConf: fieldConf, fieldState: fieldState, formConf: formConf, formState: formState, formStateBeforeValidationFixer: formStateBeforeValidationFixer, key: key, newSingleModel: newSingleModel, singleModel: singleModel});
				return _Utils_Tuple2(
					newFormState,
					A2(
						$elm$core$Platform$Cmd$map,
						A3($rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg, key, fieldConf, formConf),
						singleCmd));
			default:
				var key = msg.a;
				var fieldConf = msg.b;
				var formConf = msg.c;
				var phoneMsg = msg.d;
				var fieldState = $rakutentech$r10$R10$Form$Internal$Update$stateWithDefault(
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.fieldsState));
				var singleModel = {
					focused: _Utils_eq(
						formState.focused,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					opened: _Utils_eq(
						formState.active,
						$elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Key$toString(key))),
					over: fieldState.over,
					scroll: fieldState.scroll,
					search: fieldState.search,
					select: fieldState.select,
					value: fieldState.value
				};
				var _v2 = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$update, phoneMsg, singleModel);
				var newSingleModel = _v2.a;
				var singleCmd = _v2.b;
				var newFormState = $rakutentech$r10$R10$Form$Internal$Update$copyComponentStateToFormState(
					{fieldConf: fieldConf, fieldState: fieldState, formConf: formConf, formState: formState, formStateBeforeValidationFixer: formStateBeforeValidationFixer, key: key, newSingleModel: newSingleModel, singleModel: singleModel});
				return _Utils_Tuple2(
					newFormState,
					A2(
						$elm$core$Platform$Cmd$map,
						A3($rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg, key, fieldConf, formConf),
						singleCmd));
		}
	});
var $rakutentech$r10$R10$Form$update = $rakutentech$r10$R10$Form$Internal$Update$update;
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'MsgForm':
				var msgForm = msg.a;
				var form = model.form;
				var _v1 = A3(
					$rakutentech$r10$R10$Form$update,
					F2(
						function (_v2, a) {
							return a;
						}),
					msgForm,
					form.state);
				var newState = _v1.a;
				var cmd = _v1.b;
				var newForm = _Utils_update(
					form,
					{state: newState});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{form: newForm}),
					$elm$core$Platform$Cmd$none);
			case 'SendMsgToReact':
				return _Utils_Tuple2(
					model,
					$author$project$Main$sendToReact('Hello from Elm!'));
			default:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							message: {id: str}
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $rakutentech$r10$R10$Libu$Bu = function (a) {
	return {$: 'Bu', a: a};
};
var $author$project$Main$MsgForm = function (a) {
	return {$: 'MsgForm', a: a};
};
var $author$project$Main$SendMsgToReact = {$: 'SendMsgToReact'};
var $rakutentech$r10$R10$Color$Internal$Derived$Background = {$: 'Background'};
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute = function (a) {
	return {$: 'Attribute', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr = function (a) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return a;
		});
};
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Background$color = function (clr) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Background$color(clr));
};
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $lucamug$elm_ui_with_context$Element$WithContext$rgba = $mdgriffith$elm_ui$Element$rgba;
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $rakutentech$r10$R10$Color$Utils$fromColorColor = function (color) {
	var _v0 = $avh4$elm_color$Color$toRgba(color);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, red, green, blue, alpha);
};
var $rakutentech$r10$R10$Color$Internal$Base$Background = {$: 'Background'};
var $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertDanger = {$: 'BackgroundAlertDanger'};
var $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertInfo = {$: 'BackgroundAlertInfo'};
var $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertSuccess = {$: 'BackgroundAlertSuccess'};
var $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertWarning = {$: 'BackgroundAlertWarning'};
var $rakutentech$r10$R10$Color$Internal$Base$Border = {$: 'Border'};
var $rakutentech$r10$R10$Color$Internal$Base$FontAlertDanger = {$: 'FontAlertDanger'};
var $rakutentech$r10$R10$Color$Internal$Base$FontAlertInfo = {$: 'FontAlertInfo'};
var $rakutentech$r10$R10$Color$Internal$Base$FontAlertSuccess = {$: 'FontAlertSuccess'};
var $rakutentech$r10$R10$Color$Internal$Base$FontAlertWarning = {$: 'FontAlertWarning'};
var $rakutentech$r10$R10$Color$Internal$Base$FontLink = {$: 'FontLink'};
var $rakutentech$r10$R10$Color$Internal$Primary$LightBlue = {$: 'LightBlue'};
var $avh4$elm_color$Color$RgbaSpace = F4(
	function (a, b, c, d) {
		return {$: 'RgbaSpace', a: a, b: b, c: c, d: d};
	});
var $avh4$elm_color$Color$hsla = F4(
	function (hue, sat, light, alpha) {
		var _v0 = _Utils_Tuple3(hue, sat, light);
		var h = _v0.a;
		var s = _v0.b;
		var l = _v0.c;
		var m2 = (l <= 0.5) ? (l * (s + 1)) : ((l + s) - (l * s));
		var m1 = (l * 2) - m2;
		var hueToRgb = function (h__) {
			var h_ = (h__ < 0) ? (h__ + 1) : ((h__ > 1) ? (h__ - 1) : h__);
			return ((h_ * 6) < 1) ? (m1 + (((m2 - m1) * h_) * 6)) : (((h_ * 2) < 1) ? m2 : (((h_ * 3) < 2) ? (m1 + (((m2 - m1) * ((2 / 3) - h_)) * 6)) : m1));
		};
		var b = hueToRgb(h - (1 / 3));
		var g = hueToRgb(h);
		var r = hueToRgb(h + (1 / 3));
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, alpha);
	});
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$limit = A2($elm$core$Basics$clamp, 0, 1);
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $avh4$elm_color$Color$toHsla = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	var minColor = A2(
		$elm$core$Basics$min,
		r,
		A2($elm$core$Basics$min, g, b));
	var maxColor = A2(
		$elm$core$Basics$max,
		r,
		A2($elm$core$Basics$max, g, b));
	var l = (minColor + maxColor) / 2;
	var s = _Utils_eq(minColor, maxColor) ? 0 : ((l < 0.5) ? ((maxColor - minColor) / (maxColor + minColor)) : ((maxColor - minColor) / ((2 - maxColor) - minColor)));
	var h1 = _Utils_eq(maxColor, r) ? ((g - b) / (maxColor - minColor)) : (_Utils_eq(maxColor, g) ? (2 + ((b - r) / (maxColor - minColor))) : (4 + ((r - g) / (maxColor - minColor))));
	var h2 = h1 * (1 / 6);
	var h3 = $elm$core$Basics$isNaN(h2) ? 0 : ((h2 < 0) ? (h2 + 1) : h2);
	return {alpha: a, hue: h3, lightness: l, saturation: s};
};
var $noahzgordon$elm_color_extra$Color$Manipulate$darken = F2(
	function (offset, cl) {
		var _v0 = $avh4$elm_color$Color$toHsla(cl);
		var hue = _v0.hue;
		var saturation = _v0.saturation;
		var lightness = _v0.lightness;
		var alpha = _v0.alpha;
		return A4(
			$avh4$elm_color$Color$hsla,
			hue,
			saturation,
			$noahzgordon$elm_color_extra$Color$Manipulate$limit(lightness - offset),
			alpha);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$lighten = F2(
	function (offset, cl) {
		return A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, -offset, cl);
	});
var $avh4$elm_color$Color$fromRgba = function (components) {
	return A4($avh4$elm_color$Color$RgbaSpace, components.red, components.green, components.blue, components.alpha);
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $fredcy$elm_parseint$ParseInt$InvalidRadix = function (a) {
	return {$: 'InvalidRadix', a: a};
};
var $fredcy$elm_parseint$ParseInt$InvalidChar = function (a) {
	return {$: 'InvalidChar', a: a};
};
var $fredcy$elm_parseint$ParseInt$OutOfRange = function (a) {
	return {$: 'OutOfRange', a: a};
};
var $fredcy$elm_parseint$ParseInt$charOffset = F2(
	function (basis, c) {
		return $elm$core$Char$toCode(c) - $elm$core$Char$toCode(basis);
	});
var $fredcy$elm_parseint$ParseInt$isBetween = F3(
	function (lower, upper, c) {
		var ci = $elm$core$Char$toCode(c);
		return (_Utils_cmp(
			$elm$core$Char$toCode(lower),
			ci) < 1) && (_Utils_cmp(
			ci,
			$elm$core$Char$toCode(upper)) < 1);
	});
var $fredcy$elm_parseint$ParseInt$intFromChar = F2(
	function (radix, c) {
		var validInt = function (i) {
			return (_Utils_cmp(i, radix) < 0) ? $elm$core$Result$Ok(i) : $elm$core$Result$Err(
				$fredcy$elm_parseint$ParseInt$OutOfRange(c));
		};
		var toInt = A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('0'),
			_Utils_chr('9'),
			c) ? $elm$core$Result$Ok(
			A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('0'),
				c)) : (A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('a'),
			_Utils_chr('z'),
			c) ? $elm$core$Result$Ok(
			10 + A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('a'),
				c)) : (A3(
			$fredcy$elm_parseint$ParseInt$isBetween,
			_Utils_chr('A'),
			_Utils_chr('Z'),
			c) ? $elm$core$Result$Ok(
			10 + A2(
				$fredcy$elm_parseint$ParseInt$charOffset,
				_Utils_chr('A'),
				c)) : $elm$core$Result$Err(
			$fredcy$elm_parseint$ParseInt$InvalidChar(c))));
		return A2($elm$core$Result$andThen, validInt, toInt);
	});
var $fredcy$elm_parseint$ParseInt$parseIntR = F2(
	function (radix, rstring) {
		var _v0 = $elm$core$String$uncons(rstring);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Result$Ok(0);
		} else {
			var _v1 = _v0.a;
			var c = _v1.a;
			var rest = _v1.b;
			return A2(
				$elm$core$Result$andThen,
				function (ci) {
					return A2(
						$elm$core$Result$andThen,
						function (ri) {
							return $elm$core$Result$Ok(ci + (ri * radix));
						},
						A2($fredcy$elm_parseint$ParseInt$parseIntR, radix, rest));
				},
				A2($fredcy$elm_parseint$ParseInt$intFromChar, radix, c));
		}
	});
var $elm$core$String$reverse = _String_reverse;
var $fredcy$elm_parseint$ParseInt$parseIntRadix = F2(
	function (radix, string) {
		return ((2 <= radix) && (radix <= 36)) ? A2(
			$fredcy$elm_parseint$ParseInt$parseIntR,
			radix,
			$elm$core$String$reverse(string)) : $elm$core$Result$Err(
			$fredcy$elm_parseint$ParseInt$InvalidRadix(radix));
	});
var $fredcy$elm_parseint$ParseInt$parseIntHex = $fredcy$elm_parseint$ParseInt$parseIntRadix(16);
var $avh4$elm_color$Color$rgb = F3(
	function (r, g, b) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, 1.0);
	});
var $avh4$elm_color$Color$rgba = F4(
	function (r, g, b, a) {
		return A4($avh4$elm_color$Color$RgbaSpace, r, g, b, a);
	});
var $elm$core$Basics$pow = _Basics_pow;
var $noahzgordon$elm_color_extra$Color$Convert$roundToPlaces = F2(
	function (places, number) {
		var multiplier = A2($elm$core$Basics$pow, 10, places);
		return $elm$core$Basics$round(number * multiplier) / multiplier;
	});
var $noahzgordon$elm_color_extra$Color$Convert$hexToColor = function () {
	var pattern = '' + ('^' + ('#?' + ('(?:' + ('(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))' + ('|' + ('(?:([a-f\\d])([a-f\\d])([a-f\\d]))' + ('|' + ('(?:([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2}))' + ('|' + ('(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d]))' + (')' + '$')))))))))));
	var extend = function (token) {
		var _v6 = $elm$core$String$toList(token);
		if (_v6.b && (!_v6.b.b)) {
			var token_ = _v6.a;
			return $elm$core$String$fromList(
				_List_fromArray(
					[token_, token_]));
		} else {
			return token;
		}
	};
	return A2(
		$elm$core$Basics$composeR,
		$elm$core$String$toLower,
		A2(
			$elm$core$Basics$composeR,
			function (str) {
				return A2(
					$elm$core$Maybe$map,
					function (regex) {
						return A3($elm$regex$Regex$findAtMost, 1, regex, str);
					},
					$elm$regex$Regex$fromString(pattern));
			},
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Maybe$andThen($elm$core$List$head),
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Maybe$map(
						function ($) {
							return $.submatches;
						}),
					A2(
						$elm$core$Basics$composeR,
						$elm$core$Maybe$map(
							$elm$core$List$filterMap($elm$core$Basics$identity)),
						A2(
							$elm$core$Basics$composeR,
							$elm$core$Result$fromMaybe('Parsing hex regex failed'),
							$elm$core$Result$andThen(
								function (colors) {
									var _v0 = A2(
										$elm$core$List$map,
										A2(
											$elm$core$Basics$composeR,
											extend,
											A2(
												$elm$core$Basics$composeR,
												$fredcy$elm_parseint$ParseInt$parseIntHex,
												$elm$core$Result$map($elm$core$Basics$toFloat))),
										colors);
									_v0$2:
									while (true) {
										if (((((_v0.b && (_v0.a.$ === 'Ok')) && _v0.b.b) && (_v0.b.a.$ === 'Ok')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Ok')) {
											if (_v0.b.b.b.b) {
												if ((_v0.b.b.b.a.$ === 'Ok') && (!_v0.b.b.b.b.b)) {
													var r = _v0.a.a;
													var _v1 = _v0.b;
													var g = _v1.a.a;
													var _v2 = _v1.b;
													var b = _v2.a.a;
													var _v3 = _v2.b;
													var a = _v3.a.a;
													return $elm$core$Result$Ok(
														A4(
															$avh4$elm_color$Color$rgba,
															r / 255,
															g / 255,
															b / 255,
															A2($noahzgordon$elm_color_extra$Color$Convert$roundToPlaces, 2, a / 255)));
												} else {
													break _v0$2;
												}
											} else {
												var r = _v0.a.a;
												var _v4 = _v0.b;
												var g = _v4.a.a;
												var _v5 = _v4.b;
												var b = _v5.a.a;
												return $elm$core$Result$Ok(
													A3($avh4$elm_color$Color$rgb, r / 255, g / 255, b / 255));
											}
										} else {
											break _v0$2;
										}
									}
									return $elm$core$Result$Err('Parsing ints from hex failed');
								})))))));
}();
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $rakutentech$r10$R10$Color$Utils$fromHexToColorColor = function (hex) {
	var resultColor = $noahzgordon$elm_color_extra$Color$Convert$hexToColor(hex);
	var color = A2(
		$elm$core$Result$withDefault,
		$avh4$elm_color$Color$fromRgba(
			{alpha: 0, blue: 0, green: 0, red: 0}),
		resultColor);
	return color;
};
var $rakutentech$r10$R10$Color$Internal$Base$toColorDark_ = function (color) {
	switch (color.$) {
		case 'Font':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffffff');
		case 'FontAlertDanger':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ff6969');
		case 'FontAlertInfo':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#3cbdff');
		case 'FontAlertSuccess':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#5cad5c');
		case 'FontAlertWarning':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#f26a00');
		case 'FontReversed':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#000000');
		case 'FontLink':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#3cbdff');
		case 'Background':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#121212');
		case 'BackgroundAlertDanger':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#333333');
		case 'BackgroundAlertInfo':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#333333');
		case 'BackgroundAlertSuccess':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#333333');
		case 'BackgroundAlertWarning':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#333333');
		default:
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#666666');
	}
};
var $rakutentech$r10$R10$Color$Internal$Base$toColorLight_ = function (color) {
	switch (color.$) {
		case 'Font':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#000000');
		case 'FontAlertDanger':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#df0101');
		case 'FontAlertInfo':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#006497');
		case 'FontAlertSuccess':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#047205');
		case 'FontAlertWarning':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#a35e04');
		case 'FontReversed':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffffff');
		case 'FontLink':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#134ff3');
		case 'Background':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ebebeb');
		case 'BackgroundAlertDanger':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#fff0f0');
		case 'BackgroundAlertInfo':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ebf7fe');
		case 'BackgroundAlertSuccess':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ebf7ec');
		case 'BackgroundAlertWarning':
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#fef0dd');
		default:
			return $rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#cccccc');
	}
};
var $rakutentech$r10$R10$Color$Internal$Base$toColor = function (theme) {
	var _v0 = theme.mode;
	if (_v0.$ === 'Light') {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Base$toColorLight_(c);
		};
	} else {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Base$toColorDark_(c);
		};
	}
};
var $rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_ = function (theme) {
	return function (color) {
		var _v0 = theme.mode;
		if (_v0.$ === 'Light') {
			return A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, 0.1, color);
		} else {
			return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.2, color);
		}
	}(
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
};
var $rakutentech$r10$R10$Color$Internal$Base$FontReversed = {$: 'FontReversed'};
var $rakutentech$r10$R10$Color$Utils$setAlpha = F2(
	function (newAlpha, color) {
		var c = $avh4$elm_color$Color$toRgba(color);
		return $avh4$elm_color$Color$fromRgba(
			{alpha: newAlpha, blue: c.blue, green: c.green, red: c.red});
	});
var $rakutentech$r10$R10$Color$Internal$Derived$highEmphasisReversed_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.87,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontReversed));
};
var $rakutentech$r10$R10$Color$Internal$Base$Font = {$: 'Font'};
var $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.87,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Font));
};
var $noahzgordon$elm_color_extra$Color$Accessibility$luminance = function (cl) {
	var f = function (intensity) {
		return (intensity <= 0.03928) ? (intensity / 12.92) : A2($elm$core$Basics$pow, (intensity + 0.055) / 1.055, 2.4);
	};
	var _v0 = function (a) {
		return _Utils_Tuple3(
			f(a.red),
			f(a.green),
			f(a.blue));
	}(
		$avh4$elm_color$Color$toRgba(cl));
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return ((0.2126 * r) + (0.7152 * g)) + (0.0722 * b);
};
var $noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio = F2(
	function (c1, c2) {
		var b = $noahzgordon$elm_color_extra$Color$Accessibility$luminance(c2) + 0.05;
		var a = $noahzgordon$elm_color_extra$Color$Accessibility$luminance(c1) + 0.05;
		return (_Utils_cmp(a, b) > 0) ? (a / b) : (b / a);
	});
var $elm$core$List$sortWith = _List_sortWith;
var $noahzgordon$elm_color_extra$Color$Accessibility$maximumContrast = F2(
	function (base, options) {
		var compareContrast = F2(
			function (c1, c2) {
				return A2(
					$elm$core$Basics$compare,
					A2($noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio, base, c2),
					A2($noahzgordon$elm_color_extra$Color$Accessibility$contrastRatio, base, c1));
			});
		return $elm$core$List$head(
			A2($elm$core$List$sortWith, compareContrast, options));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$maximumContrast = F2(
	function (color, listColor) {
		return A2(
			$noahzgordon$elm_color_extra$Color$Accessibility$maximumContrast,
			A2($noahzgordon$elm_color_extra$Color$Manipulate$darken, 0.16, color),
			listColor);
	});
var $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasisReversed_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.6,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontReversed));
};
var $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_ = function (theme) {
	return A2(
		$rakutentech$r10$R10$Color$Utils$setAlpha,
		0.6,
		A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Font));
};
var $noahzgordon$elm_color_extra$Color$Manipulate$scale = F3(
	function (max, scaleAmount, value) {
		var clampedValue = A3($elm$core$Basics$clamp, 0, max, value);
		var clampedScale = A3($elm$core$Basics$clamp, -1.0, 1.0, scaleAmount);
		var diff = (clampedScale > 0) ? (max - clampedValue) : clampedValue;
		return clampedValue + (diff * clampedScale);
	});
var $noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl = F2(
	function (scaleBy, color) {
		var hsl = $avh4$elm_color$Color$toHsla(color);
		var _v0 = scaleBy;
		var saturationScale = _v0.saturationScale;
		var lightnessScale = _v0.lightnessScale;
		var alphaScale = _v0.alphaScale;
		return A4(
			$avh4$elm_color$Color$hsla,
			hsl.hue,
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, saturationScale, hsl.saturation),
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, lightnessScale, hsl.lightness),
			A3($noahzgordon$elm_color_extra$Color$Manipulate$scale, 1.0, alphaScale, hsl.alpha));
	});
var $rakutentech$r10$R10$Color$Utils$fromLightToDark = function (color) {
	return A2(
		$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
		{alphaScale: 0, lightnessScale: -0.04, saturationScale: -0.17},
		color);
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColorLight_ = function (color) {
	switch (color.$) {
		case 'CrimsonRed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#bf0000'),
				'Hard coded as #bf0000');
		case 'Orange':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#f59600'),
				'Hard coded as #f59600');
		case 'Yellow':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ffcc00'),
				'Hard coded as #ffcc00');
		case 'Green':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#00b900'),
				'Hard coded as #00b900');
		case 'LightBlue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#00a0f0'),
				'Hard coded as #00a0f0');
		case 'Blue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#002896'),
				'Hard coded as #002896');
		case 'Purple':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#7d00be'),
				'Hard coded as #7d00be');
		case 'Pink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#ff008c'),
				'Hard coded as #ff008c');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromHexToColorColor('#117bb4'),
				'Hard coded as #117bb4');
	}
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColorDark_ = function (color) {
	switch (color.$) {
		case 'CrimsonRed':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Orange':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Yellow':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Green':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'LightBlue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Blue':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Purple':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		case 'Pink':
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
		default:
			return _Utils_Tuple2(
				$rakutentech$r10$R10$Color$Utils$fromLightToDark(
					$rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(color).a),
				'Converted from light mode using `R10.Color.Utils.fromLightToDark`');
	}
};
var $rakutentech$r10$R10$Color$Internal$Primary$toColor = function (theme) {
	var _v0 = theme.mode;
	if (_v0.$ === 'Light') {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Primary$toColorLight_(c).a;
		};
	} else {
		return function (c) {
			return $rakutentech$r10$R10$Color$Internal$Primary$toColorDark_(c).a;
		};
	}
};
var $rakutentech$r10$R10$Color$Internal$Derived$primary_ = function (theme) {
	return A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor);
};
var $rakutentech$r10$R10$Color$Internal$Derived$toColor_ = F2(
	function (theme, colorDerived) {
		switch (colorDerived.$) {
			case 'Logo':
				return _Utils_Tuple2(
					function () {
						var _v1 = theme.mode;
						if (_v1.$ === 'Light') {
							return $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
						} else {
							return $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme);
						}
					}(),
					'Logo color is the same as primary color in light mode and `highEmphasis` in dark mode');
			case 'Primary':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$primary_(theme),
					'Just the primary color');
			case 'PrimaryVariant':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: -0.6, lightnessScale: 0, saturationScale: -0.4},
						$rakutentech$r10$R10$Color$Internal$Derived$primary_(theme)),
					'Like the primary, but more subtle');
			case 'FontMediumEmphasis':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_(theme),
					'A color used for fonts when they carry a less important message. It is made changing the alpha channel to 0.6 so the result is that is going to be more similar to the background.');
			case 'FontHighEmphasis':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme),
					'The default color for text. It is made changing the alpha channel to 0.87.');
			case 'FontLink':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontLink),
					'The same as the base `FontLink` color');
			case 'FontAlertDanger':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontAlertDanger),
					'The same as the base `FontAlertDanger` color');
			case 'FontAlertInfo':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontAlertInfo),
					'The same as the base `FontAlertInfo` color');
			case 'FontAlertSuccess':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontAlertSuccess),
					'The same as the base `FontAlertSuccess` color');
			case 'FontAlertWarning':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$FontAlertWarning),
					'The same as the base `FontAlertWarning` color');
			case 'Debugger':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, $rakutentech$r10$R10$Color$Internal$Primary$LightBlue),
					'The same as the base `LightBlue` color');
			case 'FontMediumEmphasisWithMaximumContrast':
				var goesOn = $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
				var color2 = $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasisReversed_(theme);
				var color1 = $rakutentech$r10$R10$Color$Internal$Derived$mediumEmphasis_(theme);
				var colorFont = A2(
					$elm$core$Maybe$withDefault,
					color1,
					A2(
						$rakutentech$r10$R10$Color$Internal$Derived$maximumContrast,
						goesOn,
						_List_fromArray(
							[color1, color2])));
				return _Utils_Tuple2(colorFont, 'A `mediumEmphasis` color for less important text that goes above a primary color');
			case 'FontHighEmphasisWithMaximumContrast':
				var goesOn = $rakutentech$r10$R10$Color$Internal$Derived$primary_(theme);
				var color2 = $rakutentech$r10$R10$Color$Internal$Derived$highEmphasisReversed_(theme);
				var color1 = $rakutentech$r10$R10$Color$Internal$Derived$highEmphasis_(theme);
				var colorFont = A2(
					$elm$core$Maybe$withDefault,
					color1,
					A2(
						$rakutentech$r10$R10$Color$Internal$Derived$maximumContrast,
						goesOn,
						_List_fromArray(
							[color1, color2])));
				return _Utils_Tuple2(colorFont, 'A `highEmphasis` color for regular text that goes above a primary color');
			case 'Border':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Border),
					'Color for borders are hard coded');
			case 'BackgroundPhoneDropdown':
				return _Utils_Tuple2(
					function () {
						var _v2 = theme.mode;
						if (_v2.$ === 'Light') {
							return A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background);
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A special background for the phone dropdown. On `light` mode is the same as the base `Background` but in `dark` mode is lighter 0.05 compared to the base `Background` so that it became visible.');
			case 'Background':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background),
					'The same as the base `Background`.');
			case 'Surface':
				return _Utils_Tuple2(
					function () {
						var _v3 = theme.mode;
						if (_v3.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A color for surfaces above the background, 1dp (See https://material.io/design/color/dark-theme.html#anatomy)');
			case 'Surface2dp':
				return _Utils_Tuple2(
					function () {
						var _v4 = theme.mode;
						if (_v4.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.1,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.1,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A color for surfaces above the background, 2dp (See https://material.io/design/color/dark-theme.html#anatomy)');
			case 'BackgroundInputFieldText':
				return _Utils_Tuple2(
					function () {
						var _v5 = theme.mode;
						if (_v5.$ === 'Light') {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$darken,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						} else {
							return A2(
								$noahzgordon$elm_color_extra$Color$Manipulate$lighten,
								0.05,
								A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background));
						}
					}(),
					'A special background color for input fields. In `light` mode is sligthly darken than normal background. In `dark` mode is sligthly lighten than normal background.');
			case 'BackgroundButtonPrimaryOver':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: 0, lightnessScale: 0.17, saturationScale: -0.15},
						A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor)),
					'The mouse-over color for the primary button obtained adding a `scaleHsl` transformation to the primary color.');
			case 'BackgroundButtonPrimaryDisabledOver':
				return _Utils_Tuple2(
					A2(
						$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
						{alphaScale: 0, lightnessScale: 0.2, saturationScale: 0},
						$rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_(theme)),
					'The mouse-over color for the disabled primary button obtained adding a `scaleHsl` transformation to the primary color that has been already transformed to change it to disabled.');
			case 'BackgroundButtonPrimaryDisabled':
				return _Utils_Tuple2(
					$rakutentech$r10$R10$Color$Internal$Derived$backgroundButtonPrimaryDisabled_(theme),
					'The background color of disabled primary button obtained. This is made making it ligher on Light mode and darker on Dark mode.');
			case 'BackgroundButtonPrimary':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Primary$toColor, theme, theme.primaryColor),
					'Just the primary color, extracted from the `theme`.');
			case 'BackgroundButtonMinorOver':
				return _Utils_Tuple2(
					function (color) {
						var _v6 = theme.mode;
						if (_v6.$ === 'Dark') {
							return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.07, color);
						} else {
							return A2($noahzgordon$elm_color_extra$Color$Manipulate$lighten, 0.03, color);
						}
					}(
						A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$Background)),
					'Background of minors buttons based on the normal background color. Just making it lighter in Dark mode and darker in Light mode');
			case 'BackgroundAlertDanger':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertDanger),
					'The same as the base `BackgroundAlertDanger` color');
			case 'BackgroundAlertInfo':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertInfo),
					'The same as the base `BackgroundAlertInfo` color');
			case 'BackgroundAlertSuccess':
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertSuccess),
					'The same as the base `BackgroundAlertSuccess` color');
			default:
				return _Utils_Tuple2(
					A2($rakutentech$r10$R10$Color$Internal$Base$toColor, theme, $rakutentech$r10$R10$Color$Internal$Base$BackgroundAlertWarning),
					'The same as the base `BackgroundAlertWarning` color');
		}
	});
var $rakutentech$r10$R10$Color$Internal$Derived$toColor = F2(
	function (theme, colorDerived) {
		return A2($rakutentech$r10$R10$Color$Internal$Derived$toColor_, theme, colorDerived).a;
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$Color$AttrsBackground$background = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$Background)));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute = function (a) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return a;
		});
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $lucamug$elm_ui_with_context$Element$WithContext$Font$center = $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute($mdgriffith$elm_ui$Element$Font$center);
var $lucamug$elm_ui_with_context$Element$WithContext$attribute = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return elem;
		});
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $lucamug$elm_ui_with_context$Element$WithContext$centerX = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$centerX);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $lucamug$elm_ui_with_context$Element$WithContext$centerY = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$centerY);
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlJson(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$core$Bitwise$and = _Bitwise_and;
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element = function (a) {
	return {$: 'Element', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes = F2(
	function (context, attrs) {
		return A2(
			$elm$core$List$map,
			function (_v0) {
				var f = _v0.a;
				return f(context);
			},
			attrs);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$run = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer = F3(
	function (container, attrs, children) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			function (context) {
				return A2(
					container,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2(
						$elm$core$List$map,
						$lucamug$elm_ui_with_context$Element$WithContext$Internal$run(context),
						children));
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$column = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$column);
var $rakutentech$r10$R10$Language$EN_US = {$: 'EN_US'};
var $rakutentech$r10$R10$Mode$Light = {$: 'Light'};
var $rakutentech$r10$R10$When$Do = {$: 'Do'};
var $rakutentech$r10$R10$When$do = $rakutentech$r10$R10$When$Do;
var $rakutentech$r10$R10$Theme$fromFlags = function (flags) {
	return {mode: flags.mode, primaryColor: flags.primaryColor};
};
var $rakutentech$r10$R10$Context$isSmallScreen = function (width) {
	return width < 350;
};
var $rakutentech$r10$R10$When$Otherwise = {$: 'Otherwise'};
var $rakutentech$r10$R10$When$otherwise = $rakutentech$r10$R10$When$Otherwise;
var $rakutentech$r10$R10$When$when = F5(
	function (a, _v0, b, _v1, c) {
		return a ? b : c;
	});
var $rakutentech$r10$R10$Context$builder = function (_v0) {
	var model = _v0.model;
	return {
		clientName: model.flags.clientName,
		currentUrl: model.url,
		debugger_transitionSpeed: model.flags.debugger_transitionSpeed,
		device: model.device,
		emailDomainList: model.flags.emailDomainList,
		inputFieldWithLargePattern_fontSize: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model.windowSize.width),
			$rakutentech$r10$R10$When$do,
			35,
			$rakutentech$r10$R10$When$otherwise,
			40),
		inputFieldWithLargePattern_height: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model.windowSize.width),
			$rakutentech$r10$R10$When$do,
			70,
			$rakutentech$r10$R10$When$otherwise,
			80),
		inputFieldWithLargePattern_letterSpacing: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model.windowSize.width),
			$rakutentech$r10$R10$When$do,
			5,
			$rakutentech$r10$R10$When$otherwise,
			10),
		inputFieldWithLargePattern_width: A5(
			$rakutentech$r10$R10$When$when,
			$rakutentech$r10$R10$Context$isSmallScreen(model.windowSize.width),
			$rakutentech$r10$R10$When$do,
			200,
			$rakutentech$r10$R10$When$otherwise,
			240),
		language: model.language,
		referenceExternalServiceName: model.flags.referenceExternalServiceName,
		theme: $rakutentech$r10$R10$Theme$fromFlags(model.flags),
		urlCookiePolicy: model.flags.urlCookiePolicy,
		urlImageFlags: model.urlImageFlags,
		urlPrivacyPolicy: model.flags.urlPrivacyPolicy,
		urlTermsAndConditions: model.flags.urlTermsAndConditions,
		windowSize: {width: model.windowSize.width}
	};
};
var $rakutentech$r10$R10$Device$Android = {$: 'Android'};
var $rakutentech$r10$R10$Device$Firefox = {$: 'Firefox'};
var $rakutentech$r10$R10$Device$IE = {$: 'IE'};
var $rakutentech$r10$R10$Device$IOS = {$: 'IOS'};
var $rakutentech$r10$R10$Device$MacOS = {$: 'MacOS'};
var $rakutentech$r10$R10$Device$Opera = {$: 'Opera'};
var $rakutentech$r10$R10$Device$Other = {$: 'Other'};
var $rakutentech$r10$R10$Device$Safari = {$: 'Safari'};
var $rakutentech$r10$R10$Device$Unknown = {$: 'Unknown'};
var $rakutentech$r10$R10$Device$WindowsPhone = {$: 'WindowsPhone'};
var $rakutentech$r10$R10$Device$constructor = F3(
	function (userAgent, platform, isOntouchendInDocument) {
		var regex = function (string) {
			return A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				A2(
					$elm$regex$Regex$fromStringWith,
					{caseInsensitive: true, multiline: false},
					string));
		};
		var iOSPlatformList = _List_fromArray(
			['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod']);
		var os = A2(
			$elm$regex$Regex$contains,
			regex('windows phone'),
			userAgent) ? $rakutentech$r10$R10$Device$WindowsPhone : (A2(
			$elm$regex$Regex$contains,
			regex('android'),
			userAgent) ? $rakutentech$r10$R10$Device$Android : (A2(
			$elm$core$List$any,
			$elm$core$Basics$eq(platform),
			iOSPlatformList) ? $rakutentech$r10$R10$Device$IOS : (A2($elm$core$String$contains, 'Mac', userAgent) ? (isOntouchendInDocument ? $rakutentech$r10$R10$Device$IOS : $rakutentech$r10$R10$Device$MacOS) : $rakutentech$r10$R10$Device$Other)));
		var browser = (A2($elm$core$String$contains, 'Opera', userAgent) || A2($elm$core$String$contains, 'OPR', userAgent)) ? $rakutentech$r10$R10$Device$Opera : (A2($elm$core$String$contains, 'Chrome', userAgent) ? $rakutentech$r10$R10$Device$Chrome : (A2($elm$core$String$contains, 'Safari', userAgent) ? $rakutentech$r10$R10$Device$Safari : (A2($elm$core$String$contains, 'Firefox', userAgent) ? $rakutentech$r10$R10$Device$Firefox : ((A2($elm$core$String$contains, 'MSIE ', userAgent) || A2(
			$elm$regex$Regex$contains,
			regex('Trident.*rv:11\\.'),
			userAgent)) ? $rakutentech$r10$R10$Device$IE : $rakutentech$r10$R10$Device$Unknown))));
		return {
			browser: browser,
			isSafari10OrIOS10: A2(
				$elm$regex$Regex$contains,
				regex('Macintosh;.*Version\\/10\\.|iPhone OS 10_'),
				userAgent),
			os: os,
			userAgent: userAgent
		};
	});
var $rakutentech$r10$R10$Color$Internal$Primary$Blue = {$: 'Blue'};
var $rakutentech$r10$R10$Color$Internal$Primary$BlueSky = {$: 'BlueSky'};
var $rakutentech$r10$R10$Color$Internal$Primary$CrimsonRed = {$: 'CrimsonRed'};
var $rakutentech$r10$R10$Color$Internal$Primary$Green = {$: 'Green'};
var $rakutentech$r10$R10$Color$Internal$Primary$Orange = {$: 'Orange'};
var $rakutentech$r10$R10$Color$Internal$Primary$Pink = {$: 'Pink'};
var $rakutentech$r10$R10$Color$Internal$Primary$Purple = {$: 'Purple'};
var $rakutentech$r10$R10$Color$Internal$Primary$Yellow = {$: 'Yellow'};
var $rakutentech$r10$R10$Color$primary = {blue: $rakutentech$r10$R10$Color$Internal$Primary$Blue, blueSky: $rakutentech$r10$R10$Color$Internal$Primary$BlueSky, crimsonRed: $rakutentech$r10$R10$Color$Internal$Primary$CrimsonRed, green: $rakutentech$r10$R10$Color$Internal$Primary$Green, lightBlue: $rakutentech$r10$R10$Color$Internal$Primary$LightBlue, orange: $rakutentech$r10$R10$Color$Internal$Primary$Orange, pink: $rakutentech$r10$R10$Color$Internal$Primary$Pink, purple: $rakutentech$r10$R10$Color$Internal$Primary$Purple, red: $rakutentech$r10$R10$Color$Internal$Primary$CrimsonRed, yellow: $rakutentech$r10$R10$Color$Internal$Primary$Yellow};
var $rakutentech$r10$R10$Context$default = {
	contextR10: $rakutentech$r10$R10$Context$builder(
		{
			model: {
				device: A3($rakutentech$r10$R10$Device$constructor, '', '', false),
				flags: {
					clientName: '',
					debugger_formStyleAsString: '',
					debugger_transitionSpeed: 1,
					displayPromoArea: false,
					emailDomainList: _List_fromArray(
						['google.com']),
					isOntouchendInDocument: false,
					mode: $rakutentech$r10$R10$Mode$Light,
					platform: '',
					primaryColor: $rakutentech$r10$R10$Color$primary.blueSky,
					referenceExternalServiceName: '',
					urlCookiePolicy: '',
					urlLogin: '',
					urlPrivacyPolicy: '',
					urlRegistration: '',
					urlTermsAndConditions: '',
					userAgent: ''
				},
				language: $rakutentech$r10$R10$Language$EN_US,
				url: {fragment: $elm$core$Maybe$Nothing, host: '', path: '', port_: $elm$core$Maybe$Nothing, protocol: $elm$url$Url$Https, query: $elm$core$Maybe$Nothing},
				urlImageFlags: 'https://example.com/flags.gif',
				windowSize: {width: 1200}
			}
		})
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $lucamug$elm_ui_with_context$Element$WithContext$fill = $mdgriffith$elm_ui$Element$fill;
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 'FocusStyleOption', a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $lucamug$elm_ui_with_context$Element$WithContext$focusStyle = $mdgriffith$elm_ui$Element$focusStyle;
var $lucamug$elm_ui_with_context$Element$WithContext$height = function (l) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$height(l));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$color = function (clr) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$color(clr));
};
var $rakutentech$r10$R10$Color$Internal$Derived$Border = {$: 'Border'};
var $rakutentech$r10$R10$Color$AttrsBorder$normal = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$Border)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasis = {$: 'FontHighEmphasis'};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$color = function (fontColor) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Font$color(fontColor));
};
var $rakutentech$r10$R10$Color$AttrsFont$normal = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasis)));
	});
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $lucamug$elm_ui_with_context$Element$WithContext$padding = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$padding(x));
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$rounded = function (radius) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$rounded(radius));
};
var $rakutentech$r10$R10$Color$Internal$Derived$Surface = {$: 'Surface'};
var $rakutentech$r10$R10$Color$AttrsBackground$surface = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$Surface)));
	});
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute = function (child) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$htmlAttribute(child));
};
var $elm$core$String$endsWith = _String_endsWith;
var $rakutentech$r10$R10$Transition$parseSubUnit = F2(
	function (ratio, subUnit) {
		if (A2($elm$core$String$endsWith, 'ms', subUnit)) {
			var _v0 = $elm$core$String$toFloat(
				'0' + A2($elm$core$String$dropRight, 2, subUnit));
			if (_v0.$ === 'Just') {
				var value = _v0.a;
				return $elm$core$String$fromFloat(value * ratio) + 'ms';
			} else {
				return subUnit;
			}
		} else {
			if (A2($elm$core$String$endsWith, 's', subUnit)) {
				var _v1 = $elm$core$String$toFloat(
					'0' + A2($elm$core$String$dropRight, 1, subUnit));
				if (_v1.$ === 'Just') {
					var value = _v1.a;
					return $elm$core$String$fromFloat(value * ratio) + 's';
				} else {
					return subUnit;
				}
			} else {
				return subUnit;
			}
		}
	});
var $rakutentech$r10$R10$Transition$parseUnit = F2(
	function (ratio, unit) {
		return A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Transition$parseSubUnit(ratio),
				A2($elm$core$String$split, ' ', unit)));
	});
var $rakutentech$r10$R10$Transition$parseCharacteristics = F2(
	function (ratio, characteristics) {
		return A2(
			$elm$core$String$join,
			',',
			A2(
				$elm$core$List$map,
				$rakutentech$r10$R10$Transition$parseUnit(ratio),
				A2(
					$elm$core$String$split,
					',',
					$elm_community$string_extra$String$Extra$clean(characteristics))));
	});
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $rakutentech$r10$R10$Transition$transition = function (characteristics) {
	return $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'transition',
					A2($rakutentech$r10$R10$Transition$parseCharacteristics, c.contextR10.debugger_transitionSpeed, characteristics)));
		});
};
var $lucamug$elm_ui_with_context$Element$WithContext$width = function (l) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$width(l));
};
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$width = function (v) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$width(v));
};
var $rakutentech$r10$R10$Card$base = _List_fromArray(
	[
		$rakutentech$r10$R10$Color$AttrsBackground$surface,
		$rakutentech$r10$R10$Color$AttrsBorder$normal,
		$rakutentech$r10$R10$Color$AttrsFont$normal,
		$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(10),
		$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Border$color(
				function () {
					var _v0 = c.contextR10.theme.mode;
					if (_v0.$ === 'Light') {
						return A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0.1);
					} else {
						return A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 1, 1, 1, 0.08);
					}
				}());
		}),
		$lucamug$elm_ui_with_context$Element$WithContext$padding(30),
		$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
		$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
		$rakutentech$r10$R10$Transition$transition('background-color 0.8s')
	]);
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$rgba255 = $mdgriffith$elm_ui$Element$rgba255;
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow = function (almostShade) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$shadow(almostShade));
};
var $rakutentech$r10$R10$Card$shadow = function (level) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
		{
			blur: level + 2,
			color: A4($lucamug$elm_ui_with_context$Element$WithContext$rgba255, 0, 0, 0, 0.07),
			offset: _Utils_Tuple2(0, level),
			size: level - 2
		});
};
var $rakutentech$r10$R10$Card$high = _Utils_ap(
	$rakutentech$r10$R10$Card$base,
	_List_fromArray(
		[
			$rakutentech$r10$R10$Card$shadow(8)
		]));
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$layoutWith = F4(
	function (context, options, attrs, _v0) {
		var f = _v0.a;
		return A3(
			$mdgriffith$elm_ui$Element$layoutWith,
			options,
			A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
			f(context));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$Logo = {$: 'Logo'};
var $rakutentech$r10$R10$Color$Svg$logo = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$Logo));
};
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$maximum = $mdgriffith$elm_ui$Element$maximum;
var $rakutentech$r10$R10$FontSize$normalAsInt = 16;
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$size = function (i) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Font$size(i));
};
var $rakutentech$r10$R10$FontSize$normal = $lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FontSize$normalAsInt);
var $rakutentech$r10$R10$Color$Internal$Derived$FontLink = {$: 'FontLink'};
var $rakutentech$r10$R10$Color$AttrsFont$link = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink)));
	});
var $rakutentech$r10$R10$Mode$isLight = function (mode) {
	return _Utils_eq(mode, $rakutentech$r10$R10$Mode$Light);
};
var $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$runAttr,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$Color$AttrsFont$linkOver = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$scaleHsl,
					$rakutentech$r10$R10$Mode$isLight(c.contextR10.theme.mode) ? {alphaScale: 0, lightnessScale: -0.25, saturationScale: 0.3} : {alphaScale: 0, lightnessScale: 0.25, saturationScale: 0.3},
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink))));
	});
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$mouseOver = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$mouseOver(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $rakutentech$r10$R10$Link$transition = $rakutentech$r10$R10$Transition$transition('color .2s ease-out, background-color .2s ease-out');
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.underline);
var $lucamug$elm_ui_with_context$Element$WithContext$Font$underline = $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute($mdgriffith$elm_ui$Element$Font$underline);
var $rakutentech$r10$R10$Link$attrsUnderline = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$Font$underline,
		$rakutentech$r10$R10$Color$AttrsFont$link,
		$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
		_List_fromArray(
			[$rakutentech$r10$R10$Color$AttrsFont$linkOver])),
		$rakutentech$r10$R10$Link$transition
	]);
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $lucamug$elm_ui_with_context$Element$WithContext$Font$bold = $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute($mdgriffith$elm_ui$Element$Font$bold);
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs = F4(
	function (ctor, f, attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			function (context) {
				return A2(
					ctor,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2(f, context, child));
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$el = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$el, $lucamug$elm_ui_with_context$Element$WithContext$Internal$run);
var $lucamug$elm_ui_with_context$Element$WithContext$element = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
		function (_v0) {
			return elem;
		});
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $lucamug$elm_ui_with_context$Element$WithContext$text = function (content) {
	return $lucamug$elm_ui_with_context$Element$WithContext$element(
		$mdgriffith$elm_ui$Element$text(content));
};
var $rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator = function (string) {
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$Font$bold]),
		$lucamug$elm_ui_with_context$Element$WithContext$text(string));
};
var $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator = function (string) {
	return $lucamug$elm_ui_with_context$Element$WithContext$text(string);
};
var $mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Focus,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$focused = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$focused(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $mdgriffith$elm_ui$Element$Border$innerShadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: true, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow = function (almostShade) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attr(
		$mdgriffith$elm_ui$Element$Border$innerShadow(almostShade));
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$newTabLink = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$newTabLink,
	F2(
		function (context, _v0) {
			var url = _v0.url;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				url: url
			};
		}));
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$rgb = $mdgriffith$elm_ui$Element$rgb;
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $rakutentech$r10$R10$SimpleMarkdown$elementLinkGeneratorAdvanced = F3(
	function (attrs, linkLabel, url) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(4),
						$lucamug$elm_ui_with_context$Element$WithContext$focused(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
								{
									blur: 1,
									color: A3($lucamug$elm_ui_with_context$Element$WithContext$rgb, 0.7, 0.7, 0.7),
									offset: _Utils_Tuple2(0, 0),
									size: 1
								})
							])),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$tabindex(0))
					]),
				attrs.link),
			{
				label: $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator(linkLabel),
				url: url
			});
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator = function (string) {
	return $lucamug$elm_ui_with_context$Element$WithContext$text(string);
};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $lucamug$elm_ui_with_context$Element$WithContext$none = $lucamug$elm_ui_with_context$Element$WithContext$element($mdgriffith$elm_ui$Element$none);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $lucamug$elm_ui_with_context$Element$WithContext$px = $mdgriffith$elm_ui$Element$px;
var $rakutentech$r10$R10$SimpleMarkdown$elementBreakLineGenerator = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$el,
	_List_fromArray(
		[
			$lucamug$elm_ui_with_context$Element$WithContext$height(
			$lucamug$elm_ui_with_context$Element$WithContext$px(8)),
			$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
			A2($elm$html$Html$Attributes$style, 'display', 'block'))
		]),
	$lucamug$elm_ui_with_context$Element$WithContext$none);
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownBreakLine = {$: 'MarkDownBreakLine'};
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownText = function (a) {
	return {$: 'MarkDownText', a: a};
};
var $rakutentech$r10$R10$SimpleMarkdown$regexForBreakLine = $elm$regex$Regex$fromString('<br>');
var $elm$regex$Regex$split = _Regex_splitAtMost(_Regex_infinity);
var $rakutentech$r10$R10$SimpleMarkdown$parseBreakLine = function (text) {
	var split = function () {
		var _v0 = $rakutentech$r10$R10$SimpleMarkdown$regexForBreakLine;
		if (_v0.$ === 'Just') {
			var regex = _v0.a;
			return A2($elm$regex$Regex$split, regex, text);
		} else {
			return _List_fromArray(
				[text]);
		}
	}();
	return $elm$core$List$concat(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, splitted) {
					return (_Utils_cmp(
						index,
						$elm$core$List$length(split) - 1) < 0) ? _List_fromArray(
						[
							$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted),
							$rakutentech$r10$R10$SimpleMarkdown$MarkDownBreakLine
						]) : _List_fromArray(
						[
							$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted)
						]);
				}),
			split));
};
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownBold = function (a) {
	return {$: 'MarkDownBold', a: a};
};
var $rakutentech$r10$R10$SimpleMarkdown$markDownParseBoldData = function (data) {
	var text1 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(data));
	return $rakutentech$r10$R10$SimpleMarkdown$MarkDownBold(text1);
};
var $rakutentech$r10$R10$SimpleMarkdown$regexForBold = $elm$regex$Regex$fromString('\\*\\*([^*]*)\\*\\*');
var $rakutentech$r10$R10$SimpleMarkdown$parseTextForBold = function (text) {
	var _v0 = function () {
		var _v1 = $rakutentech$r10$R10$SimpleMarkdown$regexForBold;
		if (_v1.$ === 'Just') {
			var regex = _v1.a;
			return _Utils_Tuple2(
				A2($elm$regex$Regex$find, regex, text),
				A2($elm$regex$Regex$split, regex, text));
		} else {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		}
	}();
	var find = _v0.a;
	var split = _v0.b;
	return $elm$core$List$concat(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, splitted) {
					var maybeGetFinding = A2(
						$elm$core$Maybe$map,
						function (match) {
							return A2(
								$elm$core$List$map,
								function (item_) {
									if (item_.$ === 'Just') {
										var i = item_.a;
										return i;
									} else {
										return '';
									}
								},
								match.submatches);
						},
						A2(
							$elm$core$Array$get,
							index,
							$elm$core$Array$fromList(find)));
					if (maybeGetFinding.$ === 'Just') {
						var getFinding = maybeGetFinding.a;
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted),
								$rakutentech$r10$R10$SimpleMarkdown$markDownParseBoldData(getFinding)
							]);
					} else {
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted)
							]);
					}
				}),
			split));
};
var $rakutentech$r10$R10$SimpleMarkdown$MarkDownLink = F2(
	function (a, b) {
		return {$: 'MarkDownLink', a: a, b: b};
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $rakutentech$r10$R10$SimpleMarkdown$markDownParseLinkData = function (data) {
	var text2 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				$elm$core$List$tail(data))));
	var text1 = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(data));
	return A2($rakutentech$r10$R10$SimpleMarkdown$MarkDownLink, text1, text2);
};
var $rakutentech$r10$R10$SimpleMarkdown$regexForLinks = $elm$regex$Regex$fromString('\\[([^\\[\\]]+)\\]\\(([^()]+)\\)');
var $rakutentech$r10$R10$SimpleMarkdown$parseTextForLinks = function (text) {
	var _v0 = function () {
		var _v1 = $rakutentech$r10$R10$SimpleMarkdown$regexForLinks;
		if (_v1.$ === 'Just') {
			var regex = _v1.a;
			return _Utils_Tuple2(
				A2($elm$regex$Regex$find, regex, text),
				A2($elm$regex$Regex$split, regex, text));
		} else {
			return _Utils_Tuple2(_List_Nil, _List_Nil);
		}
	}();
	var find = _v0.a;
	var split = _v0.b;
	return $elm$core$List$concat(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, splitted) {
					var maybeGetFinding = A2(
						$elm$core$Maybe$map,
						function (match) {
							return A2(
								$elm$core$List$map,
								function (item_) {
									if (item_.$ === 'Just') {
										var i = item_.a;
										return i;
									} else {
										return '';
									}
								},
								match.submatches);
						},
						A2(
							$elm$core$Array$get,
							index,
							$elm$core$Array$fromList(find)));
					if (maybeGetFinding.$ === 'Just') {
						var getFinding = maybeGetFinding.a;
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted),
								$rakutentech$r10$R10$SimpleMarkdown$markDownParseLinkData(getFinding)
							]);
					} else {
						return _List_fromArray(
							[
								$rakutentech$r10$R10$SimpleMarkdown$MarkDownText(splitted)
							]);
					}
				}),
			split));
};
var $rakutentech$r10$R10$SimpleMarkdown$markdown = F4(
	function (boldGenerator, textGenerator, linkGenerator, string) {
		var step1 = $rakutentech$r10$R10$SimpleMarkdown$parseTextForLinks(string);
		var step2 = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (item) {
					if (item.$ === 'MarkDownText') {
						var string_ = item.a;
						return $rakutentech$r10$R10$SimpleMarkdown$parseTextForBold(string_);
					} else {
						return _List_fromArray(
							[item]);
					}
				},
				step1));
		var step3 = $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (item) {
					if (item.$ === 'MarkDownText') {
						var string_ = item.a;
						return $rakutentech$r10$R10$SimpleMarkdown$parseBreakLine(string_);
					} else {
						return _List_fromArray(
							[item]);
					}
				},
				step2));
		return A2(
			$elm$core$List$map,
			function (item) {
				switch (item.$) {
					case 'MarkDownText':
						var text = item.a;
						return textGenerator(text);
					case 'MarkDownBold':
						var text = item.a;
						return boldGenerator(text);
					case 'MarkDownLink':
						var linkLabel = item.a;
						var url = item.b;
						return A2(linkGenerator, linkLabel, url);
					default:
						return $rakutentech$r10$R10$SimpleMarkdown$elementBreakLineGenerator;
				}
			},
			step3);
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementMarkdownAdvanced = F2(
	function (attrs, string) {
		return A4(
			$rakutentech$r10$R10$SimpleMarkdown$markdown,
			$rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator,
			$rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator,
			$rakutentech$r10$R10$SimpleMarkdown$elementLinkGeneratorAdvanced(attrs),
			string);
	});
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$paragraph = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$paragraph);
var $lucamug$elm_ui_with_context$Element$WithContext$spacing = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$spacing(x));
};
var $rakutentech$r10$R10$Paragraph$spacingNormal = 10;
var $rakutentech$r10$R10$Paragraph$normal = F2(
	function (attrs, children) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$FontSize$normal,
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$Paragraph$spacingNormal)
					]),
				attrs),
			children);
	});
var $rakutentech$r10$R10$Paragraph$normalMarkdown = F2(
	function (attrs, string) {
		return A2(
			$rakutentech$r10$R10$Paragraph$normal,
			attrs,
			A2(
				$rakutentech$r10$R10$SimpleMarkdown$elementMarkdownAdvanced,
				{link: $rakutentech$r10$R10$Link$attrsUnderline},
				string));
	});
var $rakutentech$r10$R10$Button$numberPadding = 18;
var $rakutentech$r10$R10$Button$transition = $rakutentech$r10$R10$Transition$transition('color .2s ease-out, background-color .2s ease-out');
var $rakutentech$r10$R10$Button$attrsInCommon = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$padding($rakutentech$r10$R10$Button$numberPadding),
		$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
		$rakutentech$r10$R10$Button$transition,
		$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
		$lucamug$elm_ui_with_context$Element$WithContext$Font$center,
		$rakutentech$r10$R10$FontSize$normal
	]);
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonMinorOver = {$: 'BackgroundButtonMinorOver'};
var $rakutentech$r10$R10$Color$AttrsBackground$buttonMinorOver = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonMinorOver)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimaryDisabled = {$: 'BackgroundButtonPrimaryDisabled'};
var $rakutentech$r10$R10$Color$AttrsBackground$buttonPrimaryDisabled = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimaryDisabled)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$FontMediumEmphasis = {$: 'FontMediumEmphasis'};
var $rakutentech$r10$R10$Color$AttrsFont$buttonPrimaryDisabled = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontMediumEmphasis)));
	});
var $rakutentech$r10$R10$Color$AttrsBorder$buttonSecondary = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$Border)));
	});
var $rakutentech$r10$R10$Button$attrsDisabled = _Utils_ap(
	$rakutentech$r10$R10$Button$attrsInCommon,
	_List_fromArray(
		[
			$rakutentech$r10$R10$Color$AttrsBackground$buttonPrimaryDisabled,
			$rakutentech$r10$R10$Color$AttrsFont$buttonPrimaryDisabled,
			$rakutentech$r10$R10$Color$AttrsBorder$buttonSecondary,
			$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
			_List_fromArray(
				[$rakutentech$r10$R10$Color$AttrsBackground$buttonMinorOver])),
			$lucamug$elm_ui_with_context$Element$WithContext$focused(
			_List_fromArray(
				[$rakutentech$r10$R10$Color$AttrsBackground$buttonMinorOver])),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
			$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
			A2($elm$html$Html$Attributes$style, 'cursor', 'not-allowed'))
		]));
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimary = {$: 'BackgroundButtonPrimary'};
var $rakutentech$r10$R10$Color$AttrsBackground$buttonPrimary = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimary)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasisWithMaximumContrast = {$: 'FontHighEmphasisWithMaximumContrast'};
var $rakutentech$r10$R10$Color$AttrsFont$buttonPrimary = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasisWithMaximumContrast)));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimaryOver = {$: 'BackgroundButtonPrimaryOver'};
var $rakutentech$r10$R10$Color$AttrsBackground$buttonPrimaryOver = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundButtonPrimaryOver)));
	});
var $rakutentech$r10$R10$Button$attrsPrimary = _Utils_ap(
	$rakutentech$r10$R10$Button$attrsInCommon,
	_List_fromArray(
		[
			$rakutentech$r10$R10$Color$AttrsBackground$buttonPrimary,
			$rakutentech$r10$R10$Color$AttrsFont$buttonPrimary,
			$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
			_List_fromArray(
				[$rakutentech$r10$R10$Color$AttrsBackground$buttonPrimaryOver])),
			$lucamug$elm_ui_with_context$Element$WithContext$focused(
			_List_fromArray(
				[$rakutentech$r10$R10$Color$AttrsBackground$buttonPrimaryOver]))
		]));
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$button = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$button,
	F2(
		function (context, _v0) {
			var onPress = _v0.onPress;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				onPress: onPress
			};
		}));
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$link = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$link,
	F2(
		function (context, _v0) {
			var url = _v0.url;
			var label = _v0.label;
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, label),
				url: url
			};
		}));
var $rakutentech$r10$R10$Libu$view = F2(
	function (attrs, args) {
		var _v0 = args.type_;
		switch (_v0.$) {
			case 'Li':
				var url = _v0.a;
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$link,
					attrs,
					{label: args.label, url: url});
			case 'LiNewTab':
				var url = _v0.a;
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
					attrs,
					{label: args.label, url: url});
			case 'LiInternal':
				var url = _v0.a;
				var onClick = _v0.b;
				var preventDefault = function (msg) {
					return A2(
						$elm$html$Html$Events$preventDefaultOn,
						'click',
						$elm$json$Json$Decode$succeed(
							_Utils_Tuple2(msg, true)));
				};
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$link,
					A2(
						$elm$core$List$cons,
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							preventDefault(
								onClick(url))),
						attrs),
					{label: args.label, url: url});
			default:
				var onPress = _v0.a;
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
					attrs,
					{label: args.label, onPress: onPress});
		}
	});
var $rakutentech$r10$R10$Button$primary = F2(
	function (attrsExtra, data) {
		var id = $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
			$elm$html$Html$Attributes$id('prim_' + data.translation.key));
		var attrs = _Utils_eq(
			data.libu,
			$rakutentech$r10$R10$Libu$Bu($elm$core$Maybe$Nothing)) ? $rakutentech$r10$R10$Button$attrsDisabled : A2($elm$core$List$cons, id, $rakutentech$r10$R10$Button$attrsPrimary);
		return A2(
			$rakutentech$r10$R10$Libu$view,
			_Utils_ap(attrs, attrsExtra),
			{label: data.label, type_: data.libu});
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $noahzgordon$elm_color_extra$Color$Convert$cssColorString = F2(
	function (kind, values) {
		return kind + ('(' + (A2($elm$core$String$join, ', ', values) + ')'));
	});
var $noahzgordon$elm_color_extra$Color$Convert$colorToCssRgba = function (cl) {
	var _v0 = $avh4$elm_color$Color$toRgba(cl);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return A2(
		$noahzgordon$elm_color_extra$Color$Convert$cssColorString,
		'rgba',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(red * 255),
				$elm$core$String$fromFloat(green * 255),
				$elm$core$String$fromFloat(blue * 255),
				$elm$core$String$fromFloat(alpha)
			]));
};
var $mdgriffith$elm_ui$Element$toRgb = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $lucamug$elm_ui_with_context$Element$WithContext$toRgb = $mdgriffith$elm_ui$Element$toRgb;
var $rakutentech$r10$R10$Color$Utils$toColorColor = function (elementColor) {
	var _v0 = $lucamug$elm_ui_with_context$Element$WithContext$toRgb(elementColor);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	var alpha = _v0.alpha;
	return $avh4$elm_color$Color$fromRgba(
		{alpha: alpha, blue: blue, green: green, red: red});
};
var $rakutentech$r10$R10$Color$Utils$toCssRgba = function (elementColor) {
	return $noahzgordon$elm_color_extra$Color$Convert$colorToCssRgba(
		$rakutentech$r10$R10$Color$Utils$toColorColor(elementColor));
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $lucamug$elm_ui_with_context$Element$WithContext$html = function (child) {
	return $lucamug$elm_ui_with_context$Element$WithContext$element(
		$mdgriffith$elm_ui$Element$html(child));
};
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$svg$Svg$Attributes$preserveAspectRatio = _VirtualDom_attribute('preserveAspectRatio');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $rakutentech$r10$R10$Svg$Utils$svgSize_ = F2(
	function (viewbox, ySize) {
		var _v0 = A2($elm$core$String$split, ' ', viewbox);
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
			var x = _v0.a;
			var _v1 = _v0.b;
			var y = _v1.a;
			var _v2 = _v1.b;
			var dx = _v2.a;
			var _v3 = _v2.b;
			var dy = _v3.a;
			return A2(
				$elm$core$Maybe$withDefault,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$height(
						$elm$core$String$fromInt(ySize))
					]),
				A5(
					$elm$core$Maybe$map4,
					F4(
						function (_v4, _v5, dx_, dy_) {
							var xSize = (dx_ * ySize) / dy_;
							return _List_fromArray(
								[
									$elm$svg$Svg$Attributes$height(
									$elm$core$String$fromInt(ySize)),
									$elm$svg$Svg$Attributes$width(
									$elm$core$String$fromFloat(xSize))
								]);
						}),
					$elm$core$String$toFloat(x),
					$elm$core$String$toFloat(y),
					$elm$core$String$toFloat(dx),
					$elm$core$String$toFloat(dy)));
		} else {
			return _List_fromArray(
				[
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromInt(ySize))
				]);
		}
	});
var $elm$svg$Svg$Attributes$version = _VirtualDom_attribute('version');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox_ = F3(
	function (viewbox, ySize, listSvg) {
		return A2(
			$elm$svg$Svg$svg,
			_Utils_ap(
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
						A2($elm$html$Html$Attributes$attribute, 'xmlns:xlink', 'http://www.w3.org/1999/xlink'),
						$elm$svg$Svg$Attributes$version('1.1'),
						$elm$svg$Svg$Attributes$preserveAspectRatio('xMinYMin slice'),
						$elm$svg$Svg$Attributes$viewBox(viewbox),
						A2($elm$html$Html$Attributes$attribute, 'focusable', 'false')
					]),
				A2($rakutentech$r10$R10$Svg$Utils$svgSize_, viewbox, ySize)),
			listSvg);
	});
var $rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox = F4(
	function (attrs, viewbox, size, listSvg) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			attrs,
			$lucamug$elm_ui_with_context$Element$WithContext$html(
				A3($rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox_, viewbox, size, listSvg)));
	});
var $rakutentech$r10$R10$Svg$LogosExtra$r10 = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 2370 672',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M1207 129l-150 72-1 62c0 60 0 62 2 62a3071 3071 0 00113-55l3-1v209h-118v100h303V317l-1-261-151 72zM205 211v129h-3l-50 9-51 9h-2v110l53-9 53-9v128h185V419l62-11 61-9 101 89 101 90h256l-4-3-121-108c-93-82-118-105-116-105l208-36h4V82H205v129zm552 3l-1 32a80339 80339 0 00-365 61l-1-62v-63h367v32zM1501 330v248h730V82h-730v248zm466-147l-277 214-4 3V182h141c122 0 141 0 140 1zm79 186v109h-142c-124 0-141 0-140-2a37829 37829 0 00281-216l1 109z')
						]),
					_List_Nil)
				]));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$shrink = $mdgriffith$elm_ui$Element$shrink;
var $rakutentech$r10$R10$FormComponents$Internal$Style$FloatingLabels = {$: 'FloatingLabels'};
var $rakutentech$r10$R10$FormComponents$Internal$Style$default = $rakutentech$r10$R10$FormComponents$Internal$Style$FloatingLabels;
var $rakutentech$r10$R10$Form$defaultStyle = $rakutentech$r10$R10$FormComponents$Internal$Style$default;
var $rakutentech$r10$R10$Form$Internal$Translator$translator = F2(
	function (_v0, validationCode) {
		return A2(
			$elm$core$Maybe$withDefault,
			validationCode,
			A2(
				$elm$core$Dict$get,
				validationCode,
				$elm$core$Dict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatInvalid, 'Invalid email format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.emailFormatValid, 'Valid email format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, 'Invalid format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatValid, 'Valid format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalidCharactersInvalid, 'Cannot contain spaces or special language characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoNumberInvalid, 'Must contain a digit (ex: 1, 2, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoSpecialCharactersInvalid, 'Must contain a special character (ex: !, @, #, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatNoUppercaseInvalid, 'Must contain a capital letter (ex: A, B, etc.)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.hexColorFormatInvalid, 'Invalid hex color'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.jsonFormatInvalid, 'Invalid json format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid, 'Maximum allowed length is {0} characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid, 'Minimum allowed length is {0} characters'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthValid, 'Correct length'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required, 'Required'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.empty, 'Empty'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.requiredField, '(Required)'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.somethingWrong, 'Something wrong'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.equalInvalid, 'Value should be equal'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.valueInvalid, 'This is not a valid selection'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.allOf, 'One of the validations have failed'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.oneOf, 'All of the validations have failed'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.mobileEmailFormatInvalid, 'Incorrect email address format'),
							_Utils_Tuple2($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.mobileEmailDomainInvalid, 'This domain name cannot be used')
						]))));
	});
var $rakutentech$r10$R10$Form$defaultTranslator = $rakutentech$r10$R10$Form$Internal$Translator$translator;
var $avh4$elm_color$Color$scaleFrom255 = function (c) {
	return c / 255;
};
var $avh4$elm_color$Color$rgb255 = F3(
	function (r, g, b) {
		return A4(
			$avh4$elm_color$Color$RgbaSpace,
			$avh4$elm_color$Color$scaleFrom255(r),
			$avh4$elm_color$Color$scaleFrom255(g),
			$avh4$elm_color$Color$scaleFrom255(b),
			1.0);
	});
var $rakutentech$r10$R10$Palette$black = A3($avh4$elm_color$Color$rgb255, 0, 0, 0);
var $rakutentech$r10$R10$Palette$gray = A3($avh4$elm_color$Color$rgb255, 130, 130, 130);
var $rakutentech$r10$R10$Palette$grayLightest = A3($avh4$elm_color$Color$rgb255, 247, 247, 247);
var $rakutentech$r10$R10$Palette$pink = A3($avh4$elm_color$Color$rgb255, 255, 51, 102);
var $rakutentech$r10$R10$Palette$pinkVariant = A3($avh4$elm_color$Color$rgb255, 255, 111, 147);
var $rakutentech$r10$R10$Palette$success = A3($avh4$elm_color$Color$rgb255, 6, 153, 7);
var $rakutentech$r10$R10$Palette$warning = A3($avh4$elm_color$Color$rgb255, 255, 145, 0);
var $rakutentech$r10$R10$Palette$white = A3($avh4$elm_color$Color$rgb255, 255, 255, 255);
var $rakutentech$r10$R10$Palette$light = {background: $rakutentech$r10$R10$Palette$grayLightest, border: $rakutentech$r10$R10$Palette$gray, error: $rakutentech$r10$R10$Palette$warning, onPrimary: $rakutentech$r10$R10$Palette$white, onSurface: $rakutentech$r10$R10$Palette$black, primary: $rakutentech$r10$R10$Palette$pink, primaryVariant: $rakutentech$r10$R10$Palette$pinkVariant, success: $rakutentech$r10$R10$Palette$success, surface: $rakutentech$r10$R10$Palette$white};
var $rakutentech$r10$R10$Form$Internal$Msg$RemoveEntity = function (a) {
	return {$: 'RemoveEntity', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated = {$: 'PretendIsNotYetValidated'};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated = function (a) {
	return {$: 'Validated', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageErr = function (a) {
	return {$: 'MessageErr', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageOk = function (a) {
	return {$: 'MessageOk', a: a};
};
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$regexBracket = function (index) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		A2(
			$elm$regex$Regex$fromStringWith,
			{caseInsensitive: true, multiline: true},
			'\\{' + ($elm$core$String$fromInt(index) + '\\}')));
};
var $rakutentech$r10$R10$Form$Internal$ValidationCode$replacer = F2(
	function (_v0, acc) {
		var index = _v0.a;
		var value = _v0.b;
		return A3(
			$elm$regex$Regex$replace,
			$rakutentech$r10$R10$Form$Internal$ValidationCode$regexBracket(index),
			function (_v1) {
				return value;
			},
			acc);
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$replaceBrackets = F2(
	function (values, target) {
		return A3(
			$elm$core$List$foldl,
			$rakutentech$r10$R10$Form$Internal$ValidationCode$replacer,
			target,
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, values));
	});
var $rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues = F3(
	function (validationCode, bracketsArgs, translator_) {
		var translated = translator_(validationCode);
		return $elm$core$List$isEmpty(bracketsArgs) ? translated : A2($rakutentech$r10$R10$Form$Internal$ValidationCode$replaceBrackets, bracketsArgs, translated);
	});
var $rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage = F2(
	function (validationOutcome, translator) {
		if (validationOutcome.$ === 'MessageOk') {
			var validationCode = validationOutcome.a;
			var validationPayload = validationOutcome.b;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageOk(
				A3($rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues, validationCode, validationPayload, translator));
		} else {
			var validationCode = validationOutcome.a;
			var validationPayload = validationOutcome.b;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$MessageErr(
				A3($rakutentech$r10$R10$Form$Internal$ValidationCode$fromValidationCodeToMessageWithReplacedValues, validationCode, validationPayload, translator));
		}
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
	});
var $rakutentech$r10$R10$Form$Internal$Converter$fromFieldStateValidationToComponentValidation = F4(
	function (maybeValidationSpecs, fieldState, translator, fieldType) {
		var validation = fieldState.validation;
		if (validation.$ === 'NotYetValidated') {
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated;
		} else {
			var listValidationOutcome_ = validation.a;
			var showAlsoPassedValidation = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.showAlsoPassedValidation;
					},
					maybeValidationSpecs));
			var pretendIsNotValidatedIfValid = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.pretendIsNotValidatedIfValid;
					},
					maybeValidationSpecs));
			var isJapanTelCode = A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function (country) {
						return _Utils_eq(country, $rakutentech$r10$R10$Country$Japan);
					},
					A2(
						$elm$core$Maybe$andThen,
						$rakutentech$r10$R10$Country$fromCountryTelCode,
						A2(
							$elm$core$Maybe$map,
							$rakutentech$r10$R10$Country$toCountryTelCode,
							$rakutentech$r10$R10$Country$fromTelephoneAsString(fieldState.value)))));
			var replaceInvalidValieValidationIfJapanPhone = function () {
				var _v13 = _Utils_Tuple2(fieldType, isJapanTelCode);
				if ((_v13.a.$ === 'TypeSpecial') && _v13.b) {
					var specialPhone = _v13.a.a.a;
					return specialPhone.isJapanService ? $elm$core$List$map(
						function (item) {
							if (item.$ === 'MessageErr') {
								var code = item.a;
								var payload = item.b;
								return (_Utils_eq(code, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid) || (_Utils_eq(code, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid) || _Utils_eq(code, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.valueInvalid))) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid, payload) : item;
							} else {
								return item;
							}
						}) : $elm$core$Basics$identity;
				} else {
					return $elm$core$Basics$identity;
				}
			}();
			var ifIsSameMinLenthAndMaxLength = function () {
				var getLengthNumber = function (validationCode) {
					return A2(
						$elm_community$list_extra$List$Extra$findMap,
						function (validationOutcome) {
							if (validationOutcome.$ === 'MessageOk') {
								var validationCode_ = validationOutcome.a;
								var payload = validationOutcome.b;
								return _Utils_eq(validationCode_, validationCode) ? A2(
									$elm$core$Maybe$andThen,
									$elm$core$String$toInt,
									$elm$core$List$head(payload)) : $elm$core$Maybe$Nothing;
							} else {
								var validationCode_ = validationOutcome.a;
								var payload = validationOutcome.b;
								return _Utils_eq(validationCode_, validationCode) ? A2(
									$elm$core$Maybe$andThen,
									$elm$core$String$toInt,
									$elm$core$List$head(payload)) : $elm$core$Maybe$Nothing;
							}
						},
						listValidationOutcome_);
				};
				var _v11 = _Utils_Tuple2(
					getLengthNumber($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid),
					getLengthNumber($rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid));
				if ((_v11.a.$ === 'Just') && (_v11.b.$ === 'Just')) {
					var min = _v11.a.a;
					var max = _v11.b.a;
					return _Utils_eq(min, max);
				} else {
					return false;
				}
			}();
			var hasLengthValidationErr = A2(
				$elm$core$List$any,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageErr') {
						var validationCode = validationOutcome.a;
						return _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid) || _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid);
					} else {
						return false;
					}
				},
				listValidationOutcome_);
			var allLengthValidationOk = A2(
				$elm$core$List$any,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						var validationCode = validationOutcome.a;
						return _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid);
					} else {
						return false;
					}
				},
				listValidationOutcome_) && A2(
				$elm$core$List$any,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						var validationCode = validationOutcome.a;
						return _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid);
					} else {
						return false;
					}
				},
				listValidationOutcome_);
			var replaceLengthValidation = allLengthValidationOk ? A2(
				$elm$core$List$map,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						var validationCode = validationOutcome.a;
						var a = validationOutcome.b;
						return _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageOk, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthValid, a) : validationOutcome;
					} else {
						return validationOutcome;
					}
				},
				listValidationOutcome_) : ((hasLengthValidationErr && ifIsSameMinLenthAndMaxLength) ? A2(
				$elm$core$List$map,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageErr') {
						var validationCode = validationOutcome.a;
						var a = validationOutcome.b;
						return _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid) ? A2($rakutentech$r10$R10$Form$Internal$FieldState$MessageErr, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthExactInvalid, a) : validationOutcome;
					} else {
						return validationOutcome;
					}
				},
				listValidationOutcome_) : listValidationOutcome_);
			var listAllButTwoOkMessages = A2(
				$elm$core$List$filter,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageOk') {
						var validationCode = validationOutcome.a;
						return !A2(
							$elm$core$List$member,
							validationCode,
							_List_fromArray(
								[$rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooSmallInvalid, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.lengthTooLargeInvalid, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.required]));
					} else {
						var validationCode = validationOutcome.a;
						if ((fieldType.$ === 'TypeText') && (fieldType.a.$ === 'TextOnlyDigitsOrDash')) {
							var _v5 = fieldType.a;
							return !(hasLengthValidationErr && _Utils_eq(validationCode, $rakutentech$r10$R10$Form$Internal$Translator$validationCodes.formatInvalid));
						} else {
							return true;
						}
					}
				},
				replaceLengthValidation);
			var listOnlyErrors = A2(
				$elm_community$list_extra$List$Extra$uniqueBy,
				function (validationOutcome) {
					if (validationOutcome.$ === 'MessageErr') {
						var errorMessage = validationOutcome.a;
						return errorMessage;
					} else {
						var errorMessage = validationOutcome.a;
						return errorMessage;
					}
				},
				replaceInvalidValieValidationIfJapanPhone(
					A2(
						$elm$core$List$filter,
						function (validationOutcome) {
							if (validationOutcome.$ === 'MessageOk') {
								return false;
							} else {
								return true;
							}
						},
						listAllButTwoOkMessages)));
			return showAlsoPassedValidation ? $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated(
				A2(
					$elm$core$List$map,
					function (err) {
						return A2($rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage, err, translator);
					},
					listAllButTwoOkMessages)) : ((pretendIsNotValidatedIfValid && (!$elm$core$List$length(listOnlyErrors))) ? $rakutentech$r10$R10$FormComponents$Internal$Validations$PretendIsNotYetValidated : $rakutentech$r10$R10$FormComponents$Internal$Validations$Validated(
				A2(
					$elm$core$List$map,
					function (err) {
						return A2($rakutentech$r10$R10$Form$Internal$Converter$fromValidationOutcomeToValidationMessage, err, translator);
					},
					listOnlyErrors)));
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig = function (entity) {
	if (entity.$ === 'EntityField') {
		var fieldConf = entity.a;
		return fieldConf;
	} else {
		return $rakutentech$r10$R10$Form$Internal$FieldConf$init;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $lucamug$elm_ui_with_context$Element$WithContext$alignTop = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$alignTop);
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $lucamug$elm_ui_with_context$Element$WithContext$attr = function (elem) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (_v0) {
			return elem;
		});
};
var $lucamug$elm_ui_with_context$Element$WithContext$alpha = function (o) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$alpha(o));
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clipY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clipY);
var $lucamug$elm_ui_with_context$Element$WithContext$clipY = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$clipY);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $lucamug$elm_ui_with_context$Element$WithContext$paddingEach = function (paddings) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
		$mdgriffith$elm_ui$Element$paddingEach(paddings));
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList = function (elements) {
	var transition = $rakutentech$r10$R10$Transition$transition('all 0.15s ease-in, opacity 0.15s 0.2s ease-in');
	var wrappedLine = A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$padding(0),
				$lucamug$elm_ui_with_context$Element$WithContext$alpha(0),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'min-height', '0px')),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'max-height', '0px')),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$size(0),
				transition
			]),
		$lucamug$elm_ui_with_context$Element$WithContext$none);
	var expandedLine = $lucamug$elm_ui_with_context$Element$WithContext$el(
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 16, right: 16, top: 6}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
				$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'min-height', '24px')),
				transition,
				$lucamug$elm_ui_with_context$Element$WithContext$clipY,
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$tabindex(-1))
			]));
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$column,
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$alignTop, transition]),
		_Utils_ap(
			A2($elm$core$List$map, expandedLine, elements),
			A2($elm$core$List$repeat, 5, wrappedLine)));
};
var $mdgriffith$elm_ui$Element$fromRgb = function (clr) {
	return A4($mdgriffith$elm_ui$Internal$Model$Rgba, clr.red, clr.green, clr.blue, clr.alpha);
};
var $lucamug$elm_ui_with_context$Element$WithContext$fromRgb = $mdgriffith$elm_ui$Element$fromRgb;
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor = A2($elm$core$Basics$composeR, $avh4$elm_color$Color$toRgba, $lucamug$elm_ui_with_context$Element$WithContext$fromRgb);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$error = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.error;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$row = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$row);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$success = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.success;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$Palette$withOpacity = function (opacity) {
	return A2(
		$elm$core$Basics$composeR,
		$avh4$elm_color$Color$toRgba,
		A2(
			$elm$core$Basics$composeR,
			function (rgba) {
				return _Utils_update(
					rgba,
					{alpha: opacity});
			},
			$avh4$elm_color$Color$fromRgba));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.onSurface));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(1);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.primary;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText = F3(
	function (palette, attrs, maybeHelperText) {
		if (maybeHelperText.$ === 'Just') {
			var helperText = maybeHelperText.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id('ie-flex-fix-320')),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette))
						]),
					attrs),
				A2(
					$rakutentech$r10$R10$SimpleMarkdown$elementMarkdownAdvanced,
					{
						link: _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary(palette))
							])
					},
					helperText));
		} else {
			return $lucamug$elm_ui_with_context$Element$WithContext$none;
		}
	});
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $rakutentech$r10$R10$Svg$Utils$wrapper32 = F3(
	function (attrs, size, listSvg) {
		return A4($rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox, attrs, '0 0 32 32', size, listSvg);
	});
var $rakutentech$r10$R10$Svg$Icons$check = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M30 7l-1.41-1.41L11 23.17 3.41 15.6 2 17l9 9L30 7z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$checkBold = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M9 16.17L5.53 12.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L9 16.17z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$email = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 512 512',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M486.4 59.7H25.6A25.6 25.6 0 000 85.3v341.4a25.6 25.6 0 0025.6 25.6h460.8a25.6 25.6 0 0025.6-25.6V85.3a25.6 25.6 0 00-25.6-25.6zm8.5 367c0 4.7-3.8 8.5-8.5 8.5H25.6a8.5 8.5 0 01-8.5-8.5V85.3c0-4.7 3.8-8.5 8.5-8.5h460.8c4.7 0 8.5 3.8 8.5 8.5v341.4z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M470 93.9c-2.2-.2-4.4.5-6.2 2L267 261.2a17 17 0 01-22 0L48.2 96a8.5 8.5 0 00-11 13L234 274.3a34 34 0 0044 0l196.8-165.4a8.5 8.5 0 00-4.7-15zM164.1 273.1c-3-.6-6.1.4-8.2 2.7l-119.5 128A8.5 8.5 0 1049 415.4l119.5-128a8.5 8.5 0 00-4.3-14.3zM356.1 275.8a8.5 8.5 0 10-12.5 11.6l119.5 128a8.5 8.5 0 0012.5-11.6L356 275.8z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$eye_ban_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M24.5 23.09A18.85 18.85 0 0 0 30 16S26 6 16 6a13.55 13.55 0 0 0-6.8 1.78L3.2 1.8 1.8 3.2l5.7 5.7A18.85 18.85 0 0 0 2 16s4 10 14 10a13.55 13.55 0 0 0 6.8-1.78l5.99 5.98 1.41-1.41zM16 24c-7.1 0-10.72-5.88-11.8-8a16.43 16.43 0 0 1 4.72-5.66l2.91 2.9a5 5 0 0 0 6.92 6.93l2.57 2.57A11.65 11.65 0 0 1 16 24zm1.28-5.3A2.97 2.97 0 0 1 16 19a3 3 0 0 1-3-3 2.97 2.97 0 0 1 .3-1.28zm-2.57-5.4A2.97 2.97 0 0 1 16 13a3 3 0 0 1 3 3 2.97 2.97 0 0 1-.3 1.28l-2-1.99zm5.46 5.45a5 5 0 0 0-6.92-6.92l-2.57-2.57A11.65 11.65 0 0 1 16 8c7.1 0 10.72 5.88 11.8 8a16.43 16.43 0 0 1-4.72 5.66z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$grid = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M6,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM6,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM6,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM16,6c0,1.1 0.9,2 2,2s2,-0.9 2,-2 -0.9,-2 -2,-2 -2,0.9 -2,2zM12,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM18,14c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM18,20c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$keyboardArrowDown = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$notice_generic_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M16 28a2 2 0 0 1-2-2h-2a4 4 0 0 0 8 0h-2a2 2 0 0 1-2 2zm10-8v-8a10 10 0 0 0-20 0v8a2 2 0 0 1-2 2v2h24v-2a2 2 0 0 1-2-2zM7.46 22A3.98 3.98 0 0 0 8 20v-8a8 8 0 0 1 16 0v8a3.98 3.98 0 0 0 .54 2z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$search = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M15.5 14h-.79l-.28-.27c1.2-1.4 1.82-3.31 1.48-5.34-.47-2.78-2.79-5-5.59-5.34-4.23-.52-7.79 3.04-7.27 7.27.34 2.8 2.56 5.12 5.34 5.59 2.03.34 3.94-.28 5.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$Icons$sign_warning_f = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M29.82 25.94L17.25 3.72a1.45 1.45 0 0 0-2.5 0L2.18 25.94A1.4 1.4 0 0 0 3.43 28h25.14a1.4 1.4 0 0 0 1.25-2.06zM15 10h2v9h-2zm1 14a1.5 1.5 0 1 1 1.5-1.5A1.5 1.5 0 0 1 16 24z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil)
				]));
	});
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $rakutentech$r10$R10$Svg$Icons$sign_warning_l = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M29.82 25.94L17.25 3.72a1.45 1.45 0 0 0-2.5 0L2.18 25.94A1.4 1.4 0 0 0 3.43 28h25.14a1.4 1.4 0 0 0 1.25-2.06zM4.44 26L16 5.57 27.56 26z')
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$path,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$d('M15 10h2v9h-2z')
								]),
							_List_Nil),
							A2(
							$elm$svg$Svg$circle,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$cx('16'),
									$elm$svg$Svg$Attributes$cy('22.5'),
									$elm$svg$Svg$Attributes$r('1.5')
								]),
							_List_Nil)
						]))
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_check = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M9 16.2l-3.5-3.5c-.39-.39-1.01-.39-1.4 0-.39.39-.39 1.01 0 1.4l4.19 4.19c.39.39 1.02.39 1.41 0L20.3 7.7c.39-.39.39-1.01 0-1.4-.39-.39-1.01-.39-1.4 0L9 16.2z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_clear = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'2 2 20 20',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Svg$IconsExtra$validation_error = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 24 24',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$icons = {check: $rakutentech$r10$R10$Svg$Icons$check, checkBold: $rakutentech$r10$R10$Svg$IconsExtra$checkBold, combobox_arrow: $rakutentech$r10$R10$Svg$IconsExtra$keyboardArrowDown, eye_ban_l: $rakutentech$r10$R10$Svg$Icons$eye_ban_l, eye_l: $rakutentech$r10$R10$Svg$IconsExtra$email, grid: $rakutentech$r10$R10$Svg$IconsExtra$grid, notice_generic_l: $rakutentech$r10$R10$Svg$Icons$notice_generic_l, search: $rakutentech$r10$R10$Svg$IconsExtra$search, sign_warning_f: $rakutentech$r10$R10$Svg$Icons$sign_warning_f, sign_warning_l: $rakutentech$r10$R10$Svg$Icons$sign_warning_l, validation_check: $rakutentech$r10$R10$Svg$IconsExtra$validation_check, validation_clear: $rakutentech$r10$R10$Svg$IconsExtra$validation_clear, validation_error: $rakutentech$r10$R10$Svg$IconsExtra$validation_error};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveDown = function (y) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveDown(y));
};
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon = F2(
	function (palette, validationIcon) {
		var iconAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(16)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(16)),
				$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
				$lucamug$elm_ui_with_context$Element$WithContext$moveDown(2)
			]);
		switch (validationIcon.$) {
			case 'NoIcon':
				return {invalidIcon: $lucamug$elm_ui_with_context$Element$WithContext$none, validIcon: $lucamug$elm_ui_with_context$Element$WithContext$none};
			case 'ClearOrCheck':
				return {
					invalidIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_clear,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette),
						16),
					validIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_check,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette),
						16)
				};
			default:
				return {
					invalidIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.sign_warning_f,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette),
						16),
					validIcon: A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$icons.validation_check,
						iconAttrs,
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette),
						16)
				};
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationMessage = F3(
	function (palette, validationIcon, validationMessage) {
		if (validationMessage.$ === 'MessageOk') {
			var string = validationMessage.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(6)
					]),
				_List_fromArray(
					[
						A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon, palette, validationIcon).validIcon,
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette))
							]),
						$elm$core$Maybe$Just(string))
					]));
		} else {
			var string = validationMessage.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(6)
					]),
				_List_fromArray(
					[
						A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationIcon, palette, validationIcon).invalidIcon,
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette))
							]),
						$elm$core$Maybe$Just(string))
					]));
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidation = F3(
	function (palette, validationIcon, validation) {
		if (validation.$ === 'PretendIsNotYetValidated') {
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList(_List_Nil);
		} else {
			var listValidationMessage = validation.a;
			return $rakutentech$r10$R10$FormComponents$Internal$Validations$animatedList(
				A2(
					$elm$core$List$map,
					A2($rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidationMessage, palette, validationIcon),
					listValidationMessage));
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$addValidationMessagesUnderTheField = F3(
	function (args, entity, listEl) {
		var validationIcon = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$FormTypes$NoIcon,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validationIcon;
				},
				$rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig(entity).validationSpecs));
		var separate = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(30))
				]),
			_List_Nil);
		var fieldState = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$Form$Internal$FieldState$init,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.fieldsState));
		var fieldConf = $rakutentech$r10$R10$Form$Internal$MakerForView$getFieldConfig(entity);
		var validationView = function (separate_) {
			return _List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					_Utils_ap(
						listEl,
						_List_fromArray(
							[
								separate_,
								A3(
								$rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidation,
								args.palette,
								validationIcon,
								A4(
									$rakutentech$r10$R10$Form$Internal$Converter$fromFieldStateValidationToComponentValidation,
									fieldConf.validationSpecs,
									fieldState,
									args.translator(args.key),
									fieldConf.type_))
							])))
				]);
		};
		if (entity.$ === 'EntityField') {
			var fieldConf_ = entity.a;
			if (_Utils_eq(fieldConf_.id, $rakutentech$r10$R10$Form$Internal$Shared$defaultUsernameFieldKeyString)) {
				return listEl;
			} else {
				var _v1 = fieldConf_.type_;
				if ((_v1.$ === 'TypeText') && (_v1.a.$ === 'TextWithPatternLargeWithoutLabel')) {
					return validationView(separate);
				} else {
					return validationView($lucamug$elm_ui_with_context$Element$WithContext$none);
				}
			}
		} else {
			return validationView($lucamug$elm_ui_with_context$Element$WithContext$none);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$createNearby = F2(
	function (toAttr, _v0) {
		var f = _v0.a;
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
			A2($elm$core$Basics$composeR, f, toAttr));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$behindContent = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$behindContent);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$container = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.54);
var $rakutentech$r10$R10$FormComponents$Internal$UI$borderEntityWithBorder = function (palette) {
	return _List_fromArray(
		[
			$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			$rakutentech$r10$R10$FormComponents$Internal$UI$Color$container(palette)),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5)
		]);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA = function (alpha) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.54 * alpha);
};
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $rakutentech$r10$R10$Form$Internal$Conf$getId = function (entity) {
	switch (entity.$) {
		case 'EntityNormal':
			var entityId = entity.a;
			return entityId;
		case 'EntityWrappable':
			var entityId = entity.a;
			return entityId;
		case 'EntityWithBorder':
			var entityId = entity.a;
			return entityId;
		case 'EntityWithTabs':
			var entityId = entity.a;
			return entityId;
		case 'EntityMulti':
			var entityId = entity.a;
			return entityId;
		case 'EntityField':
			var fieldConf = entity.a;
			return fieldConf.id;
		case 'EntityTitle':
			var titleConf = entity.b;
			return titleConf.title;
		default:
			var titleConf = entity.b;
			return titleConf.title;
	}
};
var $rakutentech$r10$R10$Form$Internal$Key$composeMultiKeys = F2(
	function (key, quantity) {
		return A2(
			$elm$core$List$indexedMap,
			F2(
				function (index, _v0) {
					return A2(
						$rakutentech$r10$R10$Form$Internal$Key$composeKey,
						key,
						$elm$core$String$fromInt(index));
				}),
			A2($elm$core$List$repeat, quantity, _Utils_Tuple0));
	});
var $rakutentech$r10$R10$Form$Internal$Helpers$getMultiActiveKeys = F2(
	function (key, formState) {
		var quantity = A2(
			$elm$core$Maybe$withDefault,
			1,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, formState.multiplicableQuantities));
		var notRemoved = function (newKey) {
			return !A2(
				$elm$core$Set$member,
				$rakutentech$r10$R10$Form$Internal$Key$toString(newKey),
				formState.removed);
		};
		return A2(
			$elm$core$List$filter,
			notRemoved,
			A2($rakutentech$r10$R10$Form$Internal$Key$composeMultiKeys, key, quantity));
	});
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$inFront = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$inFront);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA = function (alpha) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(1 * alpha);
};
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 'MoveX', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveLeft = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveLeft(x));
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey = F2(
	function (args, entity) {
		switch (entity.$) {
			case 'EntityWrappable':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityWithBorder':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityNormal':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityWithTabs':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityMulti':
				var entityId = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, entityId)
					});
			case 'EntityField':
				var fieldConf = entity.a;
				return _Utils_update(
					args,
					{
						key: A2($rakutentech$r10$R10$Form$Internal$Key$composeKey, args.key, fieldConf.id)
					});
			case 'EntityTitle':
				return args;
			default:
				return args;
		}
	});
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $lucamug$elm_ui_with_context$Element$WithContext$paddingXY = F2(
	function (x, y) {
		return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
			A2($mdgriffith$elm_ui$Element$paddingXY, x, y));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$paddingGeneric = A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 20, 25);
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $lucamug$elm_ui_with_context$Element$WithContext$rotate = function (angle) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$rotate(angle));
};
var $mdgriffith$elm_ui$Element$scrollbars = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbars);
var $lucamug$elm_ui_with_context$Element$WithContext$scrollbars = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$scrollbars);
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$spacingXY = F2(
	function (x, y) {
		return $lucamug$elm_ui_with_context$Element$WithContext$attribute(
			A2($mdgriffith$elm_ui$Element$spacingXY, x, y));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric = A2($lucamug$elm_ui_with_context$Element$WithContext$spacingXY, 15, 25);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.surface;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$Form$Internal$MakerForView$isActive = F2(
	function (key, active) {
		if (active.$ === 'Just') {
			var active_x = active.a;
			return _Utils_eq(
				active_x,
				$rakutentech$r10$R10$Form$Internal$Key$toString(key));
		} else {
			return false;
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$isFocused = F2(
	function (key, focused) {
		if (focused.$ === 'Just') {
			var focused_x = focused.a;
			return _Utils_eq(
				focused_x,
				$rakutentech$r10$R10$Form$Internal$Key$toString(key));
		} else {
			return false;
		}
	});
var $rakutentech$r10$R10$Form$Internal$Msg$ChangeValue = F5(
	function (a, b, c, d, e) {
		return {$: 'ChangeValue', a: a, b: b, c: c, d: d, e: e};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$GetFocus = F2(
	function (a, b) {
		return {$: 'GetFocus', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$Hover = F2(
	function (a, b) {
		return {$: 'Hover', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$LoseFocus = F2(
	function (a, b) {
		return {$: 'LoseFocus', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Msg$NoOp = {$: 'NoOp'};
var $rakutentech$r10$R10$Form$Internal$Helpers$boolToString = function (bool) {
	return bool ? 'True' : 'False';
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$isRequired_ = function (maybeValidationSpec) {
	return A2(
		$elm$core$Maybe$withDefault,
		false,
		A2(
			$elm$core$Maybe$map,
			$elm$core$List$member($rakutentech$r10$R10$Form$Internal$FieldConf$Required),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validation;
				},
				maybeValidationSpec)));
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid = F3(
	function (isOptional, value, validation) {
		if (isOptional && $elm_community$string_extra$String$Extra$isBlank(value)) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (validation.$ === 'NotYetValidated') {
				return $elm$core$Maybe$Nothing;
			} else {
				var listValidationMessage = validation.a;
				return $elm$core$Maybe$Just(
					$rakutentech$r10$R10$Form$Internal$FieldState$isValid(listValidationMessage));
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing = 8;
var $rakutentech$r10$R10$I18n$Normal = {$: 'Normal'};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onPrimary = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.onPrimary;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
	A2($rakutentech$r10$R10$Palette$withOpacity, 0, $rakutentech$r10$R10$Palette$black));
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$background = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.background;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.primary));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor = F4(
	function (palette, selected, focused, mouseOver) {
		var _v0 = _Utils_Tuple3(selected, focused, mouseOver);
		_v0$0:
		while (true) {
			if (_v0.b) {
				if (_v0.c) {
					if (_v0.a) {
						break _v0$0;
					} else {
						return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.21, palette);
					}
				} else {
					if (_v0.a) {
						break _v0$0;
					} else {
						return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.14, palette);
					}
				}
			} else {
				if (_v0.a) {
					break _v0$0;
				} else {
					if (_v0.c) {
						return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$background(palette);
					} else {
						return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0, palette);
					}
				}
			}
		}
		return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.21, palette);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize = F2(
	function (_v0, element) {
		var palette = _v0.palette;
		var focused = _v0.focused;
		var disabled = _v0.disabled;
		var size = _v0.size;
		var over = _v0.over;
		var rounded = _v0.rounded;
		var selected = _v0.selected;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(size.x)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(size.y)),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(rounded),
						$rakutentech$r10$R10$Transition$transition('all 0.15s')
					]),
				disabled ? _List_Nil : (over ? _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						A4($rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor, palette, selected, focused, true))
					]) : _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$class('ripple-primary')),
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						A4($rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor, palette, selected, focused, false)),
						$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								A4($rakutentech$r10$R10$FormComponents$Internal$UI$getSelectShadowColor, palette, selected, focused, true))
							]))
					]))),
			element);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$withContext = function (f) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
		function (context) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Internal$run,
				context,
				f(context));
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Binary$checkboxIcon = F2(
	function (args, value) {
		var isSPDevice = function (contextR10) {
			return $rakutentech$r10$R10$Device$isMobileOS(contextR10.device);
		};
		var checkMark = value ? A3(
			$rakutentech$r10$R10$FormComponents$Internal$UI$icons.check,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerX, $lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$rakutentech$r10$R10$FormComponents$Internal$UI$Color$onPrimary(args.palette),
			18) : $lucamug$elm_ui_with_context$Element$WithContext$none;
		var boxBorderAndFill = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$Transition$transition('all 0.2s '),
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(3),
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$centerX
					]),
				value ? _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary(args.palette)),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
						{
							blur: 0,
							color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.25, args.palette),
							offset: _Utils_Tuple2(0, 0),
							size: 0
						})
					]) : _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color($rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
						{
							blur: 0,
							color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.25, args.palette),
							offset: _Utils_Tuple2(0, 0),
							size: 2
						})
					])),
			checkMark);
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return isSPDevice(c.contextR10) ? boxBorderAndFill : A2(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize,
					{
						disabled: args.disabled,
						focused: args.focused,
						over: A2(
							$elm$core$Maybe$withDefault,
							false,
							A2(
								$elm$core$Maybe$map,
								$elm$core$Basics$always(true),
								args.over)),
						palette: args.palette,
						rounded: 4,
						selected: value,
						size: {x: 28, y: 28}
					},
					boxBorderAndFill);
			});
	});
var $rakutentech$r10$R10$Device$isInternetExplorer = function (_v0) {
	var browser = _v0.browser;
	if (browser.$ === 'IE') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveUp = function (y) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveUp(y));
};
var $rakutentech$r10$R10$Color$AttrsFont$normalLighter = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontMediumEmphasis)));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onClick = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onClick(msg));
};
var $elm$html$Html$Events$onFocus = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'focus',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onFocus = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onFocus);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onFocus(msg));
};
var $elm$html$Html$Events$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onLoseFocus = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onBlur);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onLoseFocus(msg));
};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseEnter = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onMouseEnter(msg));
};
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseLeave = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseLeave);
var $lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseLeave = function (msg) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Events$onMouseLeave(msg));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$keyCode = {backspace: 8, del: 46, down: 40, enter: 13, esc: 27, space: 32, up: 38};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$html$Html$Events$keyCode = A2($elm$json$Json$Decode$field, 'keyCode', $elm$json$Json$Decode$int);
var $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch = function (codesMsg) {
	var codesMsgDict = $elm$core$Dict$fromList(codesMsg);
	return A2(
		$elm$html$Html$Events$preventDefaultOn,
		'keydown',
		A2(
			$elm$json$Json$Decode$andThen,
			function (key) {
				var _v0 = A2($elm$core$Dict$get, key, codesMsgDict);
				if (_v0.$ === 'Just') {
					var msg = _v0.a;
					return $elm$json$Json$Decode$succeed(
						_Utils_Tuple2(msg, true));
				} else {
					return $elm$json$Json$Decode$fail('Not code');
				}
			},
			$elm$html$Html$Events$keyCode));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey = function (msg) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
		_List_fromArray(
			[
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter, msg),
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.space, msg)
			]));
};
var $elm$svg$Svg$Attributes$clipRule = _VirtualDom_attribute('clip-rule');
var $rakutentech$r10$R10$Svg$Others$externalLink = F3(
	function (attrs, cl, size) {
		return A4(
			$rakutentech$r10$R10$Svg$Utils$wrapperWithViewbox,
			attrs,
			'0 0 16 16',
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M11 13H2V6.5h1v-1H2a1 1 0 00-1 1V13c0 .6.4 1 1 1h9c.6 0 1-.4 1-1v-1.5h-1V13z'),
							$elm$svg$Svg$Attributes$clipRule('evenodd')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$fillRule('evenodd'),
							$elm$svg$Svg$Attributes$d('M5 4h9V3H5v1zm0 5.5h9V5H5v4.5zM14 2H5a1 1 0 00-1 1v6.5c0 .6.4 1 1 1h9c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1z'),
							$elm$svg$Svg$Attributes$clipRule('evenodd')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$Color$Internal$Derived$FontAlertDanger = {$: 'FontAlertDanger'};
var $rakutentech$r10$R10$Color$Svg$fontAlertDanger = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$FontAlertDanger));
};
var $rakutentech$r10$R10$I18n$isInternalLink = F2(
	function (current, target) {
		return A2($elm$core$String$startsWith, '#', target) ? true : A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (target_) {
					return _Utils_eq(target_.host, current.host) && (_Utils_eq(target_.port_, current.port_) && (_Utils_eq(target_.path, current.path) && (_Utils_eq(target_.protocol, current.protocol) && _Utils_eq(target_.query, current.query))));
				},
				$elm$url$Url$fromString(target)));
	});
var $rakutentech$r10$R10$Color$Svg$link = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$FontLink));
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $rakutentech$r10$R10$I18n$specialMarkdown = F2(
	function (_v0, translationAsString) {
		var tagReplacer = _v0.tagReplacer;
		var renderingMode = _v0.renderingMode;
		var msgNoOp = _v0.msgNoOp;
		var textGenerator = function (string_) {
			return $lucamug$elm_ui_with_context$Element$WithContext$text(string_);
		};
		var elementLabelGenerator = function (string_) {
			return $lucamug$elm_ui_with_context$Element$WithContext$text(string_);
		};
		var linkGenerator = F2(
			function (label, tag) {
				return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						var newTag = function (tag_) {
							return _Utils_eq(tag_, '{' + (tag + '}')) ? tag : tag_;
						}(
							A2(tagReplacer, c, '{' + (tag + '}')));
						var isInternal = A2($rakutentech$r10$R10$I18n$isInternalLink, c.contextR10.currentUrl, newTag);
						var focusedOrOver = function () {
							if (renderingMode.$ === 'Normal') {
								return _List_fromArray(
									[$rakutentech$r10$R10$Color$AttrsFont$linkOver]);
							} else {
								return _List_Nil;
							}
						}();
						if (tag === 'fake_link') {
							if (renderingMode.$ === 'Normal') {
								return A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									$rakutentech$r10$R10$Link$attrsUnderline,
									$lucamug$elm_ui_with_context$Element$WithContext$text(label));
							} else {
								return A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[$lucamug$elm_ui_with_context$Element$WithContext$Font$underline]),
									$lucamug$elm_ui_with_context$Element$WithContext$text(label));
							}
						} else {
							return A2(
								$lucamug$elm_ui_with_context$Element$WithContext$row,
								A2(
									$elm$core$List$cons,
									$lucamug$elm_ui_with_context$Element$WithContext$spacing(5),
									function () {
										if (msgNoOp.$ === 'Just') {
											var msg = msgNoOp.a;
											return _List_fromArray(
												[
													$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
													A2(
														$elm$html$Html$Events$stopPropagationOn,
														'click',
														A2(
															$elm$json$Json$Decode$map,
															function (a) {
																return _Utils_Tuple2(a, true);
															},
															$elm$json$Json$Decode$succeed(msg))))
												]);
										} else {
											return _List_Nil;
										}
									}()),
								_Utils_ap(
									_List_fromArray(
										[
											A2(
											isInternal ? $lucamug$elm_ui_with_context$Element$WithContext$link : $lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
											_Utils_ap(
												_List_Nil,
												_Utils_ap(
													function () {
														if (renderingMode.$ === 'Normal') {
															return $rakutentech$r10$R10$Link$attrsUnderline;
														} else {
															return _List_fromArray(
																[$lucamug$elm_ui_with_context$Element$WithContext$Font$underline]);
														}
													}(),
													_List_fromArray(
														[
															$lucamug$elm_ui_with_context$Element$WithContext$focused(focusedOrOver),
															$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(focusedOrOver),
															$rakutentech$r10$R10$Transition$transition('all 0.15s')
														]))),
											{
												label: elementLabelGenerator(label),
												url: newTag
											})
										]),
									isInternal ? _List_Nil : _List_fromArray(
										[
											A3(
											$rakutentech$r10$R10$Svg$Others$externalLink,
											_List_fromArray(
												[
													$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
													A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle')),
													$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
													{bottom: 0, left: 0, right: 3, top: 0})
												]),
											function () {
												if (renderingMode.$ === 'Normal') {
													return $rakutentech$r10$R10$Color$Svg$link;
												} else {
													return $rakutentech$r10$R10$Color$Svg$fontAlertDanger;
												}
											}()(c.contextR10.theme),
											16)
										])));
						}
					});
			});
		var boldGenerator = function (string_) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[$lucamug$elm_ui_with_context$Element$WithContext$Font$bold]),
				$lucamug$elm_ui_with_context$Element$WithContext$text(string_));
		};
		return A4($rakutentech$r10$R10$SimpleMarkdown$markdown, boldGenerator, textGenerator, linkGenerator, translationAsString);
	});
var $rakutentech$r10$R10$I18n$applySubstitutions = F2(
	function (_v0, translationAsString) {
		var tagReplacer = _v0.tagReplacer;
		var context = _v0.context;
		var renderingMode = _v0.renderingMode;
		var msgNoOp = _v0.msgNoOp;
		return A2(
			$rakutentech$r10$R10$I18n$specialMarkdown,
			{msgNoOp: msgNoOp, renderingMode: renderingMode, tagReplacer: tagReplacer},
			A2(tagReplacer, context, translationAsString));
	});
var $rakutentech$r10$R10$Color$AttrsFont$fontAlertDanger = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Font$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$FontAlertDanger)));
	});
var $rakutentech$r10$R10$FontSize$small = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(14);
var $rakutentech$r10$R10$Paragraph$small = F2(
	function (attrs, children) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$rakutentech$r10$R10$FontSize$small,
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$Paragraph$spacingNormal - 3)
					]),
				attrs),
			children);
	});
var $rakutentech$r10$R10$I18n$paragraphFromString_ = F2(
	function (attrs, _v0) {
		var renderingMode = _v0.renderingMode;
		var tagReplacer = _v0.tagReplacer;
		var string = _v0.string;
		var msgNoOp = _v0.msgNoOp;
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				if (renderingMode.$ === 'Normal') {
					return A2(
						$rakutentech$r10$R10$Paragraph$normal,
						attrs,
						A2(
							$rakutentech$r10$R10$I18n$applySubstitutions,
							{context: c, msgNoOp: msgNoOp, renderingMode: renderingMode, tagReplacer: tagReplacer},
							string));
				} else {
					return A2(
						$rakutentech$r10$R10$Paragraph$small,
						_Utils_ap(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id('ie-flex-fix-320')),
									$rakutentech$r10$R10$Color$AttrsFont$fontAlertDanger
								]),
							attrs),
						A2(
							$rakutentech$r10$R10$I18n$applySubstitutions,
							{context: c, msgNoOp: msgNoOp, renderingMode: renderingMode, tagReplacer: tagReplacer},
							string));
				}
			});
	});
var $rakutentech$r10$R10$I18n$paragraphFromString = F2(
	function (attrs, args) {
		var interim = A2(
			$elm$core$List$map,
			function (subString) {
				return A2(
					$rakutentech$r10$R10$I18n$paragraphFromString_,
					attrs,
					_Utils_update(
						args,
						{string: subString}));
			},
			A2($elm$core$String$split, '\n', args.string));
		var fixFlexIE = function (device) {
			return $rakutentech$r10$R10$Device$isInternetExplorer(device) ? _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'width', '100%'))
				]) : _List_Nil;
		};
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$spacing(10)
							]),
						fixFlexIE(c.contextR10.device)),
					interim);
			});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$pointer = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$pointer);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $lucamug$elm_ui_with_context$Element$WithContext$clip = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$clip);
var $rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_ = function (args) {
	var iconSize = 18;
	var widthPx = args.displayValidation ? (iconSize + 16) : 0;
	return _Utils_eq(
		args.maybeValid,
		$elm$core$Maybe$Just(false)) ? A3(
		$rakutentech$r10$R10$FormComponents$Internal$UI$icons.sign_warning_f,
		_List_fromArray(
			[
				$rakutentech$r10$R10$Transition$transition('width 0.4s'),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
				$lucamug$elm_ui_with_context$Element$WithContext$clip
			]),
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(args.palette),
		iconSize) : A3(
		$rakutentech$r10$R10$FormComponents$Internal$UI$icons.check,
		_List_fromArray(
			[
				$rakutentech$r10$R10$Transition$transition('width 0.4s'),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
				$lucamug$elm_ui_with_context$Element$WithContext$clip
			]),
		$rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(args.palette),
		iconSize);
};
var $rakutentech$r10$R10$FormComponents$Internal$Binary$tagReplacer = F2(
	function (c, string) {
		return A3(
			$elm$core$String$replace,
			'{referenceClientNameOrClientName}',
			$elm$core$String$isEmpty(c.contextR10.referenceExternalServiceName) ? c.contextR10.clientName : c.contextR10.referenceExternalServiceName,
			A3(
				$elm$core$String$replace,
				'{cookie}',
				c.contextR10.urlCookiePolicy,
				A3(
					$elm$core$String$replace,
					'{tac}',
					c.contextR10.urlTermsAndConditions,
					A3($elm$core$String$replace, '{privacy}', c.contextR10.urlPrivacyPolicy, string))));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinaryCheckbox = F2(
	function (attrs, args) {
		var withFillForIE = function (c) {
			return $rakutentech$r10$R10$Device$isInternetExplorer(c.device) ? _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 16px)'))
				]) : _List_Nil;
		};
		var label = _Utils_ap(
			args.label,
			A2($elm$core$Maybe$withDefault, '', args.fieldConf.requiredLabel));
		var elementThatReceiveClicks = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(args.msgOnClick),
				$lucamug$elm_ui_with_context$Element$WithContext$pointer,
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$tabindex(0)),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey(args.msgOnClick)),
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(args.msgOnLoseFocus)
			]);
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$spacing(26)
							]),
						_Utils_ap(
							args.disabled ? _List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.38)
								]) : (args.clickableLabel ? elementThatReceiveClicks : _List_Nil),
							_Utils_ap(
								attrs,
								withFillForIE(c.contextR10)))),
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$row,
						_Utils_ap(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
								]),
							(!_Utils_eq(
								args.fieldConf.id,
								$rakutentech$r10$R10$Form$Internal$Key$toString($rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey))) ? _List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									A2($elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									A2(
										$elm$html$Html$Attributes$attribute,
										'aria-checked',
										args.value ? 'true' : 'false'))
								]) : _List_Nil),
						_List_fromArray(
							[
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_Utils_ap(
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$moveUp(2),
											$lucamug$elm_ui_with_context$Element$WithContext$alignTop
										]),
									args.clickableLabel ? _List_Nil : elementThatReceiveClicks),
								A2($rakutentech$r10$R10$FormComponents$Internal$Binary$checkboxIcon, args, args.value)),
								A2(
								$rakutentech$r10$R10$I18n$paragraphFromString,
								_Utils_ap(
									_List_fromArray(
										[
											$rakutentech$r10$R10$FontSize$small,
											$rakutentech$r10$R10$Color$AttrsFont$normalLighter,
											$lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseEnter(
											args.msgHover(
												$elm$core$Maybe$Just(''))),
											$lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseLeave(
											args.msgHover($elm$core$Maybe$Nothing)),
											$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
											{bottom: 0, left: 12, right: 0, top: 0})
										]),
									withFillForIE(c.contextR10)),
								{
									msgNoOp: $elm$core$Maybe$Just(args.msgNoOp),
									renderingMode: $rakutentech$r10$R10$I18n$Normal,
									string: label,
									tagReplacer: $rakutentech$r10$R10$FormComponents$Internal$Binary$tagReplacer
								}),
								$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
								{
									displayValidation: _Utils_eq(
										args.maybeValid,
										$elm$core$Maybe$Just(false)),
									maybeValid: $elm$core$Maybe$Just(false),
									palette: args.palette,
									style: args.style
								})
							])));
			});
	});
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $lucamug$elm_ui_with_context$Element$WithContext$moveRight = function (x) {
	return $lucamug$elm_ui_with_context$Element$WithContext$attr(
		$mdgriffith$elm_ui$Element$moveRight(x));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariant = A2(
	$elm$core$Basics$composeR,
	function ($) {
		return $.primaryVariant;
	},
	$rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor);
var $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadow = function (_v0) {
	var palette = _v0.palette;
	var focused = _v0.focused;
	var disabled = _v0.disabled;
	var value = _v0.value;
	var over = _v0.over;
	return $rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize(
		{
			disabled: disabled,
			focused: focused,
			over: over,
			palette: palette,
			rounded: 40,
			selected: value,
			size: {x: 40, y: 40}
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinarySwitch = F2(
	function (attrs, args) {
		var _v0 = args.value ? {thumbColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary, trackColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariant} : {
			thumbColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface,
			trackColor: $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.37)
		};
		var trackColor = _v0.trackColor;
		var thumbColor = _v0.thumbColor;
		var thumb = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(24),
					$rakutentech$r10$R10$Transition$transition('all 0.14s '),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					thumbColor(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 2,
						color: trackColor(args.palette),
						offset: _Utils_Tuple2(0, 1),
						size: 1
					})
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var track = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(36),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(36)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(14)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					trackColor(args.palette))
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var _switch = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(56)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(40)),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$rakutentech$r10$R10$Transition$transition('all 0.13s'),
								args.value ? $lucamug$elm_ui_with_context$Element$WithContext$moveRight(16) : $lucamug$elm_ui_with_context$Element$WithContext$moveRight(0)
							]),
						function () {
							var args2 = {
								disabled: args.disabled,
								focused: args.focused,
								over: A2(
									$elm$core$Maybe$withDefault,
									false,
									A2(
										$elm$core$Maybe$map,
										$elm$core$Basics$always(true),
										args.over)),
								palette: args.palette,
								value: args.value
							};
							return A2($rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadow, args2, thumb);
						}())),
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(track)
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(15),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(20))
					]),
				_Utils_ap(
					args.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.38)
						]) : _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(args.msgOnClick),
							$lucamug$elm_ui_with_context$Element$WithContext$pointer,
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(0)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onSelectKey(args.msgOnClick)),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(args.msgOnLoseFocus)
						]),
					attrs)),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(args.label)
						])),
					_switch
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Binary$view = F2(
	function (attrs, args) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = args.typeBinary;
					if (_v0.$ === 'BinarySwitch') {
						return A2($rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinarySwitch, attrs, args);
					} else {
						return A2($rakutentech$r10$R10$FormComponents$Internal$Binary$viewBinaryCheckbox, attrs, args);
					}
				}(),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					args.palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					args.helperText)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary = F4(
	function (args, typeBinary, formConf, maybeMsg) {
		var value = $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(args.fieldState.value);
		var msgOnClick = function (contextR10) {
			if (maybeMsg.$ === 'Just') {
				var msg = maybeMsg.a;
				return msg;
			} else {
				return A5(
					$rakutentech$r10$R10$Form$Internal$Msg$ChangeValue,
					args.key,
					args.fieldConf,
					formConf,
					contextR10,
					$rakutentech$r10$R10$Form$Internal$Helpers$boolToString(!value));
			}
		};
		var isOptional = !$rakutentech$r10$R10$Form$Internal$MakerForView$isRequired_(args.fieldConf.validationSpecs);
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return A2(
					$rakutentech$r10$R10$FormComponents$Internal$Binary$view,
					_List_Nil,
					{
						clickableLabel: args.fieldConf.clickableLabel,
						disabled: args.fieldState.disabled,
						fieldConf: args.fieldConf,
						focused: args.focused,
						helperText: args.fieldConf.helperText,
						label: args.fieldConf.label,
						maybeValid: A3($rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid, isOptional, args.fieldState.value, args.fieldState.validation),
						msgHover: $rakutentech$r10$R10$Form$Internal$Msg$Hover(args.key),
						msgNoOp: $rakutentech$r10$R10$Form$Internal$Msg$NoOp,
						msgOnChange: function (_v0) {
							return msgOnClick(c.contextR10);
						},
						msgOnClick: msgOnClick(c.contextR10),
						msgOnFocus: A2($rakutentech$r10$R10$Form$Internal$Msg$GetFocus, args.key, args.fieldConf),
						msgOnLoseFocus: A2($rakutentech$r10$R10$Form$Internal$Msg$LoseFocus, args.key, args.fieldConf),
						over: args.fieldState.over,
						palette: args.palette,
						style: args.style,
						typeBinary: typeBinary,
						value: value
					});
			});
	});
var $rakutentech$r10$R10$FormTypes$BinaryCheckbox = {$: 'BinaryCheckbox'};
var $rakutentech$r10$R10$Form$Internal$Msg$TogglePasswordShow = function (a) {
	return {$: 'TogglePasswordShow', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Shared$defaultHideShowPasswordCheckboxKey = $rakutentech$r10$R10$Form$Internal$Key$fromString('hide_show_password');
var $rakutentech$r10$R10$Form$Internal$Msg$KeyDown = function (a) {
	return {$: 'KeyDown', a: a};
};
var $rakutentech$r10$R10$Form$Internal$Msg$Submit = function (a) {
	return {$: 'Submit', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$minimum = $mdgriffith$elm_ui$Element$minimum;
var $rakutentech$r10$R10$FormComponents$Internal$TextColors$getLabelColor = function (_v0) {
	var maybeValid = _v0.maybeValid;
	var displayValidation = _v0.displayValidation;
	var palette = _v0.palette;
	var _v1 = _Utils_Tuple2(displayValidation, maybeValid);
	if (_v1.a && (_v1.b.$ === 'Just')) {
		if (_v1.b.a) {
			return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$success(palette);
		} else {
			return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(palette);
		}
	} else {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(palette);
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize = $rakutentech$r10$R10$FontSize$normalAsInt;
var $rakutentech$r10$R10$FormComponents$Internal$UI$floatingLabel = function (args) {
	var requiredEl = function () {
		var _v4 = args.requiredLabel;
		if (_v4.$ === 'Just') {
			var required = _v4.a;
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.7)
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$text(required));
		} else {
			return $lucamug$elm_ui_with_context$Element$WithContext$none;
		}
	}();
	var labelIsAbove = args.focused || (($elm$core$String$length(args.value) > 0) || args.floatingLabelAlwaysUp);
	var labelAboveAttrs = function () {
		var _v3 = args.style;
		if (_v3.$ === 'FixedLabels') {
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 7, left: 16, right: 16, top: 0})
				]);
		} else {
			return labelIsAbove ? _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(8),
					$lucamug$elm_ui_with_context$Element$WithContext$moveUp(23 - 16),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14)
				]) : _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(8),
					$lucamug$elm_ui_with_context$Element$WithContext$moveUp(0 - 16),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize)
				]);
		}
	}();
	var labelEl = A2(
		function () {
			var _v1 = args.style;
			if (_v1.$ === 'FixedLabels') {
				return $lucamug$elm_ui_with_context$Element$WithContext$paragraph;
			} else {
				return $lucamug$elm_ui_with_context$Element$WithContext$row;
			}
		}(),
		_Utils_ap(
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.15s'),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none')),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
					$rakutentech$r10$R10$FormComponents$Internal$TextColors$getLabelColor(args)),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			_Utils_ap(
				function () {
					var _v2 = args.style;
					if (_v2.$ === 'FixedLabels') {
						return _List_Nil;
					} else {
						return labelIsAbove ? _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
							]) : _List_Nil;
					}
				}(),
				labelAboveAttrs)),
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$text(args.label),
				$lucamug$elm_ui_with_context$Element$WithContext$text(
				$elm$core$String$fromList(
					_List_fromArray(
						[
							_Utils_chr(' '),
							$elm$core$Char$fromCode(160),
							_Utils_chr(' ')
						]))),
				requiredEl
			]));
	if ($elm$core$String$isEmpty(args.label) && _Utils_eq(args.requiredLabel, $elm$core$Maybe$Nothing)) {
		return $lucamug$elm_ui_with_context$Element$WithContext$none;
	} else {
		var _v0 = args.style;
		if (_v0.$ === 'FixedLabels') {
			return labelEl;
		} else {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(0))
					]),
				labelEl);
		}
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextHeight = 50;
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$addOnRightKeyDownEvent = F3(
	function (msg, userInput, suggestion) {
		var arrowRight = 39;
		return A2(
			$elm$html$Html$Events$on,
			'keydown',
			A2(
				$elm$json$Json$Decode$andThen,
				function (key) {
					return $elm$json$Json$Decode$succeed(
						_Utils_eq(key, arrowRight) ? msg(suggestion) : msg(userInput));
				},
				$elm$html$Html$Events$keyCode));
	});
var $mdgriffith$elm_ui$Internal$Model$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$Above, element);
};
var $lucamug$elm_ui_with_context$Element$WithContext$above = $lucamug$elm_ui_with_context$Element$WithContext$createNearby($mdgriffith$elm_ui$Element$above);
var $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown = {$: 'BackgroundPhoneDropdown'};
var $rakutentech$r10$R10$Color$AttrsBackground$dropdown = $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown)));
	});
var $rakutentech$r10$R10$Color$AttrsBackground$dropdownHover = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$darken,
					0.01,
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown))));
	});
var $rakutentech$r10$R10$Color$AttrsBackground$dropdownSelected = $lucamug$elm_ui_with_context$Element$WithContext$withContextDecoration(
	function (c) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Background$color(
			$rakutentech$r10$R10$Color$Utils$fromColorColor(
				A2(
					$noahzgordon$elm_color_extra$Color$Manipulate$darken,
					0.03,
					A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$BackgroundPhoneDropdown))));
	});
var $mdgriffith$elm_ui$Internal$Model$Active = {$: 'Active'};
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Active,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $lucamug$elm_ui_with_context$Element$WithContext$mouseDown = function (decs) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Attribute(
		function (context) {
			return $mdgriffith$elm_ui$Element$mouseDown(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var f = _v0.a;
						return f(context);
					},
					decs));
		});
};
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var $lucamug$elm_ui_with_context$Element$WithContext$scrollbarX = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$scrollbarX);
var $rakutentech$r10$R10$Color$AttrsBorder$shadow = function (_v0) {
	var offset = _v0.offset;
	var size = _v0.size;
	var blur = _v0.blur;
	return $lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
				function (color) {
					return {blur: blur, color: color, offset: offset, size: size};
				}(
					$rakutentech$r10$R10$Color$Utils$fromColorColor(
						A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, c.contextR10.theme, $rakutentech$r10$R10$Color$Internal$Derived$Border))));
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$autoSuggestionsAttrs = function (args) {
	var _v0 = _Utils_Tuple2(
		args.maybeEmailSuggestion,
		$rakutentech$r10$R10$Device$isMobileOS(args.device));
	if (_v0.a.$ === 'Just') {
		if (_v0.b) {
			var suggestion = _v0.a.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$above(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$row,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$moveDown(8),
								$lucamug$elm_ui_with_context$Element$WithContext$scrollbarX,
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 15, 12),
								$rakutentech$r10$R10$Color$AttrsBackground$dropdown,
								$rakutentech$r10$R10$Color$AttrsBorder$shadow(
								{
									blur: 2,
									offset: _Utils_Tuple2(0, 0),
									size: 0
								}),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
								$lucamug$elm_ui_with_context$Element$WithContext$mouseDown(
								_List_fromArray(
									[$rakutentech$r10$R10$Color$AttrsBackground$dropdownSelected])),
								$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
								_List_fromArray(
									[$rakutentech$r10$R10$Color$AttrsBackground$dropdownHover])),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'user-select', 'none')),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2(
									$elm$html$Html$Events$preventDefaultOn,
									'mouseup',
									$elm$json$Json$Decode$succeed(
										_Utils_Tuple2(
											args.msgOnChange(
												_Utils_ap(args.value, suggestion)),
											true)))),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2(
									$elm$html$Html$Events$preventDefaultOn,
									'mousedown',
									$elm$json$Json$Decode$succeed(
										_Utils_Tuple2(
											args.msgOnChange(args.value),
											true)))),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'direction', 'rtl'))
							]),
						_List_fromArray(
							[
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'direction', 'ltr'))
									]),
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$text(
										_Utils_ap(args.value, suggestion))
									]))
							])))
				]);
		} else {
			var suggestion = _v0.a.a;
			var suggestionViewWidth = $elm$core$String$fromInt(
				$elm$core$String$length(suggestion) * 10);
			var positionAttrs = _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(20),
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(16)
				]);
			var diffStaticSpaceWidth = '32';
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$row,
						_Utils_ap(
							_List_fromArray(
								[
									$rakutentech$r10$R10$Color$AttrsFont$normalLighter,
									$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
									$lucamug$elm_ui_with_context$Element$WithContext$clip
								]),
							positionAttrs),
						_List_fromArray(
							[
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
										A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0)),
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'max-width', 'calc(100% - ' + (diffStaticSpaceWidth + ('px - ' + (suggestionViewWidth + 'px)')))))
									]),
								$lucamug$elm_ui_with_context$Element$WithContext$text(args.value)),
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_List_Nil,
								$lucamug$elm_ui_with_context$Element$WithContext$text(suggestion))
							]))),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'max-width', 'calc(100% - ' + (suggestionViewWidth + 'px)')))
				]);
		}
	} else {
		if (_v0.b) {
			var _v1 = _v0.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$above(
					A2($lucamug$elm_ui_with_context$Element$WithContext$row, _List_Nil, _List_Nil))
				]);
		} else {
			var _v2 = _v0.a;
			return _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
					A2($lucamug$elm_ui_with_context$Element$WithContext$row, _List_Nil, _List_Nil))
				]);
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 'Nothing') {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 'Nothing') {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 'Height') {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return true;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (label.$ === 'Label') {
		var loc = label.a;
		switch (loc.$) {
			case 'OnRight':
				return false;
			case 'OnLeft':
				return false;
			case 'Above':
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {bottom: -box.bottom, left: -box.left, right: -box.right, top: -box.top};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 'Fill':
				return true;
			case 'Content':
				return false;
			case 'Px':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 'Content':
				return false;
			case 'Px':
				return true;
			case 'Fill':
				return false;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 'Nearby':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			case 'Width':
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						input: A2($elm$core$List$cons, attr, els.input),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : (stacked ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}));
			case 'Height':
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent),
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					}) : _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					})));
			case 'AlignX':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'AlignY':
				return _Utils_update(
					els,
					{
						fullParent: A2($elm$core$List$cons, attr, els.fullParent)
					});
			case 'StyleClass':
				switch (attr.b.$) {
					case 'SpacingStyle':
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent),
								input: A2($elm$core$List$cons, attr, els.input),
								parent: A2($elm$core$List$cons, attr, els.parent),
								wrapper: A2($elm$core$List$cons, attr, els.wrapper)
							});
					case 'PaddingStyle':
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									parent: A2($elm$core$List$cons, attr, els.parent)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									cover: A2($elm$core$List$cons, attr, els.cover),
									input: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.input)),
									parent: A2($elm$core$List$cons, reducedVerticalPadding, els.parent)
								});
						}
					case 'BorderWidth':
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'Transform':
						return _Utils_update(
							els,
							{
								cover: A2($elm$core$List$cons, attr, els.cover),
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
					case 'FontSize':
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					case 'FontFamily':
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								fullParent: A2($elm$core$List$cons, attr, els.fullParent)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								parent: A2($elm$core$List$cons, attr, els.parent)
							});
				}
			case 'NoAttribute':
				return els;
			case 'Attr':
				var a = attr.a;
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Describe':
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
			case 'Class':
				return _Utils_update(
					els,
					{
						parent: A2($elm$core$List$cons, attr, els.parent)
					});
			default:
				return _Utils_update(
					els,
					{
						input: A2($elm$core$List$cons, attr, els.input)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				cover: $elm$core$List$reverse(redist.cover),
				fullParent: $elm$core$List$reverse(redist.fullParent),
				input: $elm$core$List$reverse(redist.input),
				parent: $elm$core$List$reverse(redist.parent),
				wrapper: $elm$core$List$reverse(redist.wrapper)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{cover: _List_Nil, fullParent: _List_Nil, input: _List_Nil, parent: _List_Nil, wrapper: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.type_, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.label),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.type_;
			if (_v7.$ === 'TextInputNode') {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						bottom: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						left: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						right: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						top: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{bottom: 0, left: 0, right: 0, top: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.type_;
				if (_v3.$ === 'TextInputNode') {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.type_;
					if (_v4.$ === 'TextInputNode') {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputText)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.text),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.onChange)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill))
						]),
					redistributed.input)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.type_;
			if (_v0.$ === 'TextArea') {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper)
								])),
						redistributed.parent),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
												redistributed.wrapper)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.text === '') {
											var _v1 = textOptions.placeholder;
											if (_v1.$ === 'Nothing') {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.text === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.text + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.parent,
										function () {
										var _v2 = textOptions.placeholder;
										if (_v2.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.cover, textOptions.text === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.fullParent))),
			textOptions.label,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('current-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$currentPassword = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$currentPassword,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				show: config.show,
				text: config.text
			};
		}));
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$nothingWhenBlank = function (string) {
	if (string === '') {
		return $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Just(string);
	}
};
var $elm$regex$Regex$replaceAtMost = _Regex_replaceAtMost;
var $elm$core$List$sortBy = _List_sortBy;
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$emailDomainAutocomplete = F2(
	function (suggestions, email) {
		var suggestionByPartRegexPrefix = '[REG]';
		var sortAndMatchPartRegexDomain = function (inputValue) {
			var regexStringStartIndex = function (str) {
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$List$head(
						A2($elm$core$String$indexes, '[', str)));
			};
			var regexStringEndIndex = function (str) {
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$List$head(
						A2($elm$core$String$indexes, ']', str)));
			};
			var regexPart = function (str) {
				return function (regStr) {
					return '^' + (regStr + '+');
				}(
					A3(
						$elm$core$String$slice,
						regexStringStartIndex(str),
						regexStringEndIndex(str) + 1,
						str));
			};
			var partRegexDomainList = A2(
				$elm$core$List$filter,
				function (v) {
					return A2($elm$core$String$contains, '[', v) && A2($elm$core$String$contains, ']', v);
				},
				suggestions);
			var domainSuffix = function (str) {
				return A3(
					$elm$core$String$slice,
					regexStringEndIndex(str) + 1,
					$elm$core$String$length(str),
					str);
			};
			var domainPrefix = function (str) {
				return A3(
					$elm$core$String$slice,
					0,
					regexStringStartIndex(str),
					str);
			};
			return A2(
				$elm$core$List$filterMap,
				function (suggestion) {
					var remeaningStringExceptedPrefix = A3(
						$elm$core$String$replace,
						domainPrefix(suggestion),
						'',
						inputValue);
					var regex = A2(
						$elm$core$Maybe$withDefault,
						$elm$regex$Regex$never,
						$elm$regex$Regex$fromString(
							regexPart(suggestion)));
					var remeaningStringExceptedPrefixAndRegexMatched = A4(
						$elm$regex$Regex$replaceAtMost,
						1,
						regex,
						$elm$core$Basics$always(''),
						remeaningStringExceptedPrefix);
					var canMatchedSuffix = A2(
						$elm$core$String$startsWith,
						remeaningStringExceptedPrefixAndRegexMatched,
						domainSuffix(suggestion));
					var canMatchedRegexPart = !$elm$core$List$isEmpty(
						A2($elm$regex$Regex$find, regex, remeaningStringExceptedPrefix));
					return (canMatchedRegexPart && canMatchedSuffix) ? $elm$core$Maybe$Just(
						_Utils_ap(
							suggestionByPartRegexPrefix,
							A2(
								$elm$core$String$dropLeft,
								$elm$core$String$length(remeaningStringExceptedPrefixAndRegexMatched),
								domainSuffix(suggestion)))) : $elm$core$Maybe$Nothing;
				},
				A2(
					$elm$core$List$filter,
					function (suggestion) {
						return A2(
							$elm$core$String$startsWith,
							domainPrefix(suggestion),
							inputValue);
					},
					partRegexDomainList));
		};
		var maybeEmailDomain = A2($elm$core$String$contains, '@', email) ? $elm$core$List$head(
			$elm$core$List$reverse(
				A2($elm$core$String$split, '@', email))) : $elm$core$Maybe$Nothing;
		var hasMultipleAtSymbol = function (len) {
			return len > 1;
		}(
			$elm$core$List$length(
				A2($elm$core$String$indexes, '@', email)));
		var getMatchedLength = F2(
			function (inputValue, suggestionValue) {
				var suggestionValue_ = A2($elm$core$String$dropLeft, 1, suggestionValue);
				return A3(
					$elm$core$String$foldr,
					F2(
						function (_char, _v2) {
							var str = _v2.a;
							var num = _v2.b;
							return A2($elm$core$String$startsWith, str, suggestionValue_) ? _Utils_Tuple2(
								_Utils_ap(
									$elm$core$String$fromChar(_char),
									str),
								$elm$core$String$length(str)) : _Utils_Tuple2(
								_Utils_ap(
									$elm$core$String$fromChar(_char),
									str),
								num);
						}),
					_Utils_Tuple2('', 0),
					inputValue).b;
			});
		var getRemainingString = F2(
			function (inputValue, suggestionValue) {
				return A2($elm$core$String$startsWith, '*.', suggestionValue) ? A2(
					$elm$core$String$dropLeft,
					1 + A2(getMatchedLength, inputValue, suggestionValue),
					suggestionValue) : (A2($elm$core$String$startsWith, suggestionByPartRegexPrefix, suggestionValue) ? A2($elm$core$String$dropLeft, 5, suggestionValue) : A2(
					$elm$core$String$dropLeft,
					$elm$core$String$length(inputValue),
					suggestionValue));
			});
		var sortAndMatchWildcardDomain = function (inputValue) {
			var wildcardDomainList = A2(
				$elm$core$List$filter,
				$elm$core$String$startsWith('*.'),
				suggestions);
			var matchWithSubString = function (str) {
				return A2(
					$elm$core$List$filter,
					function (domain) {
						return A2(
							$elm$core$String$startsWith,
							str,
							A2($elm$core$String$dropLeft, 1, domain));
					},
					wildcardDomainList);
			};
			var fullMatchWithSubString = function (str) {
				return A2(
					$elm$core$List$any,
					function (domain) {
						return _Utils_eq(
							A2($elm$core$String$dropLeft, 1, domain),
							str);
					},
					wildcardDomainList);
			};
			return function (_v1) {
				var matchedDomainList = _v1.b;
				var hasFullMatch = _v1.c;
				return hasFullMatch ? _List_Nil : A2(
					$elm$core$List$sortBy,
					function (v) {
						return 0 - A2(getMatchedLength, inputValue, v);
					},
					$elm_community$list_extra$List$Extra$unique(matchedDomainList));
			}(
				A3(
					$elm$core$String$foldr,
					F2(
						function (_char, _v0) {
							var combString = _v0.a;
							var matchedDomainList = _v0.b;
							var hasFullMatch = _v0.c;
							return _Utils_Tuple3(
								_Utils_ap(
									$elm$core$String$fromChar(_char),
									combString),
								$elm$core$String$isEmpty(combString) ? _List_Nil : _Utils_ap(
									matchWithSubString(combString),
									matchedDomainList),
								(!hasFullMatch) ? fullMatchWithSubString(combString) : true);
						}),
					_Utils_Tuple3('', _List_Nil, false),
					inputValue));
		};
		var fullDomainSuggestions = A2(
			$elm$core$List$filter,
			function (domain) {
				return (!A2($elm$core$String$contains, '*.', domain)) && (!(A2($elm$core$String$contains, '[', domain) && A2($elm$core$String$contains, ']', domain)));
			},
			suggestions);
		var filterWithWildcard = F2(
			function (inputValue, suggestedList) {
				return function (isFullMatched) {
					return isFullMatched ? suggestedList : _Utils_ap(
						suggestedList,
						sortAndMatchWildcardDomain(inputValue));
				}(
					A2(
						$elm$core$Maybe$withDefault,
						false,
						A2(
							$elm$core$Maybe$map,
							function (a) {
								return _Utils_eq(a, inputValue);
							},
							$elm$core$List$head(suggestedList))));
			});
		var filterWithPartRegexDomain = F2(
			function (inputValue, suggestedList) {
				return function (isFullMatched) {
					return isFullMatched ? suggestedList : _Utils_ap(
						suggestedList,
						sortAndMatchPartRegexDomain(inputValue));
				}(
					A2(
						$elm$core$Maybe$withDefault,
						false,
						A2(
							$elm$core$Maybe$map,
							function (a) {
								return _Utils_eq(a, inputValue);
							},
							$elm$core$List$head(suggestedList))));
			});
		var filterStartWithForFullDomain = function (inputValue) {
			return A2(
				$elm$core$List$filter,
				$elm$core$String$startsWith(inputValue),
				fullDomainSuggestions);
		};
		return hasMultipleAtSymbol ? $elm$core$Maybe$Nothing : A2(
			$elm$core$Maybe$andThen,
			function (emailDomain) {
				return A2(
					$elm$core$Maybe$andThen,
					$rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$nothingWhenBlank,
					A2(
						$elm$core$Maybe$map,
						getRemainingString(emailDomain),
						$elm$core$List$head(
							A2(
								filterWithWildcard,
								emailDomain,
								A2(
									filterWithPartRegexDomain,
									emailDomain,
									filterStartWithForFullDomain(emailDomain))))));
			},
			maybeEmailDomain);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$font = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.87);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.border));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$errorA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.error));
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$successA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.success));
	});
var $rakutentech$r10$R10$FormComponents$Internal$TextColors$getBorderColor = function (_v0) {
	var disabled = _v0.disabled;
	var focused = _v0.focused;
	var maybeValid = _v0.maybeValid;
	var displayValidation = _v0.displayValidation;
	var isMouseOver = _v0.isMouseOver;
	var palette = _v0.palette;
	var validationActive = displayValidation && _Utils_eq(
		maybeValid,
		$elm$core$Maybe$Just(false));
	var alpha = ((!disabled) && (focused || (isMouseOver || validationActive))) ? 1 : 0.7;
	var _v1 = _Utils_Tuple3(displayValidation, maybeValid, focused);
	if (_v1.a && (_v1.b.$ === 'Just')) {
		if (_v1.b.a) {
			return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$successA, alpha, palette);
		} else {
			return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$errorA, alpha, palette);
		}
	} else {
		return A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, alpha, palette);
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$getTextfieldBorderSizeOffset = function (_v0) {
	var focused = _v0.focused;
	return focused ? {
		offset: _Utils_Tuple2(0, 0),
		size: 2
	} : {
		offset: _Utils_Tuple2(0, 0),
		size: 1
	};
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$getBorder = function (args) {
	var _v0 = $rakutentech$r10$R10$FormComponents$Internal$UI$getTextfieldBorderSizeOffset(args);
	var offset = _v0.offset;
	var size = _v0.size;
	return $lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
		{
			blur: 0,
			color: $rakutentech$r10$R10$FormComponents$Internal$TextColors$getBorderColor(args),
			offset: offset,
			size: size
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$append = F3(
	function (tokens, input, formatted) {
		append:
		while (true) {
			var maybeToken = $elm$core$List$head(tokens);
			var appendInput = A2(
				$elm$core$Maybe$withDefault,
				formatted,
				A2(
					$elm$core$Maybe$map,
					A2(
						$rakutentech$r10$R10$FormComponents$Internal$Text$append,
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							$elm$core$List$tail(tokens)),
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							$elm$core$List$tail(input))),
					A2(
						$elm$core$Maybe$map,
						function (_char) {
							return _Utils_ap(
								formatted,
								$elm$core$String$fromChar(_char));
						},
						$elm$core$List$head(input))));
			if (maybeToken.$ === 'Nothing') {
				return formatted;
			} else {
				var token = maybeToken.a;
				if (token.$ === 'InputValue') {
					return appendInput;
				} else {
					var _char = token.a;
					var $temp$tokens = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						$elm$core$List$tail(tokens)),
						$temp$input = input,
						$temp$formatted = _Utils_ap(
						formatted,
						$elm$core$String$fromChar(_char));
					tokens = $temp$tokens;
					input = $temp$input;
					formatted = $temp$formatted;
					continue append;
				}
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$format = F2(
	function (tokens, input) {
		return $elm$core$String$isEmpty(input) ? input : A3(
			$rakutentech$r10$R10$FormComponents$Internal$Text$append,
			tokens,
			$elm$core$String$toList(input),
			'');
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$InputValue = {$: 'InputValue'};
var $rakutentech$r10$R10$FormComponents$Internal$Text$Other = function (a) {
	return {$: 'Other', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$tokenize = F2(
	function (_v0, pattern) {
		return A2(
			$elm$core$List$member,
			pattern,
			$elm$core$String$toList('_MYD年月日AG0123456789')) ? $rakutentech$r10$R10$FormComponents$Internal$Text$InputValue : $rakutentech$r10$R10$FormComponents$Internal$Text$Other(pattern);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$parse = F2(
	function (inputChar, pattern) {
		return A2(
			$elm$core$List$map,
			$rakutentech$r10$R10$FormComponents$Internal$Text$tokenize(inputChar),
			$elm$core$String$toList(pattern));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$appendPattern = F2(
	function (template, string) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Text$format,
			A2(
				$rakutentech$r10$R10$FormComponents$Internal$Text$parse,
				_Utils_chr('0'),
				template),
			string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigit = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[^0-9]'));
var $rakutentech$r10$R10$FormComponents$Internal$Text$onlyDigit = function (str) {
	return A3(
		$elm$regex$Regex$replace,
		$rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigit,
		function (_v0) {
			return '';
		},
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar = function (str) {
	return A2(
		$elm$core$String$left,
		$elm$core$String$length(str) - 1,
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitAtTheEnd = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[^0-9]*$'));
var $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingPattern = function (str) {
	return A3(
		$elm$regex$Regex$replace,
		$rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitAtTheEnd,
		function (_v0) {
			return '';
		},
		str);
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$handleWithPatternChange = function (args) {
	var value = A2(
		$rakutentech$r10$R10$FormComponents$Internal$Text$appendPattern,
		args.pattern,
		$rakutentech$r10$R10$FormComponents$Internal$Text$onlyDigit(args.newValue));
	var isDeleteAction = _Utils_eq(
		$rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar(args.oldValue),
		args.newValue);
	return (_Utils_eq(value, args.oldValue) && isDeleteAction) ? $rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingChar(
		$rakutentech$r10$R10$FormComponents$Internal$Text$removeTrailingPattern(value)) : value;
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Label = function (a) {
	return {$: 'Label', a: a};
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden = function (content) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Input$Label(
		function (_v0) {
			return $mdgriffith$elm_ui$Element$Input$labelHidden(content);
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$mobileEmailSupportDomainList = _List_fromArray(
	['@docomo.ne.jp', '@ezweb.ne.jp', '@au.com', '@softbank.ne.jp', '@rakuten.jp', '@rakumail.jp', '@t.vodafone.ne.jp', '@k.vodafone.ne.jp', '@c.vodafone.ne.jp', '@q.vodafone.ne.jp', '@h.vodafone.ne.jp', '@n.vodafone.ne.jp', '@disney.ne.jp', '@d.vodafone.ne.jp', '@r.vodafone.ne.jp', '@s.vodafone.ne.jp', '@jp-t.ne.jp', '@pdx.ne.jp', '@wm.pdx.ne.jp', '@jp-k.ne.jp', '@jp-c.ne.jp', '@dj.pdx.ne.jp', '@di.pdx.ne.jp', '@dk.pdx.ne.jp', '@jp-q.ne.jp', '@jp-n.ne.jp', '@jp-h.ne.jp', '@jp-d.ne.jp', '@jp-r.ne.jp', '@jp-s.ne.jp', '@pipopa.ne.jp', '@moco.ne.jp', '@sky.tkk.ne.jp', '@sky.tkc.ne.jp', '@i.pakeo.ne.jp', '@ido.ne.jp', '@tu-ka.ne.jp', 'biz.ezweb.ne.jp', 'biz.au.com']);
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: $elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$multiline = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$multiline,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				spellcheck: config.spellcheck,
				text: config.text
			};
		}));
var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty('name');
var $mdgriffith$elm_ui$Element$Input$newPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: $elm$core$Maybe$Just('new-password'),
				spellchecked: false,
				type_: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$newPassword = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Input$newPassword,
	F2(
		function (context, config) {
			return {
				label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
				onChange: config.onChange,
				placeholder: A2(
					$elm$core$Maybe$map,
					$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
					config.placeholder),
				show: config.show,
				text: config.text
			};
		}));
var $rakutentech$r10$R10$FormComponents$Internal$UI$onEnter = function (msg) {
	return $rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
		_List_fromArray(
			[
				_Utils_Tuple2($rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter, msg)
			]));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Placeholder = function (a) {
	return {$: 'Placeholder', a: a};
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder = F2(
	function (attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Placeholder(
			function (context) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$placeholder,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, child));
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitOrDash = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('[^0-9-]'));
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper = function (f) {
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
		f,
		F2(
			function (context, config) {
				return {
					label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
					onChange: config.onChange,
					placeholder: A2(
						$elm$core$Maybe$map,
						$lucamug$elm_ui_with_context$Element$WithContext$Input$runPlaceholder(context),
						config.placeholder),
					text: config.text
				};
			}));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$text = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$text);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'letter-spacing', '2px'))
	]);
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Font$family = function (families) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Font$family(families));
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 'Monospace'};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $lucamug$elm_ui_with_context$Element$WithContext$Font$monospace = $mdgriffith$elm_ui$Element$Font$monospace;
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Font$size(c.contextR10.inputFieldWithLargePattern_fontSize);
		}),
		$lucamug$elm_ui_with_context$Element$WithContext$Font$family(
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$Font$monospace])),
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'letter-spacing',
					$elm$core$String$fromInt(c.contextR10.inputFieldWithLargePattern_letterSpacing) + 'px'));
		})
	]);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$centerX,
		$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
		function (c) {
			return $lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(c.contextR10.inputFieldWithLargePattern_width));
		})
	]);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrs = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$Font$size(52),
		$lucamug$elm_ui_with_context$Element$WithContext$Font$family(
		_List_fromArray(
			[$lucamug$elm_ui_with_context$Element$WithContext$Font$monospace])),
		$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
		A2($elm$html$Html$Attributes$style, 'letter-spacing', '10px'))
	]);
var $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrsExtra = _List_fromArray(
	[
		$lucamug$elm_ui_with_context$Element$WithContext$centerX,
		$lucamug$elm_ui_with_context$Element$WithContext$width(
		$lucamug$elm_ui_with_context$Element$WithContext$px(280))
	]);
var $mdgriffith$elm_ui$Element$Input$email = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('email'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('email')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$email = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$email);
var $rakutentech$r10$R10$Device$isChromeAndroid = function (_v0) {
	var os = _v0.os;
	var browser = _v0.browser;
	var _v1 = _Utils_Tuple2(os, browser);
	if ((_v1.a.$ === 'Android') && (_v1.b.$ === 'Chrome')) {
		var _v2 = _v1.a;
		var _v3 = _v1.b;
		return true;
	} else {
		return false;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$toEmailInput = F2(
	function (attrs, args) {
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (context) {
				return ($rakutentech$r10$R10$Device$isChromeDesktop(context.contextR10.device) || $rakutentech$r10$R10$Device$isChromeAndroid(context.contextR10.device)) ? A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
					A2(
						$elm$core$List$cons,
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$attribute, 'autocomplete', 'email')),
						attrs),
					args) : A2($lucamug$elm_ui_with_context$Element$WithContext$Input$email, attrs, args);
			});
	});
var $mdgriffith$elm_ui$Element$Input$username = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: $elm$core$Maybe$Just('username'),
		spellchecked: false,
		type_: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$username = $lucamug$elm_ui_with_context$Element$WithContext$Input$textHelper($mdgriffith$elm_ui$Element$Input$username);
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2 = F2(
	function (args, pattern) {
		var valueWithTrailingPattern = function () {
			if (args.focused || args.floatingLabelAlwaysUp) {
				var lengthDifference = $elm$core$String$length(pattern) - $elm$core$String$length(args.value);
				return _Utils_ap(
					args.value,
					A2($elm$core$String$right, lengthDifference, pattern));
			} else {
				return '';
			}
		}();
		return _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.4),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
								A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0)),
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0)),
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2($elm$html$Html$Attributes$attribute, 'disabled', 'true'))
							]),
						_Utils_ap(
							function () {
								var _v0 = args.textType;
								switch (_v0.$) {
									case 'TextWithPatternLarge':
										return _Utils_ap($rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs, $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra);
									case 'TextWithPattern':
										return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs;
									case 'TextWithPatternLargeWithoutLabel':
										return _Utils_ap($rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrs, $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrsExtra);
									default:
										return _List_Nil;
								}
							}(),
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$moveDown(7),
									$lucamug$elm_ui_with_context$Element$WithContext$moveRight(3)
								]))),
					{
						label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(''),
						onChange: args.msgOnChange,
						placeholder: $elm$core$Maybe$Nothing,
						text: valueWithTrailingPattern
					}))
			]);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern = function (args) {
	var _v0 = args.textType;
	switch (_v0.$) {
		case 'TextWithPattern':
			var pattern = _v0.a;
			return A2($rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2, args, pattern);
		case 'TextWithPatternLarge':
			var pattern = _v0.a;
			return A2($rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2, args, pattern);
		case 'TextWithPatternLargeWithoutLabel':
			var pattern = _v0.a;
			return A2($rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern2, args, pattern);
		default:
			return _List_Nil;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Text$viewInput = F2(
	function (extraAttr, args) {
		var topInputWhenSuggestionAttr = ((!args.focused) && $elm$core$String$isEmpty(args.value)) ? _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'z-index', '1'))
			]) : _List_Nil;
		var name = function () {
			var _v12 = args.textType;
			switch (_v12.$) {
				case 'TextUsername':
					return 'username';
				case 'TextUsernameWithUseEmailCheckbox':
					return 'username';
				case 'TextEmail':
					return 'email';
				case 'TextEmailWithSuggestions':
					return 'email';
				case 'TextPasswordCurrent':
					return 'password';
				case 'TextPasswordNew':
					return 'password';
				default:
					return '';
			}
		}();
		var maybeEmailSuggestion = function (listSuggestions) {
			if (args.focused) {
				var _v11 = args.textType;
				switch (_v11.$) {
					case 'TextEmailWithSuggestions':
						return A2($rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$emailDomainAutocomplete, listSuggestions, args.value);
					case 'TextMobileEmail':
						return A2(
							$rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$emailDomainAutocomplete,
							A2(
								$elm$core$List$map,
								function (domain) {
									return A3($elm$core$String$replace, '@', '', domain);
								},
								listSuggestions),
							args.value);
					default:
						return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var rightKeyDownDetection = function (listSuggestions) {
			var _v10 = maybeEmailSuggestion(listSuggestions);
			if (_v10.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var emailSuggestion = _v10.a;
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						A3(
							$rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$addOnRightKeyDownEvent,
							args.msgOnChange,
							args.value,
							_Utils_ap(args.value, emailSuggestion)))
					]);
			}
		};
		var listenKeyDownAttr = function () {
			var _v9 = args.msgOnKeyDown;
			if (_v9.$ === 'Just') {
				var onKeyDown = _v9.a;
				return _List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						A2(
							$elm$html$Html$Events$stopPropagationOn,
							'keydown',
							A2(
								$elm$json$Json$Decode$map,
								function (x) {
									return _Utils_Tuple2(x, true);
								},
								A2($elm$json$Json$Decode$map, onKeyDown, $elm$html$Html$Events$keyCode))))
					]);
			} else {
				return _List_Nil;
			}
		}();
		var inputDisabledAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$attribute, 'disabled', 'true'))
			]);
		var inputAttrs = _Utils_ap(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'spellcheck', 'false')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'autocorrect', 'off')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$attribute, 'autocapitalize', 'off')),
					$rakutentech$r10$R10$Transition$transition('all 0.15s'),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$name(name)),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$size($rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextFontSize),
					$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color($rakutentech$r10$R10$FormComponents$Internal$UI$Color$transparent),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(args.msgOnFocus),
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 8, left: 16, right: 16, top: 20})
				]),
			_Utils_ap(
				function () {
					var _v5 = args.textType;
					switch (_v5.$) {
						case 'TextWithPatternLarge':
							return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrs;
						case 'TextWithPattern':
							return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternAttrs;
						case 'TextWithPatternLargeWithoutLabel':
							return $rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrs;
						default:
							return _List_Nil;
					}
				}(),
				_Utils_ap(
					function () {
						var _v6 = args.autocomplete;
						if (_v6.$ === 'Nothing') {
							return _List_Nil;
						} else {
							var string = _v6.a;
							return _List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									A2($elm$html$Html$Attributes$attribute, 'autocomplete', string))
								]);
						}
					}(),
					_Utils_ap(
						function () {
							var _v7 = args.msgOnEnter;
							if (_v7.$ === 'Just') {
								var msgOnEnter_ = _v7.a;
								return _List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										$rakutentech$r10$R10$FormComponents$Internal$UI$onEnter(msgOnEnter_))
									]);
							} else {
								return _List_Nil;
							}
						}(),
						_Utils_ap(
							function () {
								var _v8 = args.msgOnLoseFocus;
								if (_v8.$ === 'Just') {
									var msgOnLoseFocus_ = _v8.a;
									return _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(msgOnLoseFocus_)
										]);
								} else {
									return _List_Nil;
								}
							}(),
							_Utils_ap(
								args.disabled ? inputDisabledAttrs : _List_Nil,
								_Utils_ap(
									$rakutentech$r10$R10$FormComponents$Internal$Text$viewBehindPattern(args),
									extraAttr)))))));
		var iconCommonAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$moveDown(0)
			]);
		var displayValidation = !_Utils_eq(args.maybeValid, $elm$core$Maybe$Nothing);
		var styleArgs = {disabled: args.disabled, displayValidation: displayValidation, focused: args.focused, isMouseOver: false, label: args.label, leadingIcon: args.leadingIcon, maybeValid: args.maybeValid, palette: args.palette, requiredLabel: args.requiredLabel, style: args.style, trailingIcon: args.trailingIcon, value: args.value};
		var behavioursTextWithPattern = function (pattern) {
			return {
				label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
				onChange: function (string) {
					return args.msgOnChange(
						$rakutentech$r10$R10$FormComponents$Internal$Text$handleWithPatternChange(
							{newValue: string, oldValue: args.value, pattern: pattern}));
				},
				placeholder: $elm$core$Maybe$Nothing,
				text: args.value
			};
		};
		var behavioursText = {
			label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
			onChange: args.msgOnChange,
			placeholder: function () {
				var _v4 = _Utils_Tuple3(
					!(!$elm$core$String$length(args.value)),
					args.placeholder,
					args.fieldType);
				if ((!_v4.a) && (_v4.b.$ === 'Just')) {
					if ((_v4.c.$ === 'Just') && (_v4.c.a.$ === 'TypeSpecial')) {
						var string = _v4.b.a;
						return $elm$core$Maybe$Just(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$alpha(1)
									]),
								$lucamug$elm_ui_with_context$Element$WithContext$text(string)));
					} else {
						var string = _v4.b.a;
						return $elm$core$Maybe$Just(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$alpha(
										args.focused ? 0 : 1)
									]),
								$lucamug$elm_ui_with_context$Element$WithContext$text(string)));
					}
				} else {
					return $elm$core$Maybe$Just(
						A2($lucamug$elm_ui_with_context$Element$WithContext$Input$placeholder, _List_Nil, $lucamug$elm_ui_with_context$Element$WithContext$none));
				}
			}(),
			text: args.value
		};
		var behavioursTextEmailWithSuggestions = behavioursText;
		var behavioursTextOnlyDigitsOrDash = _Utils_update(
			behavioursText,
			{
				onChange: function (value) {
					return args.msgOnChange(
						A3(
							$elm$regex$Regex$replace,
							$rakutentech$r10$R10$FormComponents$Internal$Text$regexNotDigitOrDash,
							function (_v3) {
								return '';
							},
							value));
				}
			});
		var behavioursPassword = function (show) {
			return {
				label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
				onChange: args.msgOnChange,
				placeholder: $elm$core$Maybe$Nothing,
				show: show,
				text: args.value
			};
		};
		var behavioursMultiline = {
			label: $lucamug$elm_ui_with_context$Element$WithContext$Input$labelHidden(args.label),
			onChange: args.msgOnChange,
			placeholder: $elm$core$Maybe$Nothing,
			spellcheck: false,
			text: args.value
		};
		var _v0 = 12;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$padding(0),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(0)
					]),
				function () {
					var _v1 = args.textType;
					if (_v1.$ === 'TextWithPatternLargeWithoutLabel') {
						return _List_Nil;
					} else {
						return _List_fromArray(
							[
								$rakutentech$r10$R10$FormComponents$Internal$Text$getBorder(styleArgs),
								$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
								_List_fromArray(
									[
										$rakutentech$r10$R10$FormComponents$Internal$Text$getBorder(
										_Utils_update(
											styleArgs,
											{isMouseOver: true}))
									]))
							]);
					}
				}()),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					A2(
						$elm$core$List$map,
						function (icon) {
							return A2($lucamug$elm_ui_with_context$Element$WithContext$el, iconCommonAttrs, icon);
						},
						args.leadingIcon),
					_Utils_ap(
						_List_fromArray(
							[
								function () {
								var _v2 = args.textType;
								switch (_v2.$) {
									case 'TextUsername':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$username,
											_Utils_ap(inputAttrs, topInputWhenSuggestionAttr),
											behavioursText);
									case 'TextUsernameWithUseEmailCheckbox':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$username,
											_Utils_ap(inputAttrs, topInputWhenSuggestionAttr),
											behavioursText);
									case 'TextEmail':
										return A2(
											$rakutentech$r10$R10$FormComponents$Internal$Text$toEmailInput,
											_Utils_ap(inputAttrs, topInputWhenSuggestionAttr),
											behavioursText);
									case 'TextEmailWithSuggestions':
										var listSuggestions = _v2.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$el,
											_Utils_ap(
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
													]),
												rightKeyDownDetection(listSuggestions)),
											$lucamug$elm_ui_with_context$Element$WithContext$withContext(
												function (c) {
													var autoSuggestionsAttrs = $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$autoSuggestionsAttrs(
														{
															device: c.contextR10.device,
															maybeEmailSuggestion: maybeEmailSuggestion(c.contextR10.emailDomainList),
															msgOnChange: args.msgOnChange,
															style: args.style,
															value: args.value
														});
													return A2(
														$rakutentech$r10$R10$FormComponents$Internal$Text$toEmailInput,
														_Utils_ap(
															autoSuggestionsAttrs,
															_Utils_ap(inputAttrs, topInputWhenSuggestionAttr)),
														behavioursTextEmailWithSuggestions);
												}));
									case 'TextMobileEmail':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$el,
											_Utils_ap(
												_List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
													]),
												rightKeyDownDetection($rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$mobileEmailSupportDomainList)),
											$lucamug$elm_ui_with_context$Element$WithContext$withContext(
												function (c) {
													var autoSuggestionsAttrs = $rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$autoSuggestionsAttrs(
														{
															device: c.contextR10.device,
															maybeEmailSuggestion: maybeEmailSuggestion($rakutentech$r10$R10$FormComponents$Internal$EmailAutoSuggest$mobileEmailSupportDomainList),
															msgOnChange: args.msgOnChange,
															style: args.style,
															value: args.value
														});
													return A2(
														$rakutentech$r10$R10$FormComponents$Internal$Text$toEmailInput,
														_Utils_ap(autoSuggestionsAttrs, inputAttrs),
														behavioursTextEmailWithSuggestions);
												}));
									case 'TextPasswordCurrent':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$currentPassword,
											inputAttrs,
											behavioursPassword(args.showPassword));
									case 'TextPasswordNew':
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$newPassword,
											inputAttrs,
											behavioursPassword(args.showPassword));
									case 'TextPlain':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$text, inputAttrs, behavioursText);
									case 'TextMultiline':
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$multiline, inputAttrs, behavioursMultiline);
									case 'TextWithPattern':
										var pattern = _v2.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
											_Utils_ap(inputAttrs, listenKeyDownAttr),
											behavioursTextWithPattern(pattern));
									case 'TextWithPatternLarge':
										var pattern = _v2.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
											_Utils_ap(
												$rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeAttrsExtra,
												_Utils_ap(inputAttrs, listenKeyDownAttr)),
											behavioursTextWithPattern(pattern));
									case 'TextWithPatternLargeWithoutLabel':
										var pattern = _v2.a;
										return A2(
											$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
											_Utils_ap(
												$rakutentech$r10$R10$FormComponents$Internal$Text$textWithPatternLargeWithoutLabelAttrsExtra,
												_Utils_ap(inputAttrs, listenKeyDownAttr)),
											behavioursTextWithPattern(pattern));
									default:
										return A2($lucamug$elm_ui_with_context$Element$WithContext$Input$text, inputAttrs, behavioursTextOnlyDigitsOrDash);
								}
							}()
							]),
						A2(
							$elm$core$List$map,
							function (icon) {
								return A2($lucamug$elm_ui_with_context$Element$WithContext$el, iconCommonAttrs, icon);
							},
							args.trailingIcon)))));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Text$view = F3(
	function (attrs, extraInputAttrs, args) {
		var displayValidation = !_Utils_eq(args.maybeValid, $elm$core$Maybe$Nothing);
		var newArgs = _Utils_update(
			args,
			{
				trailingIcon: function (icons) {
					return _Utils_ap(
						icons,
						_List_fromArray(
							[
								$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
								{displayValidation: displayValidation, maybeValid: args.maybeValid, palette: args.palette, style: args.style})
							]));
				}(args.trailingIcon)
			});
		var _v0 = function () {
			var _v1 = newArgs.textType;
			if (_v1.$ === 'TextWithPatternLargeWithoutLabel') {
				return _Utils_Tuple2('', $elm$core$Maybe$Nothing);
			} else {
				return _Utils_Tuple2(newArgs.label, newArgs.requiredLabel);
			}
		}();
		var label = _v0.a;
		var requiredLabel = _v0.b;
		var styleArgs = {disabled: newArgs.disabled, displayValidation: displayValidation, floatingLabelAlwaysUp: args.floatingLabelAlwaysUp, focused: newArgs.focused, isMouseOver: false, label: label, leadingIcon: newArgs.leadingIcon, maybeValid: args.maybeValid, palette: newArgs.palette, requiredLabel: requiredLabel, style: newArgs.style, trailingIcon: newArgs.trailingIcon, value: newArgs.value};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(0),
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						A2($lucamug$elm_ui_with_context$Element$WithContext$minimum, 150, $lucamug$elm_ui_with_context$Element$WithContext$fill))
					]),
				_Utils_ap(
					function () {
						var _v2 = args.style;
						if (_v2.$ === 'FixedLabels') {
							return _List_Nil;
						} else {
							return _List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$inFront(
									$rakutentech$r10$R10$FormComponents$Internal$UI$floatingLabel(styleArgs))
								]);
						}
					}(),
					_Utils_ap(
						newArgs.disabled ? _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.6)
							]) : _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(1)
							]),
						attrs))),
			_Utils_ap(
				_List_Nil,
				_Utils_ap(
					function () {
						var _v3 = args.style;
						if (_v3.$ === 'FixedLabels') {
							return _List_fromArray(
								[
									$rakutentech$r10$R10$FormComponents$Internal$UI$floatingLabel(styleArgs)
								]);
						} else {
							return _List_Nil;
						}
					}(),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$rakutentech$r10$R10$FormComponents$Internal$Text$viewInput,
								_Utils_ap(
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
											$lucamug$elm_ui_with_context$Element$WithContext$withContextAttribute(
											function (c) {
												return $lucamug$elm_ui_with_context$Element$WithContext$height(
													$lucamug$elm_ui_with_context$Element$WithContext$px(
														function () {
															var _v4 = newArgs.textType;
															switch (_v4.$) {
																case 'TextMultiline':
																	return 200;
																case 'TextWithPatternLarge':
																	return c.contextR10.inputFieldWithLargePattern_height;
																case 'TextWithPatternLargeWithoutLabel':
																	return c.contextR10.inputFieldWithLargePattern_height;
																default:
																	return $rakutentech$r10$R10$FormComponents$Internal$UI$Const$inputTextHeight;
															}
														}()));
											})
										]),
									_Utils_ap(
										function () {
											var _v5 = args.idDom;
											if (_v5.$ === 'Just') {
												var id = _v5.a;
												return _List_fromArray(
													[
														$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
														$elm$html$Html$Attributes$id(id))
													]);
											} else {
												return _List_Nil;
											}
										}(),
										extraInputAttrs)),
								newArgs),
								A3(
								$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
								newArgs.palette,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$spacing(2),
										$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
										$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
										$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
										{bottom: 0, left: 16, right: 16, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
									]),
								newArgs.helperText)
							]),
						function () {
							if (A2($elm$core$String$contains, 'フリガナ', args.label)) {
								var converted = $rakutentech$r10$R10$KatakanaConverter$halfWidthKatakanaAndHiraganaToFullWidthKatakana(args.value);
								var equal = _Utils_eq(args.value, converted);
								return equal ? _List_Nil : _List_fromArray(
									[
										A2(
										$rakutentech$r10$R10$Paragraph$small,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
												{bottom: 0, left: 0, right: 0, top: 15})
											]),
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$text('We will convert this to Full-width Katakana: '),
												A2(
												$lucamug$elm_ui_with_context$Element$WithContext$el,
												_List_fromArray(
													[$lucamug$elm_ui_with_context$Element$WithContext$Font$bold]),
												$lucamug$elm_ui_with_context$Element$WithContext$text(converted)),
												$lucamug$elm_ui_with_context$Element$WithContext$text('. If not correct, use Full-width Katakana directly.')
											]))
									]);
							} else {
								return _List_Nil;
							}
						}()))));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewText = F3(
	function (args, textType, formConf) {
		var value = args.fieldState.value;
		var isOptional = !$rakutentech$r10$R10$Form$Internal$MakerForView$isRequired_(args.fieldConf.validationSpecs);
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Text$view,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width(
							function () {
								var _v1 = args.fieldConf.maxWidth;
								if (_v1.$ === 'Just') {
									var _int = _v1.a;
									return $lucamug$elm_ui_with_context$Element$WithContext$maximum(_int);
								} else {
									return $elm$core$Basics$identity;
								}
							}()(
								function () {
									var _v0 = args.fieldConf.minWidth;
									if (_v0.$ === 'Just') {
										var _int = _v0.a;
										return $lucamug$elm_ui_with_context$Element$WithContext$minimum(_int);
									} else {
										return $elm$core$Basics$identity;
									}
								}()($lucamug$elm_ui_with_context$Element$WithContext$fill))),
							$lucamug$elm_ui_with_context$Element$WithContext$alignTop
						]),
					_List_Nil,
					{
						autocomplete: args.fieldConf.autocomplete,
						disabled: args.fieldState.disabled,
						fieldType: $elm$core$Maybe$Nothing,
						floatingLabelAlwaysUp: function () {
							switch (textType.$) {
								case 'TextWithPatternLarge':
									return true;
								case 'TextWithPatternLargeWithoutLabel':
									return true;
								default:
									return false;
							}
						}(),
						focused: args.focused,
						helperText: args.fieldConf.helperText,
						idDom: args.fieldConf.idDom,
						label: args.fieldConf.label,
						leadingIcon: _List_Nil,
						maybeValid: A3($rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid, isOptional, value, args.fieldState.validation),
						msgOnChange: A4($rakutentech$r10$R10$Form$Internal$Msg$ChangeValue, args.key, args.fieldConf, formConf, c.contextR10),
						msgOnEnter: function () {
							if (textType.$ === 'TextMultiline') {
								return $elm$core$Maybe$Nothing;
							} else {
								return $elm$core$Maybe$Just(
									$rakutentech$r10$R10$Form$Internal$Msg$Submit(formConf));
							}
						}(),
						msgOnFocus: A2($rakutentech$r10$R10$Form$Internal$Msg$GetFocus, args.key, args.fieldConf),
						msgOnKeyDown: $elm$core$Maybe$Just($rakutentech$r10$R10$Form$Internal$Msg$KeyDown),
						msgOnLoseFocus: $elm$core$Maybe$Just(
							A2($rakutentech$r10$R10$Form$Internal$Msg$LoseFocus, args.key, args.fieldConf)),
						msgOnTogglePasswordShow: $elm$core$Maybe$Just(
							$rakutentech$r10$R10$Form$Internal$Msg$TogglePasswordShow(args.key)),
						palette: args.palette,
						placeholder: args.fieldConf.placeholder,
						requiredLabel: args.fieldConf.requiredLabel,
						showPassword: args.fieldState.showPassword,
						style: args.style,
						textType: textType,
						trailingIcon: _List_Nil,
						value: args.fieldState.value
					});
			});
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewPasswordWithHideShowCheckbox = F6(
	function (typeText, makerArgs, args, checkboxLabel, formConf, formState) {
		var checkboxKey = A2(
			$rakutentech$r10$R10$Form$Internal$Key$composeKey,
			$rakutentech$r10$R10$Form$Internal$Shared$defaultHideShowPasswordCheckboxKey,
			$rakutentech$r10$R10$Form$Internal$Key$toString(args.key));
		var checkboxState = function (state) {
			return _Utils_update(
				state,
				{
					value: args.fieldState.showPassword ? 'True' : 'False'
				});
		}(
			A2(
				$elm$core$Maybe$withDefault,
				$rakutentech$r10$R10$Form$Internal$FieldState$init,
				A2($rakutentech$r10$R10$Form$Internal$Dict$get, checkboxKey, formState.fieldsState)));
		var checkboxFocused = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isFocused, checkboxKey, formState.focused);
		var checkboxConf = {
			allowOverMaxLength: true,
			autocomplete: $elm$core$Maybe$Nothing,
			clickableLabel: true,
			helperText: $elm$core$Maybe$Nothing,
			id: $rakutentech$r10$R10$Form$Internal$Key$toString(checkboxKey),
			idDom: $elm$core$Maybe$Just(
				$rakutentech$r10$R10$Form$Internal$Key$toString(checkboxKey)),
			label: checkboxLabel,
			maxWidth: $elm$core$Maybe$Nothing,
			minWidth: $elm$core$Maybe$Nothing,
			placeholder: $elm$core$Maybe$Nothing,
			requiredLabel: $elm$core$Maybe$Nothing,
			type_: $rakutentech$r10$R10$FormTypes$TypeText(typeText),
			validationSpecs: $elm$core$Maybe$Nothing
		};
		var checkboxArgs = {
			active: args.fieldState.showPassword,
			fieldConf: checkboxConf,
			fieldState: checkboxState,
			focused: checkboxFocused,
			key: checkboxKey,
			palette: makerArgs.palette,
			style: makerArgs.style,
			translator: makerArgs.translator(checkboxKey)
		};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(15)
				]),
			_List_fromArray(
				[
					A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewText, args, typeText, formConf),
					A4(
					$rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary,
					checkboxArgs,
					$rakutentech$r10$R10$FormTypes$BinaryCheckbox,
					formConf,
					$elm$core$Maybe$Just(
						$rakutentech$r10$R10$Form$Internal$Msg$TogglePasswordShow(args.key)))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect = function (a) {
	return {$: 'OnOptionSelect', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString = A2($elm$core$Basics$composeR, $elm$core$String$toLower, $elm$core$String$trim);
var $rakutentech$r10$R10$FormComponents$Internal$Single$defaultSearchFn = F2(
	function (search, opt) {
		return A2(
			$elm$core$String$contains,
			$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(search),
			$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(opt.label));
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementLinkGenerator = F2(
	function (linkLabel, url) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$newTabLink,
			_List_Nil,
			{
				label: $rakutentech$r10$R10$SimpleMarkdown$elementLabelGenerator(linkLabel),
				url: url
			});
	});
var $rakutentech$r10$R10$SimpleMarkdown$elementMarkdown = function (string) {
	return A4($rakutentech$r10$R10$SimpleMarkdown$markdown, $rakutentech$r10$R10$SimpleMarkdown$elementBoldGenerator, $rakutentech$r10$R10$SimpleMarkdown$elementTextGenerator, $rakutentech$r10$R10$SimpleMarkdown$elementLinkGenerator, string);
};
var $elm_community$string_extra$String$Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return _Utils_ap(
			A3($elm$core$String$slice, 0, start, string),
			_Utils_ap(
				substitution,
				A3(
					$elm$core$String$slice,
					end,
					$elm$core$String$length(string),
					string)));
	});
var $elm_community$string_extra$String$Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4($elm_community$string_extra$String$Extra$replaceSlice, insert, pos, pos, string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti = F3(
	function (insert, positions, string) {
		var insertLen = $elm$core$String$length(insert);
		var insertAtOffset = F2(
			function (pos, _v0) {
				var str = _v0.str;
				var offset = _v0.offset;
				return {
					offset: offset + insertLen,
					str: A3($elm_community$string_extra$String$Extra$insertAt, insert, pos + offset, str)
				};
			});
		return A3(
			$elm$core$List$foldl,
			insertAtOffset,
			{offset: 0, str: string},
			positions).str;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$insertBold = F2(
	function (indexes, string) {
		return A3($rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti, '**', indexes, string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$defaultViewOptionEl = F2(
	function (_v0, _v1) {
		var search = _v0.search;
		var msgOnSelect = _v0.msgOnSelect;
		var label = _v1.label;
		var value = _v1.value;
		var insertPositions = A2(
			$elm$core$List$concatMap,
			function (idx) {
				return _List_fromArray(
					[
						idx,
						idx + $elm$core$String$length(search)
					]);
			},
			A2(
				$elm$core$String$indexes,
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(search),
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(label)));
		var withBold = $elm$core$List$isEmpty(insertPositions) ? label : A2($rakutentech$r10$R10$FormComponents$Internal$Single$insertBold, insertPositions, label);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '0')),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
					msgOnSelect(value)),
					$lucamug$elm_ui_with_context$Element$WithContext$pointer,
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 12, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'mask-image', 'linear-gradient(right, rgba(255,255,0,0), rgba(255,255,0, 1) 16px)')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, '-webkit-mask-image', '-webkit-linear-gradient(right, rgba(255,255,0,0) 10px, rgba(255,255,0, 1) 16px)'))
				]),
			$rakutentech$r10$R10$SimpleMarkdown$elementMarkdown(withBold));
	});
var $rakutentech$r10$R10$Form$Internal$Shared$flagIconPositions = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'MX',
			_Utils_Tuple2(-112, -144)),
			_Utils_Tuple2(
			'CZ',
			_Utils_Tuple2(-48, -48)),
			_Utils_Tuple2(
			'GY',
			_Utils_Tuple2(-144, -80)),
			_Utils_Tuple2(
			'UZ',
			_Utils_Tuple2(-16, -224)),
			_Utils_Tuple2(
			'GL',
			_Utils_Tuple2(-240, -64)),
			_Utils_Tuple2(
			'TV',
			_Utils_Tuple2(-160, -208)),
			_Utils_Tuple2(
			'AS',
			_Utils_Tuple2(-160, 0)),
			_Utils_Tuple2(
			'KZ',
			_Utils_Tuple2(-112, -112)),
			_Utils_Tuple2(
			'MT',
			_Utils_Tuple2(-48, -144)),
			_Utils_Tuple2(
			'MM',
			_Utils_Tuple2(-192, -128)),
			_Utils_Tuple2(
			'GI',
			_Utils_Tuple2(-224, -64)),
			_Utils_Tuple2(
			'AO',
			_Utils_Tuple2(-128, 0)),
			_Utils_Tuple2(
			'MU',
			_Utils_Tuple2(-64, -144)),
			_Utils_Tuple2(
			'BO',
			_Utils_Tuple2(-192, -16)),
			_Utils_Tuple2(
			'IS',
			_Utils_Tuple2(-112, -96)),
			_Utils_Tuple2(
			'MW',
			_Utils_Tuple2(-96, -144)),
			_Utils_Tuple2(
			'ME',
			_Utils_Tuple2(-96, -128)),
			_Utils_Tuple2(
			'SY',
			_Utils_Tuple2(-176, -192)),
			_Utils_Tuple2(
			'CY',
			_Utils_Tuple2(-32, -48)),
			_Utils_Tuple2(
			'NC',
			_Utils_Tuple2(-176, -144)),
			_Utils_Tuple2(
			'LT',
			_Utils_Tuple2(-240, -112)),
			_Utils_Tuple2(
			'AG',
			_Utils_Tuple2(-48, 0)),
			_Utils_Tuple2(
			'NA',
			_Utils_Tuple2(-160, -144)),
			_Utils_Tuple2(
			'ID',
			_Utils_Tuple2(0, -96)),
			_Utils_Tuple2(
			'GT',
			_Utils_Tuple2(-96, -80)),
			_Utils_Tuple2(
			'SN',
			_Utils_Tuple2(-80, -192)),
			_Utils_Tuple2(
			'PN',
			_Utils_Tuple2(-224, -160)),
			_Utils_Tuple2(
			'AL',
			_Utils_Tuple2(-80, 0)),
			_Utils_Tuple2(
			'MV',
			_Utils_Tuple2(-80, -144)),
			_Utils_Tuple2(
			'UA',
			_Utils_Tuple2(-208, -208)),
			_Utils_Tuple2(
			'TD',
			_Utils_Tuple2(-224, -192)),
			_Utils_Tuple2(
			'SC',
			_Utils_Tuple2(-192, -176)),
			_Utils_Tuple2(
			'FO',
			_Utils_Tuple2(-96, -64)),
			_Utils_Tuple2(
			'VN',
			_Utils_Tuple2(-112, -224)),
			_Utils_Tuple2(
			'FJ',
			_Utils_Tuple2(-48, -64)),
			_Utils_Tuple2(
			'CM',
			_Utils_Tuple2(-176, -32)),
			_Utils_Tuple2(
			'AX',
			_Utils_Tuple2(-224, 0)),
			_Utils_Tuple2(
			'EE',
			_Utils_Tuple2(-176, -48)),
			_Utils_Tuple2(
			'TL',
			_Utils_Tuple2(-64, -208)),
			_Utils_Tuple2(
			'KE',
			_Utils_Tuple2(-208, -96)),
			_Utils_Tuple2(
			'LI',
			_Utils_Tuple2(-176, -112)),
			_Utils_Tuple2(
			'NF',
			_Utils_Tuple2(-208, -144)),
			_Utils_Tuple2(
			'CW',
			_Utils_Tuple2(-16, -48)),
			_Utils_Tuple2(
			'MN',
			_Utils_Tuple2(-208, -128)),
			_Utils_Tuple2(
			'MS',
			_Utils_Tuple2(-32, -144)),
			_Utils_Tuple2(
			'TK',
			_Utils_Tuple2(-48, -208)),
			_Utils_Tuple2(
			'UY',
			_Utils_Tuple2(0, -224)),
			_Utils_Tuple2(
			'CV',
			_Utils_Tuple2(0, -48)),
			_Utils_Tuple2(
			'MF',
			_Utils_Tuple2(-112, -128)),
			_Utils_Tuple2(
			'IE',
			_Utils_Tuple2(-16, -96)),
			_Utils_Tuple2(
			'JO',
			_Utils_Tuple2(-176, -96)),
			_Utils_Tuple2(
			'CD',
			_Utils_Tuple2(-64, -32)),
			_Utils_Tuple2(
			'GW',
			_Utils_Tuple2(-128, -80)),
			_Utils_Tuple2(
			'TG',
			_Utils_Tuple2(0, -208)),
			_Utils_Tuple2(
			'FI',
			_Utils_Tuple2(-32, -64)),
			_Utils_Tuple2(
			'PR',
			_Utils_Tuple2(-240, -160)),
			_Utils_Tuple2(
			'LY',
			_Utils_Tuple2(-32, -128)),
			_Utils_Tuple2(
			'SE',
			_Utils_Tuple2(-224, -176)),
			_Utils_Tuple2(
			'BT',
			_Utils_Tuple2(-240, -16)),
			_Utils_Tuple2(
			'DJ',
			_Utils_Tuple2(-80, -48)),
			_Utils_Tuple2(
			'LA',
			_Utils_Tuple2(-128, -112)),
			_Utils_Tuple2(
			'BY',
			_Utils_Tuple2(-16, -32)),
			_Utils_Tuple2(
			'IT',
			_Utils_Tuple2(-128, -96)),
			_Utils_Tuple2(
			'QA',
			_Utils_Tuple2(-64, -176)),
			_Utils_Tuple2(
			'AF',
			_Utils_Tuple2(-32, 0)),
			_Utils_Tuple2(
			'BZ',
			_Utils_Tuple2(-32, -32)),
			_Utils_Tuple2(
			'PE',
			_Utils_Tuple2(-128, -160)),
			_Utils_Tuple2(
			'BS',
			_Utils_Tuple2(-224, -16)),
			_Utils_Tuple2(
			'HR',
			_Utils_Tuple2(-192, -80)),
			_Utils_Tuple2(
			'CA',
			_Utils_Tuple2(-48, -32)),
			_Utils_Tuple2(
			'NE',
			_Utils_Tuple2(-192, -144)),
			_Utils_Tuple2(
			'MO',
			_Utils_Tuple2(-224, -128)),
			_Utils_Tuple2(
			'KI',
			_Utils_Tuple2(0, -112)),
			_Utils_Tuple2(
			'ST',
			_Utils_Tuple2(-144, -192)),
			_Utils_Tuple2(
			'BE',
			_Utils_Tuple2(-48, -16)),
			_Utils_Tuple2(
			'BW',
			_Utils_Tuple2(0, -32)),
			_Utils_Tuple2(
			'YT',
			_Utils_Tuple2(-192, -224)),
			_Utils_Tuple2(
			'KW',
			_Utils_Tuple2(-80, -112)),
			_Utils_Tuple2(
			'AN',
			_Utils_Tuple2(-112, 0)),
			_Utils_Tuple2(
			'CN',
			_Utils_Tuple2(-192, -32)),
			_Utils_Tuple2(
			'TT',
			_Utils_Tuple2(-144, -208)),
			_Utils_Tuple2(
			'AE',
			_Utils_Tuple2(-16, 0)),
			_Utils_Tuple2(
			'TH',
			_Utils_Tuple2(-16, -208)),
			_Utils_Tuple2(
			'BI',
			_Utils_Tuple2(-112, -16)),
			_Utils_Tuple2(
			'EU',
			_Utils_Tuple2(-16, -64)),
			_Utils_Tuple2(
			'EC',
			_Utils_Tuple2(-160, -48)),
			_Utils_Tuple2(
			'IC',
			_Utils_Tuple2(-240, -80)),
			_Utils_Tuple2(
			'ES',
			_Utils_Tuple2(-240, -48)),
			_Utils_Tuple2(
			'JM',
			_Utils_Tuple2(-160, -96)),
			_Utils_Tuple2(
			'IL',
			_Utils_Tuple2(-32, -96)),
			_Utils_Tuple2(
			'SM',
			_Utils_Tuple2(-64, -192)),
			_Utils_Tuple2(
			'TZ',
			_Utils_Tuple2(-192, -208)),
			_Utils_Tuple2(
			'NI',
			_Utils_Tuple2(-240, -144)),
			_Utils_Tuple2(
			'EG',
			_Utils_Tuple2(-192, -48)),
			_Utils_Tuple2(
			'PA',
			_Utils_Tuple2(-112, -160)),
			_Utils_Tuple2(
			'MR',
			_Utils_Tuple2(-16, -144)),
			_Utils_Tuple2(
			'PH',
			_Utils_Tuple2(-176, -160)),
			_Utils_Tuple2(
			'PK',
			_Utils_Tuple2(-192, -160)),
			_Utils_Tuple2(
			'HU',
			_Utils_Tuple2(-224, -80)),
			_Utils_Tuple2(
			'AU',
			_Utils_Tuple2(-192, 0)),
			_Utils_Tuple2(
			'LV',
			_Utils_Tuple2(-16, -128)),
			_Utils_Tuple2(
			'ZM',
			_Utils_Tuple2(-224, -224)),
			_Utils_Tuple2(
			'GN',
			_Utils_Tuple2(-16, -80)),
			_Utils_Tuple2(
			'DZ',
			_Utils_Tuple2(-144, -48)),
			_Utils_Tuple2(
			'TM',
			_Utils_Tuple2(-80, -208)),
			_Utils_Tuple2(
			'VG',
			_Utils_Tuple2(-80, -224)),
			_Utils_Tuple2(
			'SB',
			_Utils_Tuple2(-176, -176)),
			_Utils_Tuple2(
			'SO',
			_Utils_Tuple2(-96, -192)),
			_Utils_Tuple2(
			'KY',
			_Utils_Tuple2(-96, -112)),
			_Utils_Tuple2(
			'RW',
			_Utils_Tuple2(-144, -176)),
			_Utils_Tuple2(
			'FM',
			_Utils_Tuple2(-80, -64)),
			_Utils_Tuple2(
			'MZ',
			_Utils_Tuple2(-144, -144)),
			_Utils_Tuple2(
			'TN',
			_Utils_Tuple2(-96, -208)),
			_Utils_Tuple2(
			'ET',
			_Utils_Tuple2(0, -64)),
			_Utils_Tuple2(
			'EH',
			_Utils_Tuple2(-208, -48)),
			_Utils_Tuple2(
			'GU',
			_Utils_Tuple2(-112, -80)),
			_Utils_Tuple2(
			'TO',
			_Utils_Tuple2(-112, -208)),
			_Utils_Tuple2(
			'KG',
			_Utils_Tuple2(-224, -96)),
			_Utils_Tuple2(
			'SG',
			_Utils_Tuple2(-240, -176)),
			_Utils_Tuple2(
			'PW',
			_Utils_Tuple2(-32, -176)),
			_Utils_Tuple2(
			'GA',
			_Utils_Tuple2(-128, -64)),
			_Utils_Tuple2(
			'AI',
			_Utils_Tuple2(-64, 0)),
			_Utils_Tuple2(
			'DE',
			_Utils_Tuple2(-64, -48)),
			_Utils_Tuple2(
			'GS',
			_Utils_Tuple2(-80, -80)),
			_Utils_Tuple2(
			'SH',
			_Utils_Tuple2(0, -192)),
			_Utils_Tuple2(
			'TJ',
			_Utils_Tuple2(-32, -208)),
			_Utils_Tuple2(
			'RU',
			_Utils_Tuple2(-128, -176)),
			_Utils_Tuple2(
			'CU',
			_Utils_Tuple2(-240, -32)),
			_Utils_Tuple2(
			'AR',
			_Utils_Tuple2(-144, 0)),
			_Utils_Tuple2(
			'BD',
			_Utils_Tuple2(-32, -16)),
			_Utils_Tuple2(
			'US',
			_Utils_Tuple2(-240, -208)),
			_Utils_Tuple2(
			'NG',
			_Utils_Tuple2(-224, -144)),
			_Utils_Tuple2(
			'KM',
			_Utils_Tuple2(-16, -112)),
			_Utils_Tuple2(
			'GH',
			_Utils_Tuple2(-208, -64)),
			_Utils_Tuple2(
			'VE',
			_Utils_Tuple2(-64, -224)),
			_Utils_Tuple2(
			'AM',
			_Utils_Tuple2(-96, 0)),
			_Utils_Tuple2(
			'PT',
			_Utils_Tuple2(-16, -176)),
			_Utils_Tuple2(
			'MC',
			_Utils_Tuple2(-64, -128)),
			_Utils_Tuple2(
			'BG',
			_Utils_Tuple2(-80, -16)),
			_Utils_Tuple2(
			'BN',
			_Utils_Tuple2(-176, -16)),
			_Utils_Tuple2(
			'AT',
			_Utils_Tuple2(-176, 0)),
			_Utils_Tuple2(
			'AD',
			_Utils_Tuple2(0, 0)),
			_Utils_Tuple2(
			'MD',
			_Utils_Tuple2(-80, -128)),
			_Utils_Tuple2(
			'NO',
			_Utils_Tuple2(-16, -160)),
			_Utils_Tuple2(
			'KR',
			_Utils_Tuple2(-64, -112)),
			_Utils_Tuple2(
			'PL',
			_Utils_Tuple2(-208, -160)),
			_Utils_Tuple2(
			'SR',
			_Utils_Tuple2(-112, -192)),
			_Utils_Tuple2(
			'GE',
			_Utils_Tuple2(-176, -64)),
			_Utils_Tuple2(
			'SS',
			_Utils_Tuple2(-128, -192)),
			_Utils_Tuple2(
			'CO',
			_Utils_Tuple2(-208, -32)),
			_Utils_Tuple2(
			'CH',
			_Utils_Tuple2(-112, -32)),
			_Utils_Tuple2(
			'LK',
			_Utils_Tuple2(-192, -112)),
			_Utils_Tuple2(
			'MY',
			_Utils_Tuple2(-128, -144)),
			_Utils_Tuple2(
			'BH',
			_Utils_Tuple2(-96, -16)),
			_Utils_Tuple2(
			'LR',
			_Utils_Tuple2(-208, -112)),
			_Utils_Tuple2(
			'VU',
			_Utils_Tuple2(-128, -224)),
			_Utils_Tuple2(
			'SK',
			_Utils_Tuple2(-32, -192)),
			_Utils_Tuple2(
			'GD',
			_Utils_Tuple2(-160, -64)),
			_Utils_Tuple2(
			'ML',
			_Utils_Tuple2(-176, -128)),
			_Utils_Tuple2(
			'PF',
			_Utils_Tuple2(-144, -160)),
			_Utils_Tuple2(
			'UG',
			_Utils_Tuple2(-224, -208)),
			_Utils_Tuple2(
			'NL',
			_Utils_Tuple2(0, -160)),
			_Utils_Tuple2(
			'NP',
			_Utils_Tuple2(-32, -160)),
			_Utils_Tuple2(
			'RE',
			_Utils_Tuple2(-80, -176)),
			_Utils_Tuple2(
			'RS',
			_Utils_Tuple2(-112, -176)),
			_Utils_Tuple2(
			'GG',
			_Utils_Tuple2(-192, -64)),
			_Utils_Tuple2(
			'GM',
			_Utils_Tuple2(0, -80)),
			_Utils_Tuple2(
			'SA',
			_Utils_Tuple2(-160, -176)),
			_Utils_Tuple2(
			'WS',
			_Utils_Tuple2(-160, -224)),
			_Utils_Tuple2(
			'VC',
			_Utils_Tuple2(-48, -224)),
			_Utils_Tuple2(
			'LB',
			_Utils_Tuple2(-144, -112)),
			_Utils_Tuple2(
			'BA',
			_Utils_Tuple2(0, -16)),
			_Utils_Tuple2(
			'BB',
			_Utils_Tuple2(-16, -16)),
			_Utils_Tuple2(
			'MA',
			_Utils_Tuple2(-48, -128)),
			_Utils_Tuple2(
			'MH',
			_Utils_Tuple2(-144, -128)),
			_Utils_Tuple2(
			'BM',
			_Utils_Tuple2(-160, -16)),
			_Utils_Tuple2(
			'BF',
			_Utils_Tuple2(-64, -16)),
			_Utils_Tuple2(
			'BJ',
			_Utils_Tuple2(-128, -16)),
			_Utils_Tuple2(
			'SI',
			_Utils_Tuple2(-16, -192)),
			_Utils_Tuple2(
			'PY',
			_Utils_Tuple2(-48, -176)),
			_Utils_Tuple2(
			'KH',
			_Utils_Tuple2(-240, -96)),
			_Utils_Tuple2(
			'GP',
			_Utils_Tuple2(-32, -80)),
			_Utils_Tuple2(
			'CR',
			_Utils_Tuple2(-224, -32)),
			_Utils_Tuple2(
			'NZ',
			_Utils_Tuple2(-80, -160)),
			_Utils_Tuple2(
			'PG',
			_Utils_Tuple2(-160, -160)),
			_Utils_Tuple2(
			'GB',
			_Utils_Tuple2(-144, -64)),
			_Utils_Tuple2(
			'FK',
			_Utils_Tuple2(-64, -64)),
			_Utils_Tuple2(
			'VA',
			_Utils_Tuple2(-32, -224)),
			_Utils_Tuple2(
			'MG',
			_Utils_Tuple2(-128, -128)),
			_Utils_Tuple2(
			'IM',
			_Utils_Tuple2(-48, -96)),
			_Utils_Tuple2(
			'GQ',
			_Utils_Tuple2(-48, -80)),
			_Utils_Tuple2(
			'HN',
			_Utils_Tuple2(-176, -80)),
			_Utils_Tuple2(
			'MK',
			_Utils_Tuple2(-160, -128)),
			_Utils_Tuple2(
			'KN',
			_Utils_Tuple2(-32, -112)),
			_Utils_Tuple2(
			'TF',
			_Utils_Tuple2(-240, -192)),
			_Utils_Tuple2(
			'TC',
			_Utils_Tuple2(-208, -192)),
			_Utils_Tuple2(
			'VI',
			_Utils_Tuple2(-96, -224)),
			_Utils_Tuple2(
			'YE',
			_Utils_Tuple2(-176, -224)),
			_Utils_Tuple2(
			'MQ',
			_Utils_Tuple2(0, -144)),
			_Utils_Tuple2(
			'ER',
			_Utils_Tuple2(-224, -48)),
			_Utils_Tuple2(
			'LU',
			_Utils_Tuple2(0, -128)),
			_Utils_Tuple2(
			'LC',
			_Utils_Tuple2(-160, -112)),
			_Utils_Tuple2(
			'DM',
			_Utils_Tuple2(-112, -48)),
			_Utils_Tuple2(
			'CF',
			_Utils_Tuple2(-80, -32)),
			_Utils_Tuple2(
			'LS',
			_Utils_Tuple2(-224, -112)),
			_Utils_Tuple2(
			'OM',
			_Utils_Tuple2(-96, -160)),
			_Utils_Tuple2(
			'IN',
			_Utils_Tuple2(-64, -96)),
			_Utils_Tuple2(
			'BL',
			_Utils_Tuple2(-144, -16)),
			_Utils_Tuple2(
			'WF',
			_Utils_Tuple2(-144, -224)),
			_Utils_Tuple2(
			'CI',
			_Utils_Tuple2(-128, -32)),
			_Utils_Tuple2(
			'JP',
			_Utils_Tuple2(-192, -96)),
			_Utils_Tuple2(
			'PS',
			_Utils_Tuple2(0, -176)),
			_Utils_Tuple2(
			'HT',
			_Utils_Tuple2(-208, -80)),
			_Utils_Tuple2(
			'TR',
			_Utils_Tuple2(-128, -208)),
			_Utils_Tuple2(
			'AZ',
			_Utils_Tuple2(-240, 0)),
			_Utils_Tuple2(
			'JE',
			_Utils_Tuple2(-144, -96)),
			_Utils_Tuple2(
			'IR',
			_Utils_Tuple2(-96, -96)),
			_Utils_Tuple2(
			'IQ',
			_Utils_Tuple2(-80, -96)),
			_Utils_Tuple2(
			'HK',
			_Utils_Tuple2(-160, -80)),
			_Utils_Tuple2(
			'ZW',
			_Utils_Tuple2(-240, -224)),
			_Utils_Tuple2(
			'FR',
			_Utils_Tuple2(-112, -64)),
			_Utils_Tuple2(
			'AW',
			_Utils_Tuple2(-208, 0)),
			_Utils_Tuple2(
			'TW',
			_Utils_Tuple2(-176, -208)),
			_Utils_Tuple2(
			'SV',
			_Utils_Tuple2(-160, -192)),
			_Utils_Tuple2(
			'SD',
			_Utils_Tuple2(-208, -176)),
			_Utils_Tuple2(
			'CL',
			_Utils_Tuple2(-160, -32)),
			_Utils_Tuple2(
			'KP',
			_Utils_Tuple2(-48, -112)),
			_Utils_Tuple2(
			'CG',
			_Utils_Tuple2(-96, -32)),
			_Utils_Tuple2(
			'GR',
			_Utils_Tuple2(-64, -80)),
			_Utils_Tuple2(
			'RO',
			_Utils_Tuple2(-96, -176)),
			_Utils_Tuple2(
			'SL',
			_Utils_Tuple2(-48, -192)),
			_Utils_Tuple2(
			'DK',
			_Utils_Tuple2(-96, -48)),
			_Utils_Tuple2(
			'SZ',
			_Utils_Tuple2(-192, -192)),
			_Utils_Tuple2(
			'ZA',
			_Utils_Tuple2(-208, -224)),
			_Utils_Tuple2(
			'DO',
			_Utils_Tuple2(-128, -48)),
			_Utils_Tuple2(
			'NR',
			_Utils_Tuple2(-48, -160)),
			_Utils_Tuple2(
			'BR',
			_Utils_Tuple2(-208, -16)),
			_Utils_Tuple2(
			'MP',
			_Utils_Tuple2(-240, -128)),
			_Utils_Tuple2(
			'NU',
			_Utils_Tuple2(-64, -160)),
			_Utils_Tuple2(
			'CK',
			_Utils_Tuple2(-144, -32))
		]));
var $rakutentech$r10$R10$FormComponents$Internal$Utils$countryCodeToFlag = function (countryCode) {
	var newCountryCode = (countryCode === 'AQ') ? 'AU' : ((countryCode === 'IO') ? 'GB' : ((countryCode === 'CX') ? 'AU' : ((countryCode === 'CC') ? 'AU' : ((countryCode === 'XK') ? 'RS' : ((countryCode === 'PM') ? 'FR' : ((countryCode === 'SX') ? 'NL' : ((countryCode === 'SJ') ? 'NO' : countryCode)))))));
	var _v0 = A2($elm$core$Dict$get, newCountryCode, $rakutentech$r10$R10$Form$Internal$Shared$flagIconPositions);
	if (_v0.$ === 'Just') {
		var _v1 = _v0.a;
		var x = _v1.a;
		var y = _v1.b;
		return _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$style,
					'background-position',
					$elm$core$String$fromFloat(x - 1) + ('px ' + ($elm$core$String$fromFloat(y - 2) + 'px')))),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'background-size', 'auto'))
			]);
	} else {
		return _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'background-size', 'cover'))
			]);
	}
};
var $mdgriffith$elm_ui$Element$Background$image = function (src) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / cover no-repeat')));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Background$image = function (src) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Background$image(src));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$getFlagIcon = function (countryCode) {
	return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
		function (c) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width(
							$lucamug$elm_ui_with_context$Element$WithContext$px(14)),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(11)),
							$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
							{
								blur: 1,
								color: A4($lucamug$elm_ui_with_context$Element$WithContext$rgba, 0, 0, 0, 0.2),
								offset: _Utils_Tuple2(0, 0),
								size: 1
							}),
							$lucamug$elm_ui_with_context$Element$WithContext$moveDown(1),
							$lucamug$elm_ui_with_context$Element$WithContext$Background$image(c.contextR10.urlImageFlags)
						]),
					$rakutentech$r10$R10$FormComponents$Internal$Utils$countryCodeToFlag(countryCode)),
				$lucamug$elm_ui_with_context$Element$WithContext$none);
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowDown = function (a) {
	return {$: 'OnArrowDown', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowUp = function (a) {
	return {$: 'OnArrowUp', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace = {$: 'OnDelBackspace'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnEsc = {$: 'OnEsc'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus = {$: 'OnFocus'};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus = function (a) {
	return {$: 'OnLoseFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId = function (key) {
	return 'single-dropdown-container-' + key;
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionLabelMatched = function (_v0) {
	var value = _v0.value;
	var fieldOptions = _v0.fieldOptions;
	return A2(
		$elm$core$List$any,
		function (option) {
			return _Utils_eq(option.label, value);
		},
		fieldOptions);
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch = F2(
	function (search, _v0) {
		var searchFn = _v0.searchFn;
		var fieldOptions = _v0.fieldOptions;
		return ($elm$core$String$isEmpty(search) || $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionLabelMatched(
			{fieldOptions: fieldOptions, value: search})) ? fieldOptions : A2(
			$elm$core$List$filter,
			searchFn(search),
			fieldOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnInputClick = function (a) {
	return {$: 'OnInputClick', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$getMsgOnInputClick = F3(
	function (model, args, filteredOptions) {
		var selectedOptionIndex = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionIndex, filteredOptions, model.value));
		var selectedY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Update$getOptionY,
			model.scroll,
			args,
			selectedOptionIndex,
			$elm$core$List$length(filteredOptions));
		return $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnInputClick(
			{key: args.key, selectedY: selectedY});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionValueMatched = function (_v0) {
	var value = _v0.value;
	var fieldOptions = _v0.fieldOptions;
	return A2(
		$elm$core$List$any,
		function (option) {
			return _Utils_eq(option.value, value);
		},
		fieldOptions);
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst = F3(
	function (fieldOptions, value, select) {
		return (!$elm$core$String$isEmpty(select)) ? select : ($rakutentech$r10$R10$FormComponents$Internal$Single$Common$isAnyOptionValueMatched(
			{fieldOptions: fieldOptions, value: value}) ? value : A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.value;
				},
				$elm$core$List$head(fieldOptions))));
	});
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown = function (dropdownId) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$andThen,
				function (id) {
					return _Utils_eq(dropdownId, id) ? $elm$json$Json$Decode$succeed(false) : $elm$json$Json$Decode$fail('check parent node');
				},
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$field,
						'parentNode',
						$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown(dropdownId));
				}),
				$elm$json$Json$Decode$succeed(true)
			]));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$outsideTarget = F3(
	function (targetName, dropdownId, closeMsg) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (isOutside) {
				return isOutside ? $elm$json$Json$Decode$succeed(closeMsg) : $elm$json$Json$Decode$fail('inside dropdown');
			},
			A2(
				$elm$json$Json$Decode$field,
				targetName,
				$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$isOutsideDropdown(dropdownId)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut = F2(
	function (containerId, closeMsg) {
		return A3($rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$outsideTarget, 'relatedTarget', containerId, closeMsg);
	});
var $elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$optionsLabelOrSearchValue = F2(
	function (value, allFieldOptions) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.label;
				},
				A2(
					$elm_community$list_extra$List$Extra$find,
					function (opt) {
						return _Utils_eq(opt.value, value);
					},
					allFieldOptions)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnScroll = function (a) {
	return {$: 'OnScroll', a: a};
};
var $mdgriffith$elm_ui$Element$Keyed$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Keyed$column = A2(
	$lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs,
	$mdgriffith$elm_ui$Element$Keyed$column,
	A2(
		$elm$core$Basics$composeL,
		$elm$core$List$map,
		A2($elm$core$Basics$composeL, $elm$core$Tuple$mapSecond, $lucamug$elm_ui_with_context$Element$WithContext$Internal$run)));
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$comboboxOptionNoResults = function (_v0) {
	var palette = _v0.palette;
	var selectOptionHeight = _v0.selectOptionHeight;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(selectOptionHeight)),
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 12, right: 0, top: 0}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.5, palette))
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$lucamug$elm_ui_with_context$Element$WithContext$text('No results')));
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice = F3(
	function (from, to, list) {
		return (_Utils_cmp(from, to) > -1) ? _List_Nil : A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (idx, opt) {
						return (_Utils_cmp(idx, to - from) < 0) ? $elm$core$Maybe$Just(opt) : $elm$core$Maybe$Nothing;
					}),
				A2($elm$core$List$drop, from, list)));
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $rakutentech$r10$R10$FormComponents$Internal$UI$onScroll = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'scroll',
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'scrollTop']),
				$elm$json$Json$Decode$float)));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.primaryVariant));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxOption = F4(
	function (value, select, args, opt) {
		var isSelected_ = _Utils_eq(select, opt.value);
		var isActiveValue = _Utils_eq(value, opt.value);
		var getShadowColor = isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.1, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.1, args.palette);
		var getBackgroundColor = (isActiveValue && isSelected_) ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.15, args.palette) : (isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.09, args.palette) : (isSelected_ ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.09, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0, args.palette)));
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(args.selectOptionHeight)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(getBackgroundColor),
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
							{
								blur: 0,
								color: getShadowColor,
								offset: _Utils_Tuple2(0, 0),
								size: 40
							})
						]))
				]),
			args.viewOptionEl(opt));
	});
var $rakutentech$r10$R10$Color$Svg$fontHighEmphasis = function (theme) {
	return $rakutentech$r10$R10$Color$Utils$fromColorColor(
		A2($rakutentech$r10$R10$Color$Internal$Derived$toColor, theme, $rakutentech$r10$R10$Color$Internal$Derived$FontHighEmphasis));
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnSearch = F2(
	function (a, b) {
		return {$: 'OnSearch', a: a, b: b};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Update$getMsgOnSearch = F2(
	function (args, newSearch) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnSearch,
			{
				filteredFieldOption: A2($rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch, newSearch, args),
				key: args.key,
				maxDisplayCount: args.maxDisplayCount,
				selectOptionHeight: args.selectOptionHeight
			},
			newSearch);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel = F3(
	function (f, attrs, child) {
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Label(
			function (context) {
				return A2(
					f,
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$attributes, context, attrs),
					A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$run, context, child));
			});
	});
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$OnLeft);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft = $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel($mdgriffith$elm_ui$Element$Input$labelLeft);
var $rakutentech$r10$R10$Svg$Icons$search = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$d('M13 2a11 11 0 1 0 11 11A11 11 0 0 0 13 2zm0 20a9 9 0 1 1 9-9 9.01 9.01 0 0 1-9 9zm9.86-.55a13.11 13.11 0 0 1-1.41 1.41L28.59 30 30 28.59z'),
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl))
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil)
				]));
	});
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach = function (edges) {
	return $lucamug$elm_ui_with_context$Element$WithContext$Internal$attribute(
		$mdgriffith$elm_ui$Element$Border$widthEach(edges));
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewSearchBox = F2(
	function (model, args) {
		return args.searchable ? A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
					{bottom: 1, left: 0, right: 0, top: 0}),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette)),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 17, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						return A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$singleSearchBoxId(args.key))),
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
									$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
									{bottom: 16, left: 10, right: 16, top: 16}),
									$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0)
								]),
							{
								label: A2(
									$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3)
										]),
									A3(
										$rakutentech$r10$R10$Svg$Icons$search,
										_List_Nil,
										$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.contextR10.theme),
										18)),
								onChange: function (string) {
									return args.toMsg(
										A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getMsgOnSearch, args, string));
								},
								placeholder: $elm$core$Maybe$Nothing,
								text: model.search
							});
					})
				])) : $lucamug$elm_ui_with_context$Element$WithContext$none;
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxDropdown = F4(
	function (model, args, opened, filteredOptions) {
		var visibleCount = args.maxDisplayCount + 2;
		var optionsCount = $elm$core$List$length(filteredOptions);
		var elementsScrolledFromTop = ($elm$core$Basics$round(model.scroll) / args.selectOptionHeight) | 0;
		var visibleFrom = elementsScrolledFromTop - 1;
		var visibleMoveDown = $rakutentech$r10$R10$FormComponents$Internal$Single$Update$dropdownHingeHeight + (A2($elm$core$Basics$max, 0, visibleFrom) * args.selectOptionHeight);
		var visibleTo = visibleFrom + visibleCount;
		var visibleOptions = ($elm$core$List$length(filteredOptions) > 0) ? A2(
			$elm$core$List$map,
			function (opt) {
				return _Utils_Tuple2(
					opt.value,
					A4($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxOption, model.value, model.select, args, opt));
			},
			A3($rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice, visibleFrom, visibleTo, filteredOptions)) : _List_fromArray(
			[
				_Utils_Tuple2(
				'no_results',
				$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$comboboxOptionNoResults(args))
			]);
		var contentHeight = args.selectOptionHeight * A2($elm$core$Basics$max, optionsCount, 1);
		return (!opened) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$clip,
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(60),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.5, args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '1')),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(8),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 10,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.3, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: 3
					})
				]),
			_List_fromArray(
				[
					A2($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewSearchBox, model, args),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(
								A2($rakutentech$r10$R10$FormComponents$Internal$Single$Update$getDropdownHeight, args, optionsCount))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'min-height', 'unset')),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'overscroll-behavior', 'contain')),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onScroll(
								A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnScroll))),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContentId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$scrollbarX,
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Keyed$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
										$lucamug$elm_ui_with_context$Element$WithContext$moveDown(visibleMoveDown)
									]),
								visibleOptions))
						]),
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(contentHeight)),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view = F3(
	function (attrs, model, args) {
		var focusOnSearchBox = model.opened && args.searchable;
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Common$filterBySearch, model.search, args);
		var inputAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
				args.toMsg(
					A3($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$getMsgOnInputClick, model, args, filteredFieldOption))),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2($elm$html$Html$Attributes$attribute, 'readonly', 'true'))
			]);
		var displayValue = A2($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$optionsLabelOrSearchValue, model.value, args.fieldOptions);
		var textArgs = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: args.disabled,
			fieldType: $elm$core$Maybe$Nothing,
			floatingLabelAlwaysUp: false,
			focused: model.focused,
			helperText: args.helperText,
			idDom: $elm$core$Maybe$Nothing,
			label: args.label,
			leadingIcon: args.leadingIcon,
			maybeValid: args.maybeValid,
			msgOnChange: A2(
				$elm$core$Basics$composeL,
				args.toMsg,
				$elm$core$Basics$always($rakutentech$r10$R10$FormComponents$Internal$Single$Common$NoOp)),
			msgOnEnter: $elm$core$Maybe$Nothing,
			msgOnFocus: args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus),
			msgOnKeyDown: $elm$core$Maybe$Nothing,
			msgOnLoseFocus: $elm$core$Maybe$Nothing,
			msgOnTogglePasswordShow: $elm$core$Maybe$Nothing,
			palette: args.palette,
			placeholder: $elm$core$Maybe$Nothing,
			requiredLabel: args.requiredLabel,
			showPassword: false,
			style: args.style,
			textType: $rakutentech$r10$R10$FormTypes$TextPlain,
			trailingIcon: args.trailingIcon,
			value: displayValue
		};
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Text$view,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$id(
						$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId(args.key))),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2(
						$elm$html$Html$Events$on,
						'focusout',
						A2(
							$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut,
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$dropdownContainerId(args.key),
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))))),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
						_Utils_ap(
							_List_fromArray(
								[
									_Utils_Tuple2(
									$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.down,
									args.toMsg(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowDown(
											{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight}))),
									_Utils_Tuple2(
									$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.up,
									args.toMsg(
										$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnArrowUp(
											{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})))
								]),
							_Utils_ap(
								(!focusOnSearchBox) ? _List_fromArray(
									[
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.del,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace)),
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.backspace,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnDelBackspace))
									]) : _List_Nil,
								model.opened ? _List_fromArray(
									[
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.esc,
										args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnEsc)),
										_Utils_Tuple2(
										$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
										args.toMsg(
											$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(
												A3($rakutentech$r10$R10$FormComponents$Internal$Single$Common$getSelectedOrFirst, filteredFieldOption, model.value, model.select))))
									]) : _List_Nil)))),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(
					A4($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$viewComboboxDropdown, model, args, model.opened, filteredFieldOption))
				]),
			_Utils_ap(inputAttrs, attrs),
			textArgs);
	});
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $lucamug$elm_ui_with_context$Element$WithContext$alignRight = $lucamug$elm_ui_with_context$Element$WithContext$attribute($mdgriffith$elm_ui$Element$alignRight);
var $mdgriffith$elm_ui$Element$Input$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label($mdgriffith$elm_ui$Element$Input$Above);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$labelAbove = $lucamug$elm_ui_with_context$Element$WithContext$Input$buildLabel($mdgriffith$elm_ui$Element$Input$labelAbove);
var $mdgriffith$elm_ui$Element$Input$Column = {$: 'Column'};
var $mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var $mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var $mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var $mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var $mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3($mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.selected) ? $mdgriffith$elm_ui$Element$Input$Selected : $mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.options;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found.$) {
						case 'NotFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3($mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2($elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _v3$3;
							}
						case 'Attr':
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.selected;
																if (_v2.$ === 'Nothing') {
																	return $elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radio = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Column);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$runOption = F2(
	function (context, _v0) {
		var f = _v0.a;
		return f(context);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper = F2(
	function (context, config) {
		return {
			label: A2($lucamug$elm_ui_with_context$Element$WithContext$Input$runLabel, context, config.label),
			onChange: config.onChange,
			options: A2(
				$elm$core$List$map,
				$lucamug$elm_ui_with_context$Element$WithContext$Input$runOption(context),
				config.options),
			selected: config.selected
		};
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radio = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$Input$radio, $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper);
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioLabel = F4(
	function (palette, label, helperText, requiredLabel) {
		return (label === '') ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 24, left: 0, right: 0, top: 10}),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing)
				]),
			_List_fromArray(
				[
					A2(
					$rakutentech$r10$R10$Paragraph$normal,
					_List_Nil,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$text(label),
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[
									$rakutentech$r10$R10$Color$AttrsFont$normalLighter,
									A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 6, 0)
								]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
								A2($elm$core$Maybe$withDefault, '', requiredLabel)))
						])),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					helperText)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Common$Hover = function (a) {
	return {$: 'Hover', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Focused = {$: 'Focused'};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Idle = {$: 'Idle'};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Option = function (a) {
	return {$: 'Option', a: a};
};
var $lucamug$elm_ui_with_context$Element$WithContext$Input$Selected = {$: 'Selected'};
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$optionWith = F2(
	function (val, view) {
		return A2($mdgriffith$elm_ui$Element$Input$Option, val, view);
	});
var $lucamug$elm_ui_with_context$Element$WithContext$Input$optionWith = F2(
	function (val, view) {
		var optionStateConverter = function (optionState) {
			switch (optionState.$) {
				case 'Idle':
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Idle;
				case 'Focused':
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Focused;
				default:
					return $lucamug$elm_ui_with_context$Element$WithContext$Input$Selected;
			}
		};
		var viewConverted = function (optionState) {
			return view(
				optionStateConverter(optionState));
		};
		return $lucamug$elm_ui_with_context$Element$WithContext$Input$Option(
			function (context) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$optionWith,
					val,
					A2(
						$elm$core$Basics$composeL,
						$lucamug$elm_ui_with_context$Element$WithContext$Internal$run(context),
						viewConverted));
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected = function (optionState) {
	switch (optionState.$) {
		case 'Selected':
			return true;
		case 'Idle':
			return false;
		default:
			return false;
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOption = F2(
	function (_v0, optionState) {
		var disabled = _v0.disabled;
		var palette = _v0.palette;
		var focused = _v0.focused;
		var label = _v0.label;
		var value = _v0.value;
		var selected = _v0.selected;
		var over = _v0.over;
		var msgHover = _v0.msgHover;
		var outerCircle = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.13s'),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
					$lucamug$elm_ui_with_context$Element$WithContext$moveUp(2),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 0,
						color: (selected ? $rakutentech$r10$R10$FormComponents$Internal$UI$Color$primary : $rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA(0))(palette),
						offset: _Utils_Tuple2(0, 0),
						size: 2
					})
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var isSPDevice = function (contextR10) {
			return $rakutentech$r10$R10$Device$isMobileOS(contextR10.device);
		};
		var _v1 = function () {
			var _v2 = _Utils_Tuple2(
				$rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected(optionState),
				disabled);
			if (_v2.a) {
				if (_v2.b) {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.5, palette),
						innerCircleSize: 10,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0.5, palette)
					};
				} else {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 1, palette),
						innerCircleSize: 10,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 1, palette)
					};
				}
			} else {
				if (_v2.b) {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0, palette),
						innerCircleSize: 0,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, palette)
					};
				} else {
					return {
						innerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, 0, palette),
						innerCircleSize: 0,
						outerCircleColor: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, palette)
					};
				}
			}
		}();
		var innerCircleSize = _v1.innerCircleSize;
		var innerCircleColor = _v1.innerCircleColor;
		var outerCircleColor = _v1.outerCircleColor;
		var innerCircle = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.13s'),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(innerCircleColor),
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(innerCircleSize)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(innerCircleSize)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var selector = function (c) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$rakutentech$r10$R10$Transition$transition('all 0.13s'),
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
						$lucamug$elm_ui_with_context$Element$WithContext$moveRight(2),
						$lucamug$elm_ui_with_context$Element$WithContext$centerX,
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$behindContent(innerCircle),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						over ? outerCircle : $lucamug$elm_ui_with_context$Element$WithContext$none),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
						{
							blur: 0,
							color: outerCircleColor,
							offset: _Utils_Tuple2(0, 0),
							size: 2
						}),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						isSPDevice(c) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$moveUp(-6),
									$lucamug$elm_ui_with_context$Element$WithContext$moveLeft(-6)
								]),
							A2(
								$rakutentech$r10$R10$FormComponents$Internal$UI$viewSelectShadowCustomSize,
								{
									disabled: disabled,
									focused: focused && $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected(optionState),
									over: over,
									palette: palette,
									rounded: 50,
									selected: $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$isSelected(optionState),
									size: {x: 12, y: 12}
								},
								$lucamug$elm_ui_with_context$Element$WithContext$none)))
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none);
		};
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (c) {
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$spacing(17),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseEnter(
								msgHover(
									$elm$core$Maybe$Just(value))),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onMouseLeave(
								msgHover($elm$core$Maybe$Nothing))
							]),
						disabled ? _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'cursor', 'auto'))
							]) : _List_Nil),
					_List_fromArray(
						[
							selector(c.contextR10),
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
							_List_fromArray(
								[$rakutentech$r10$R10$Color$AttrsFont$normalLighter]),
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$text(label)
								]))
						]));
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions = F5(
	function (selected, args, focused, over, fieldOption) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$Input$optionWith,
			fieldOption.value,
			$rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOption(
				{
					disabled: args.disabled,
					focused: focused,
					label: fieldOption.label,
					msgHover: A2($elm$core$Basics$composeR, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$Hover, args.toMsg),
					over: _Utils_eq(
						$elm$core$Maybe$Just(fieldOption.value),
						over),
					palette: args.palette,
					selected: _Utils_eq(fieldOption.value, selected),
					value: fieldOption.value
				}));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$view = F3(
	function (attrs, model, args) {
		var fixedValue = model.value;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$alignRight,
									$lucamug$elm_ui_with_context$Element$WithContext$moveDown(5)
								]),
							$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
								{
									displayValidation: _Utils_eq(
										args.maybeValid,
										$elm$core$Maybe$Just(false)),
									maybeValid: args.maybeValid,
									palette: args.palette,
									style: args.style
								})))
					]),
				attrs),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Input$radio,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(16),
							$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(
							args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus)),
							$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))),
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					args.disabled ? _List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(-1))
						]) : _List_Nil),
				{
					label: A2(
						$lucamug$elm_ui_with_context$Element$WithContext$Input$labelAbove,
						_List_Nil,
						A4($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioLabel, args.palette, args.label, args.helperText, args.requiredLabel)),
					onChange: args.disabled ? $elm$core$Basics$always(
						args.toMsg(
							$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(model.value))) : A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect),
					options: A2(
						$elm$core$List$map,
						A4($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions, fixedValue, args, model.focused, model.over),
						args.fieldOptions),
					selected: $elm$core$Maybe$Just(fixedValue)
				}));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$viewOptionElForCountry = F2(
	function (_v0, _v1) {
		var search = _v0.search;
		var msgOnSelect = _v0.msgOnSelect;
		var label = _v1.label;
		var value = _v1.value;
		var insertPositions = A2(
			$elm$core$List$concatMap,
			function (idx) {
				return _List_fromArray(
					[
						idx,
						idx + $elm$core$String$length(search)
					]);
			},
			A2(
				$elm$core$String$indexes,
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(search),
				$rakutentech$r10$R10$FormComponents$Internal$Single$normalizeString(label)));
		var withBold = $elm$core$List$isEmpty(insertPositions) ? label : A2($rakutentech$r10$R10$FormComponents$Internal$Single$insertBold, insertPositions, label);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '0')),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
					msgOnSelect(value)),
					$lucamug$elm_ui_with_context$Element$WithContext$pointer,
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 12, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'mask-image', 'linear-gradient(right, rgba(255,255,0,0), rgba(255,255,0, 1) 16px)')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, '-webkit-mask-image', '-webkit-linear-gradient(right, rgba(255,255,0,0) 10px, rgba(255,255,0, 1) 16px)'))
				]),
			_List_fromArray(
				[
					$rakutentech$r10$R10$FormComponents$Internal$Utils$getFlagIcon(value),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$moveRight(10)
						]),
					$rakutentech$r10$R10$SimpleMarkdown$elementMarkdown(withBold))
				]));
	});
var $mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper($mdgriffith$elm_ui$Element$Input$Row);
var $lucamug$elm_ui_with_context$Element$WithContext$Input$radioRow = A2($lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapAttrs, $mdgriffith$elm_ui$Element$Input$radioRow, $lucamug$elm_ui_with_context$Element$WithContext$Input$radioHelper);
var $rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRow = F3(
	function (attrs, model, args) {
		var fixedValue = model.value;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_Utils_ap(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				attrs),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$radioRow,
					_Utils_ap(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$spacing(15),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onFocus(
								args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnFocus)),
								$lucamug$elm_ui_with_context$Element$WithContext$Events$onLoseFocus(
								args.toMsg(
									$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnLoseFocus(model.value))),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(20)),
								$lucamug$elm_ui_with_context$Element$WithContext$centerY
							]),
						args.disabled ? _List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
								$elm$html$Html$Attributes$tabindex(-1))
							]) : _List_Nil),
					{
						label: A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
									$lucamug$elm_ui_with_context$Element$WithContext$centerY
								]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(args.label)),
						onChange: args.disabled ? $elm$core$Basics$always(
							args.toMsg(
								$rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect(model.value))) : A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect),
						options: A2(
							$elm$core$List$map,
							A4($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRadioOptions, fixedValue, args, model.focused, model.over),
							args.fieldOptions),
						selected: $elm$core$Maybe$Just(fixedValue)
					}),
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
					args.palette,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
							$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
							{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
						]),
					args.helperText)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Single$view = F3(
	function (attrs, model, conf) {
		var attrsForCountryPicker = _Utils_ap(
			attrs,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(10)
				]));
		var args = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: conf.disabled,
			fieldOptions: conf.fieldOptions,
			helperText: conf.helperText,
			key: conf.key,
			label: conf.label,
			leadingIcon: _List_Nil,
			maxDisplayCount: 3,
			maybeValid: conf.maybeValid,
			palette: conf.palette,
			requiredLabel: conf.requiredLabel,
			searchFn: $rakutentech$r10$R10$FormComponents$Internal$Single$defaultSearchFn,
			searchable: false,
			selectOptionHeight: 32,
			singleType: conf.singleType,
			style: conf.style,
			toMsg: conf.toMsg,
			trailingIcon: _List_Nil,
			viewOptionEl: $rakutentech$r10$R10$FormComponents$Internal$Single$defaultViewOptionEl(
				{
					msgOnSelect: A2($elm$core$Basics$composeR, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect, conf.toMsg),
					search: model.search
				})
		};
		var argsForCountryPicker = _Utils_update(
			args,
			{
				leadingIcon: $elm$core$String$isEmpty(model.value) ? _List_Nil : _List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$moveRight(19),
								$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3)
							]),
						$rakutentech$r10$R10$FormComponents$Internal$Utils$getFlagIcon(model.value))
					]),
				searchable: true,
				viewOptionEl: $rakutentech$r10$R10$FormComponents$Internal$Single$viewOptionElForCountry(
					{
						msgOnSelect: A2($elm$core$Basics$composeR, $rakutentech$r10$R10$FormComponents$Internal$Single$Common$OnOptionSelect, conf.toMsg),
						search: model.search
					})
			});
		var _v0 = args.singleType;
		switch (_v0.$) {
			case 'SingleCombobox':
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view,
					attrs,
					model,
					_Utils_update(
						args,
						{searchable: true}));
			case 'SingleComboboxForCountry':
				return A3($rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view, attrsForCountryPicker, model, argsForCountryPicker);
			case 'SingleSelect':
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Single$Combobox$view,
					attrs,
					model,
					_Utils_update(
						args,
						{searchable: false}));
			case 'SingleRadio':
				return A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$view, attrs, model, args);
			default:
				return A3($rakutentech$r10$R10$FormComponents$Internal$Single$Radio$viewRow, attrs, model, args);
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewSingle = F4(
	function (args, singleType, fieldOptions, formConf) {
		var value = args.fieldState.value;
		var isOptional = !$rakutentech$r10$R10$Form$Internal$MakerForView$isRequired_(args.fieldConf.validationSpecs);
		return A3(
			$rakutentech$r10$R10$FormComponents$Internal$Single$view,
			_List_Nil,
			{focused: args.focused, opened: args.active, over: args.fieldState.over, scroll: args.fieldState.scroll, search: args.fieldState.search, select: args.fieldState.select, value: args.fieldState.value},
			{
				disabled: args.fieldState.disabled,
				fieldOptions: fieldOptions,
				helperText: args.fieldConf.helperText,
				key: $rakutentech$r10$R10$Form$Internal$Key$toString(args.key),
				label: args.fieldConf.label,
				maybeValid: A3($rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid, isOptional, value, args.fieldState.validation),
				palette: args.palette,
				requiredLabel: args.fieldConf.requiredLabel,
				singleType: singleType,
				style: args.style,
				toMsg: A3($rakutentech$r10$R10$Form$Internal$Msg$OnSingleMsg, args.key, args.fieldConf, formConf)
			});
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect = F2(
	function (a, b) {
		return {$: 'OnOptionSelect', a: a, b: b};
	});
var $rakutentech$r10$R10$Country$list = _List_fromArray(
	[$rakutentech$r10$R10$Country$Afghanistan, $rakutentech$r10$R10$Country$Albania, $rakutentech$r10$R10$Country$Algeria, $rakutentech$r10$R10$Country$AmericanSamoa, $rakutentech$r10$R10$Country$Andorra, $rakutentech$r10$R10$Country$Angola, $rakutentech$r10$R10$Country$Anguilla, $rakutentech$r10$R10$Country$Antarctica, $rakutentech$r10$R10$Country$AntiguaandBarbuda, $rakutentech$r10$R10$Country$Argentina, $rakutentech$r10$R10$Country$Armenia, $rakutentech$r10$R10$Country$Aruba, $rakutentech$r10$R10$Country$Australia, $rakutentech$r10$R10$Country$Austria, $rakutentech$r10$R10$Country$Azerbaijan, $rakutentech$r10$R10$Country$Bahamas, $rakutentech$r10$R10$Country$Bahrain, $rakutentech$r10$R10$Country$Bangladesh, $rakutentech$r10$R10$Country$Barbados, $rakutentech$r10$R10$Country$Belarus, $rakutentech$r10$R10$Country$Belgium, $rakutentech$r10$R10$Country$Belize, $rakutentech$r10$R10$Country$Benin, $rakutentech$r10$R10$Country$Bermuda, $rakutentech$r10$R10$Country$Bhutan, $rakutentech$r10$R10$Country$Bolivia, $rakutentech$r10$R10$Country$BosniaandHerzegovina, $rakutentech$r10$R10$Country$Botswana, $rakutentech$r10$R10$Country$Brazil, $rakutentech$r10$R10$Country$BritishIndianOceanTerritory, $rakutentech$r10$R10$Country$BritishVirginIslands, $rakutentech$r10$R10$Country$Brunei, $rakutentech$r10$R10$Country$Bulgaria, $rakutentech$r10$R10$Country$BurkinaFaso, $rakutentech$r10$R10$Country$Burundi, $rakutentech$r10$R10$Country$Cambodia, $rakutentech$r10$R10$Country$Cameroon, $rakutentech$r10$R10$Country$Canada, $rakutentech$r10$R10$Country$CapeVerde, $rakutentech$r10$R10$Country$CaymanIslands, $rakutentech$r10$R10$Country$CentralAfricanRepublic, $rakutentech$r10$R10$Country$Chad, $rakutentech$r10$R10$Country$Chile, $rakutentech$r10$R10$Country$China, $rakutentech$r10$R10$Country$ChristmasIsland, $rakutentech$r10$R10$Country$CocosIslands, $rakutentech$r10$R10$Country$Colombia, $rakutentech$r10$R10$Country$Comoros, $rakutentech$r10$R10$Country$CookIslands, $rakutentech$r10$R10$Country$CostaRica, $rakutentech$r10$R10$Country$Croatia, $rakutentech$r10$R10$Country$Cuba, $rakutentech$r10$R10$Country$Curacao, $rakutentech$r10$R10$Country$Cyprus, $rakutentech$r10$R10$Country$CzechRepublic, $rakutentech$r10$R10$Country$DemocraticRepublicoftheCongo, $rakutentech$r10$R10$Country$Denmark, $rakutentech$r10$R10$Country$Djibouti, $rakutentech$r10$R10$Country$Dominica, $rakutentech$r10$R10$Country$DominicanRepublic, $rakutentech$r10$R10$Country$EastTimor, $rakutentech$r10$R10$Country$Ecuador, $rakutentech$r10$R10$Country$Egypt, $rakutentech$r10$R10$Country$ElSalvador, $rakutentech$r10$R10$Country$EquatorialGuinea, $rakutentech$r10$R10$Country$Eritrea, $rakutentech$r10$R10$Country$Estonia, $rakutentech$r10$R10$Country$Ethiopia, $rakutentech$r10$R10$Country$FalklandIslands, $rakutentech$r10$R10$Country$FaroeIslands, $rakutentech$r10$R10$Country$Fiji, $rakutentech$r10$R10$Country$Finland, $rakutentech$r10$R10$Country$France, $rakutentech$r10$R10$Country$FrenchPolynesia, $rakutentech$r10$R10$Country$Gabon, $rakutentech$r10$R10$Country$Gambia, $rakutentech$r10$R10$Country$Georgia, $rakutentech$r10$R10$Country$Germany, $rakutentech$r10$R10$Country$Ghana, $rakutentech$r10$R10$Country$Gibraltar, $rakutentech$r10$R10$Country$Greece, $rakutentech$r10$R10$Country$Greenland, $rakutentech$r10$R10$Country$Grenada, $rakutentech$r10$R10$Country$Guam, $rakutentech$r10$R10$Country$Guatemala, $rakutentech$r10$R10$Country$Guernsey, $rakutentech$r10$R10$Country$Guinea, $rakutentech$r10$R10$Country$GuineaBissau, $rakutentech$r10$R10$Country$Guyana, $rakutentech$r10$R10$Country$Haiti, $rakutentech$r10$R10$Country$Honduras, $rakutentech$r10$R10$Country$HongKong, $rakutentech$r10$R10$Country$Hungary, $rakutentech$r10$R10$Country$Iceland, $rakutentech$r10$R10$Country$India, $rakutentech$r10$R10$Country$Indonesia, $rakutentech$r10$R10$Country$Iran, $rakutentech$r10$R10$Country$Iraq, $rakutentech$r10$R10$Country$Ireland, $rakutentech$r10$R10$Country$IsleofMan, $rakutentech$r10$R10$Country$Israel, $rakutentech$r10$R10$Country$Italy, $rakutentech$r10$R10$Country$IvoryCoast, $rakutentech$r10$R10$Country$Jamaica, $rakutentech$r10$R10$Country$Japan, $rakutentech$r10$R10$Country$Jersey, $rakutentech$r10$R10$Country$Jordan, $rakutentech$r10$R10$Country$Kazakhstan, $rakutentech$r10$R10$Country$Kenya, $rakutentech$r10$R10$Country$Kiribati, $rakutentech$r10$R10$Country$Kosovo, $rakutentech$r10$R10$Country$Kuwait, $rakutentech$r10$R10$Country$Kyrgyzstan, $rakutentech$r10$R10$Country$Laos, $rakutentech$r10$R10$Country$Latvia, $rakutentech$r10$R10$Country$Lebanon, $rakutentech$r10$R10$Country$Lesotho, $rakutentech$r10$R10$Country$Liberia, $rakutentech$r10$R10$Country$Libya, $rakutentech$r10$R10$Country$Liechtenstein, $rakutentech$r10$R10$Country$Lithuania, $rakutentech$r10$R10$Country$Luxembourg, $rakutentech$r10$R10$Country$Macau, $rakutentech$r10$R10$Country$Macedonia, $rakutentech$r10$R10$Country$Madagascar, $rakutentech$r10$R10$Country$Malawi, $rakutentech$r10$R10$Country$Malaysia, $rakutentech$r10$R10$Country$Maldives, $rakutentech$r10$R10$Country$Mali, $rakutentech$r10$R10$Country$Malta, $rakutentech$r10$R10$Country$MarshallIslands, $rakutentech$r10$R10$Country$Mauritania, $rakutentech$r10$R10$Country$Mauritius, $rakutentech$r10$R10$Country$Mayotte, $rakutentech$r10$R10$Country$Mexico, $rakutentech$r10$R10$Country$Micronesia, $rakutentech$r10$R10$Country$Moldova, $rakutentech$r10$R10$Country$Monaco, $rakutentech$r10$R10$Country$Mongolia, $rakutentech$r10$R10$Country$Montenegro, $rakutentech$r10$R10$Country$Montserrat, $rakutentech$r10$R10$Country$Morocco, $rakutentech$r10$R10$Country$Mozambique, $rakutentech$r10$R10$Country$Myanmar, $rakutentech$r10$R10$Country$Namibia, $rakutentech$r10$R10$Country$Nauru, $rakutentech$r10$R10$Country$Nepal, $rakutentech$r10$R10$Country$Netherlands, $rakutentech$r10$R10$Country$NewCaledonia, $rakutentech$r10$R10$Country$NewZealand, $rakutentech$r10$R10$Country$Nicaragua, $rakutentech$r10$R10$Country$Niger, $rakutentech$r10$R10$Country$Nigeria, $rakutentech$r10$R10$Country$Niue, $rakutentech$r10$R10$Country$NorthKorea, $rakutentech$r10$R10$Country$NorthernMarianaIslands, $rakutentech$r10$R10$Country$Norway, $rakutentech$r10$R10$Country$Oman, $rakutentech$r10$R10$Country$Pakistan, $rakutentech$r10$R10$Country$Palau, $rakutentech$r10$R10$Country$Palestine, $rakutentech$r10$R10$Country$Panama, $rakutentech$r10$R10$Country$PapuaNewGuinea, $rakutentech$r10$R10$Country$Paraguay, $rakutentech$r10$R10$Country$Peru, $rakutentech$r10$R10$Country$Philippines, $rakutentech$r10$R10$Country$Pitcairn, $rakutentech$r10$R10$Country$Poland, $rakutentech$r10$R10$Country$Portugal, $rakutentech$r10$R10$Country$PuertoRico, $rakutentech$r10$R10$Country$Qatar, $rakutentech$r10$R10$Country$RepublicoftheCongo, $rakutentech$r10$R10$Country$Reunion, $rakutentech$r10$R10$Country$Romania, $rakutentech$r10$R10$Country$Russia, $rakutentech$r10$R10$Country$Rwanda, $rakutentech$r10$R10$Country$SaintBarthelemy, $rakutentech$r10$R10$Country$SaintHelena, $rakutentech$r10$R10$Country$SaintKittsandNevis, $rakutentech$r10$R10$Country$SaintLucia, $rakutentech$r10$R10$Country$SaintMartin, $rakutentech$r10$R10$Country$SaintPierreandMiquelon, $rakutentech$r10$R10$Country$SaintVincentandTheGrenadines, $rakutentech$r10$R10$Country$Samoa, $rakutentech$r10$R10$Country$SanMarino, $rakutentech$r10$R10$Country$SaoTomeandPrincipe, $rakutentech$r10$R10$Country$SaudiArabia, $rakutentech$r10$R10$Country$Senegal, $rakutentech$r10$R10$Country$Serbia, $rakutentech$r10$R10$Country$Seychelles, $rakutentech$r10$R10$Country$SierraLeone, $rakutentech$r10$R10$Country$Singapore, $rakutentech$r10$R10$Country$SintMaarten, $rakutentech$r10$R10$Country$Slovakia, $rakutentech$r10$R10$Country$Slovenia, $rakutentech$r10$R10$Country$SolomonIslands, $rakutentech$r10$R10$Country$Somalia, $rakutentech$r10$R10$Country$SouthAfrica, $rakutentech$r10$R10$Country$SouthKorea, $rakutentech$r10$R10$Country$SouthSudan, $rakutentech$r10$R10$Country$Spain, $rakutentech$r10$R10$Country$SriLanka, $rakutentech$r10$R10$Country$Sudan, $rakutentech$r10$R10$Country$Suriname, $rakutentech$r10$R10$Country$SvalbardandJanMayen, $rakutentech$r10$R10$Country$Swaziland, $rakutentech$r10$R10$Country$Sweden, $rakutentech$r10$R10$Country$Switzerland, $rakutentech$r10$R10$Country$Syria, $rakutentech$r10$R10$Country$Taiwan, $rakutentech$r10$R10$Country$Tajikistan, $rakutentech$r10$R10$Country$Tanzania, $rakutentech$r10$R10$Country$Thailand, $rakutentech$r10$R10$Country$Togo, $rakutentech$r10$R10$Country$Tokelau, $rakutentech$r10$R10$Country$Tonga, $rakutentech$r10$R10$Country$TrinidadandTobago, $rakutentech$r10$R10$Country$Tunisia, $rakutentech$r10$R10$Country$Turkey, $rakutentech$r10$R10$Country$Turkmenistan, $rakutentech$r10$R10$Country$TurksandCaicosIslands, $rakutentech$r10$R10$Country$Tuvalu, $rakutentech$r10$R10$Country$USVirginIslands, $rakutentech$r10$R10$Country$Uganda, $rakutentech$r10$R10$Country$Ukraine, $rakutentech$r10$R10$Country$UnitedArabEmirates, $rakutentech$r10$R10$Country$UnitedKingdom, $rakutentech$r10$R10$Country$UnitedStates, $rakutentech$r10$R10$Country$Uruguay, $rakutentech$r10$R10$Country$Uzbekistan, $rakutentech$r10$R10$Country$Vanuatu, $rakutentech$r10$R10$Country$Vatican, $rakutentech$r10$R10$Country$Venezuela, $rakutentech$r10$R10$Country$Vietnam, $rakutentech$r10$R10$Country$WallisandFutuna, $rakutentech$r10$R10$Country$WesternSahara, $rakutentech$r10$R10$Country$Yemen, $rakutentech$r10$R10$Country$Zambia, $rakutentech$r10$R10$Country$Zimbabwe]);
var $rakutentech$r10$R10$FormComponents$Internal$Phone$countryOptions = $rakutentech$r10$R10$Country$list;
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString = A2($elm$core$Basics$composeR, $elm$core$String$toLower, $elm$core$String$trim);
var $rakutentech$r10$R10$Country$toCountryNameWithAlias = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return 'Afghanistan (\u202Bافغانستان\u202C\u200E)';
		case 'Albania':
			return 'Albania (Shqipëri)';
		case 'Algeria':
			return 'Algeria (\u202Bالجزائر\u202C\u200E)';
		case 'AmericanSamoa':
			return 'American Samoa';
		case 'Andorra':
			return 'Andorra';
		case 'Angola':
			return 'Angola';
		case 'Anguilla':
			return 'Anguilla';
		case 'Antarctica':
			return 'Antarctica';
		case 'AntiguaandBarbuda':
			return 'Antigua and Barbuda';
		case 'Argentina':
			return 'Argentina';
		case 'Armenia':
			return 'Armenia (Հայաստան)';
		case 'Aruba':
			return 'Aruba';
		case 'Australia':
			return 'Australia';
		case 'Austria':
			return 'Austria (Österreich)';
		case 'Azerbaijan':
			return 'Azerbaijan (Azərbaycan)';
		case 'Bahamas':
			return 'Bahamas';
		case 'Bahrain':
			return 'Bahrain (\u202Bالبحرين\u202C\u200E)';
		case 'Bangladesh':
			return 'Bangladesh (বাংলাদেশ)';
		case 'Barbados':
			return 'Barbados';
		case 'Belarus':
			return 'Belarus (Беларусь)';
		case 'Belgium':
			return 'Belgium (België)';
		case 'Belize':
			return 'Belize';
		case 'Benin':
			return 'Benin (Bénin)';
		case 'Bermuda':
			return 'Bermuda';
		case 'Bhutan':
			return 'Bhutan (འབྲུག)';
		case 'Bolivia':
			return 'Bolivia';
		case 'BosniaandHerzegovina':
			return 'Bosnia and Herzegovina (Босна и Херцеговина)';
		case 'Botswana':
			return 'Botswana';
		case 'Brazil':
			return 'Brazil (Brasil)';
		case 'BritishIndianOceanTerritory':
			return 'British Indian Ocean Territory';
		case 'BritishVirginIslands':
			return 'British Virgin Islands';
		case 'Brunei':
			return 'Brunei';
		case 'Bulgaria':
			return 'Bulgaria (България)';
		case 'BurkinaFaso':
			return 'Burkina Faso';
		case 'Burundi':
			return 'Burundi (Uburundi)';
		case 'Cambodia':
			return 'Cambodia (កម្ពុជា)';
		case 'Cameroon':
			return 'Cameroon (Cameroun)';
		case 'Canada':
			return 'Canada';
		case 'CapeVerde':
			return 'Cape Verde (Kabu Verdi)';
		case 'CaymanIslands':
			return 'Cayman Islands';
		case 'CentralAfricanRepublic':
			return 'Central African Republic (République centrafricaine)';
		case 'Chad':
			return 'Chad (Tchad)';
		case 'Chile':
			return 'Chile';
		case 'China':
			return 'China (中国)';
		case 'ChristmasIsland':
			return 'Christmas Island';
		case 'CocosIslands':
			return 'Cocos (Keeling) Islands';
		case 'Colombia':
			return 'Colombia';
		case 'Comoros':
			return 'Comoros (\u202Bجزر القمر\u202C\u200E)';
		case 'CookIslands':
			return 'Cook Islands';
		case 'CostaRica':
			return 'Costa Rica';
		case 'Croatia':
			return 'Croatia (Hrvatska)';
		case 'Cuba':
			return 'Cuba';
		case 'Curacao':
			return 'Curaçao';
		case 'Cyprus':
			return 'Cyprus (Κύπρος)';
		case 'CzechRepublic':
			return 'Czech Republic (Česká republika)';
		case 'DemocraticRepublicoftheCongo':
			return 'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)';
		case 'Denmark':
			return 'Denmark (Danmark)';
		case 'Djibouti':
			return 'Djibouti';
		case 'Dominica':
			return 'Dominica';
		case 'DominicanRepublic':
			return 'Dominican Republic (República Dominicana)';
		case 'EastTimor':
			return 'Timor-Leste';
		case 'Ecuador':
			return 'Ecuador';
		case 'Egypt':
			return 'Egypt (\u202Bمصر\u202C\u200E)';
		case 'ElSalvador':
			return 'El Salvador';
		case 'EquatorialGuinea':
			return 'Equatorial Guinea (Guinea Ecuatorial)';
		case 'Eritrea':
			return 'Eritrea';
		case 'Estonia':
			return 'Estonia (Eesti)';
		case 'Ethiopia':
			return 'Ethiopia';
		case 'FalklandIslands':
			return 'Falkland Islands (Islas Malvinas)';
		case 'FaroeIslands':
			return 'Faroe Islands (Føroyar)';
		case 'Fiji':
			return 'Fiji';
		case 'Finland':
			return 'Finland (Suomi)';
		case 'France':
			return 'France';
		case 'FrenchPolynesia':
			return 'French Polynesia (Polynésie française)';
		case 'Gabon':
			return 'Gabon';
		case 'Gambia':
			return 'Gambia';
		case 'Georgia':
			return 'Georgia (საქართველო)';
		case 'Germany':
			return 'Germany (Deutschland)';
		case 'Ghana':
			return 'Ghana (Gaana)';
		case 'Gibraltar':
			return 'Gibraltar';
		case 'Greece':
			return 'Greece (Ελλάδα)';
		case 'Greenland':
			return 'Greenland (Kalaallit Nunaat)';
		case 'Grenada':
			return 'Grenada';
		case 'Guam':
			return 'Guam';
		case 'Guatemala':
			return 'Guatemala';
		case 'Guernsey':
			return 'Guernsey';
		case 'Guinea':
			return 'Guinea (Guinée)';
		case 'GuineaBissau':
			return 'Guinea-Bissau (Guiné Bissau)';
		case 'Guyana':
			return 'Guyana';
		case 'Haiti':
			return 'Haiti';
		case 'Honduras':
			return 'Honduras';
		case 'HongKong':
			return 'Hong Kong (香港)';
		case 'Hungary':
			return 'Hungary (Magyarország)';
		case 'Iceland':
			return 'Iceland (Ísland)';
		case 'India':
			return 'India (भारत)';
		case 'Indonesia':
			return 'Indonesia';
		case 'Iran':
			return 'Iran (\u202Bایران\u202C\u200E)';
		case 'Iraq':
			return 'Iraq (\u202Bالعراق\u202C\u200E)';
		case 'Ireland':
			return 'Ireland';
		case 'IsleofMan':
			return 'Isle of Man';
		case 'Israel':
			return 'Israel (\u202Bישראל\u202C\u200E)';
		case 'Italy':
			return 'Italy (Italia)';
		case 'IvoryCoast':
			return 'Côte d’Ivoire';
		case 'Jamaica':
			return 'Jamaica';
		case 'Japan':
			return 'Japan (日本)';
		case 'Jersey':
			return 'Jersey';
		case 'Jordan':
			return 'Jordan (\u202Bالأردن\u202C\u200E)';
		case 'Kazakhstan':
			return 'Kazakhstan (Казахстан)';
		case 'Kenya':
			return 'Kenya';
		case 'Kiribati':
			return 'Kiribati';
		case 'Kosovo':
			return 'Kosovo';
		case 'Kuwait':
			return 'Kuwait (\u202Bالكويت\u202C\u200E)';
		case 'Kyrgyzstan':
			return 'Kyrgyzstan (Кыргызстан)';
		case 'Laos':
			return 'Laos (ລາວ)';
		case 'Latvia':
			return 'Latvia (Latvija)';
		case 'Lebanon':
			return 'Lebanon (\u202Bلبنان\u202C\u200E)';
		case 'Lesotho':
			return 'Lesotho';
		case 'Liberia':
			return 'Liberia';
		case 'Libya':
			return 'Libya (\u202Bليبيا\u202C\u200E)';
		case 'Liechtenstein':
			return 'Liechtenstein';
		case 'Lithuania':
			return 'Lithuania (Lietuva)';
		case 'Luxembourg':
			return 'Luxembourg';
		case 'Macau':
			return 'Macau (澳門)';
		case 'Macedonia':
			return 'Macedonia (FYROM) (Македонија)';
		case 'Madagascar':
			return 'Madagascar (Madagasikara)';
		case 'Malawi':
			return 'Malawi';
		case 'Malaysia':
			return 'Malaysia';
		case 'Maldives':
			return 'Maldives';
		case 'Mali':
			return 'Mali';
		case 'Malta':
			return 'Malta';
		case 'MarshallIslands':
			return 'Marshall Islands';
		case 'Mauritania':
			return 'Mauritania (\u202Bموريتانيا\u202C\u200E)';
		case 'Mauritius':
			return 'Mauritius (Moris)';
		case 'Mayotte':
			return 'Mayotte';
		case 'Mexico':
			return 'Mexico (México)';
		case 'Micronesia':
			return 'Micronesia';
		case 'Moldova':
			return 'Moldova (Republica Moldova)';
		case 'Monaco':
			return 'Monaco';
		case 'Mongolia':
			return 'Mongolia (Монгол)';
		case 'Montenegro':
			return 'Montenegro (Crna Gora)';
		case 'Montserrat':
			return 'Montserrat';
		case 'Morocco':
			return 'Morocco (\u202Bالمغرب\u202C\u200E)';
		case 'Mozambique':
			return 'Mozambique (Moçambique)';
		case 'Myanmar':
			return 'Myanmar (Burma) (မြန်မာ)';
		case 'Namibia':
			return 'Namibia (Namibië)';
		case 'Nauru':
			return 'Nauru';
		case 'Nepal':
			return 'Nepal (नेपाल)';
		case 'Netherlands':
			return 'Netherlands (Nederland)';
		case 'NewCaledonia':
			return 'New Caledonia (Nouvelle-Calédonie)';
		case 'NewZealand':
			return 'New Zealand';
		case 'Nicaragua':
			return 'Nicaragua';
		case 'Niger':
			return 'Niger (Nijar)';
		case 'Nigeria':
			return 'Nigeria';
		case 'Niue':
			return 'Niue';
		case 'NorthKorea':
			return 'North Korea (조선 민주주의 인민 공화국)';
		case 'NorthernMarianaIslands':
			return 'Northern Mariana Islands';
		case 'Norway':
			return 'Norway (Norge)';
		case 'Oman':
			return 'Oman (\u202Bعُمان\u202C\u200E)';
		case 'Pakistan':
			return 'Pakistan (\u202Bپاکستان\u202C\u200E)';
		case 'Palau':
			return 'Palau';
		case 'Palestine':
			return 'Palestine (\u202Bفلسطين\u202C\u200E)';
		case 'Panama':
			return 'Panama (Panamá)';
		case 'PapuaNewGuinea':
			return 'Papua New Guinea';
		case 'Paraguay':
			return 'Paraguay';
		case 'Peru':
			return 'Peru (Perú)';
		case 'Philippines':
			return 'Philippines';
		case 'Pitcairn':
			return 'Pitcairn';
		case 'Poland':
			return 'Poland (Polska)';
		case 'Portugal':
			return 'Portugal';
		case 'PuertoRico':
			return 'Puerto Rico';
		case 'Qatar':
			return 'Qatar (\u202Bقطر\u202C\u200E)';
		case 'RepublicoftheCongo':
			return 'Congo (Republic) (Congo-Brazzaville)';
		case 'Reunion':
			return 'Réunion (La Réunion)';
		case 'Romania':
			return 'Romania (România)';
		case 'Russia':
			return 'Russia (Россия)';
		case 'Rwanda':
			return 'Rwanda';
		case 'SaintBarthelemy':
			return 'Saint Barthélemy';
		case 'SaintHelena':
			return 'Saint Helena';
		case 'SaintKittsandNevis':
			return 'Saint Kitts and Nevis';
		case 'SaintLucia':
			return 'Saint Lucia';
		case 'SaintMartin':
			return 'Saint Martin (Saint-Martin (partie française))';
		case 'SaintPierreandMiquelon':
			return 'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)';
		case 'SaintVincentandTheGrenadines':
			return 'Saint Vincent and the Grenadines';
		case 'Samoa':
			return 'Samoa';
		case 'SanMarino':
			return 'San Marino';
		case 'SaoTomeandPrincipe':
			return 'São Tomé and Príncipe (São Tomé e Príncipe)';
		case 'SaudiArabia':
			return 'Saudi Arabia (\u202Bالمملكة العربية السعودية\u202C\u200E)';
		case 'Senegal':
			return 'Senegal (Sénégal)';
		case 'Serbia':
			return 'Serbia (Србија)';
		case 'Seychelles':
			return 'Seychelles';
		case 'SierraLeone':
			return 'Sierra Leone';
		case 'Singapore':
			return 'Singapore';
		case 'SintMaarten':
			return 'Sint Maarten';
		case 'Slovakia':
			return 'Slovakia (Slovensko)';
		case 'Slovenia':
			return 'Slovenia (Slovenija)';
		case 'SolomonIslands':
			return 'Solomon Islands';
		case 'Somalia':
			return 'Somalia (Soomaaliya)';
		case 'SouthAfrica':
			return 'South Africa';
		case 'SouthKorea':
			return 'South Korea (대한민국)';
		case 'SouthSudan':
			return 'South Sudan (\u202Bجنوب السودان\u202C\u200E)';
		case 'Spain':
			return 'Spain (España)';
		case 'SriLanka':
			return 'Sri Lanka (ශ්\u200Dරී ලංකාව)';
		case 'Sudan':
			return 'Sudan (\u202Bالسودان\u202C\u200E)';
		case 'Suriname':
			return 'Suriname';
		case 'SvalbardandJanMayen':
			return 'Svalbard and Jan Mayen';
		case 'Swaziland':
			return 'Swaziland';
		case 'Sweden':
			return 'Sweden (Sverige)';
		case 'Switzerland':
			return 'Switzerland (Schweiz)';
		case 'Syria':
			return 'Syria (\u202Bسوريا\u202C\u200E)';
		case 'Taiwan':
			return 'Taiwan (台灣)';
		case 'Tajikistan':
			return 'Tajikistan';
		case 'Tanzania':
			return 'Tanzania';
		case 'Thailand':
			return 'Thailand (ไทย)';
		case 'Togo':
			return 'Togo';
		case 'Tokelau':
			return 'Tokelau';
		case 'Tonga':
			return 'Tonga';
		case 'TrinidadandTobago':
			return 'Trinidad and Tobago';
		case 'Tunisia':
			return 'Tunisia (\u202Bتونس\u202C\u200E)';
		case 'Turkey':
			return 'Turkey (Türkiye)';
		case 'Turkmenistan':
			return 'Turkmenistan';
		case 'TurksandCaicosIslands':
			return 'Turks and Caicos Islands';
		case 'Tuvalu':
			return 'Tuvalu';
		case 'USVirginIslands':
			return 'U.S. Virgin Islands';
		case 'Uganda':
			return 'Uganda';
		case 'Ukraine':
			return 'Ukraine (Україна)';
		case 'UnitedArabEmirates':
			return 'United Arab Emirates (\u202Bالإمارات العربية المتحدة\u202C\u200E)';
		case 'UnitedKingdom':
			return 'United Kingdom';
		case 'UnitedStates':
			return 'United States';
		case 'Uruguay':
			return 'Uruguay';
		case 'Uzbekistan':
			return 'Uzbekistan (Oʻzbekiston)';
		case 'Vanuatu':
			return 'Vanuatu';
		case 'Vatican':
			return 'Vatican City (Città del Vaticano)';
		case 'Venezuela':
			return 'Venezuela';
		case 'Vietnam':
			return 'Vietnam (Việt Nam)';
		case 'WallisandFutuna':
			return 'Wallis and Futuna (Wallis-et-Futuna)';
		case 'WesternSahara':
			return 'Western Sahara (\u202Bالصحراء الغربية\u202C\u200E)';
		case 'Yemen':
			return 'Yemen (\u202Bاليمن\u202C\u200E)';
		case 'Zambia':
			return 'Zambia';
		default:
			return 'Zimbabwe';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$searchFn = F2(
	function (search, country) {
		return A2(
			$elm$core$String$contains,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(search),
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(
				$rakutentech$r10$R10$Country$toCountryNameWithAlias(country)));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch = F2(
	function (search, fieldOptions) {
		return $elm$core$String$isEmpty(search) ? fieldOptions : A2(
			$elm$core$List$filter,
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$searchFn(search),
			fieldOptions);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnInputClick = function (a) {
	return {$: 'OnInputClick', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnInputClick = F3(
	function (model, args, filteredFieldOption) {
		var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var activeOptionIndex = A2(
			$elm$core$Maybe$withDefault,
			-1,
			A2(
				$elm$core$Maybe$andThen,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionIndex(filteredFieldOption),
				maybeCountryValue));
		var activeOptionY = A4(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getOptionY,
			model.scroll,
			args,
			activeOptionIndex,
			$elm$core$List$length(filteredFieldOption));
		return $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnInputClick(
			{key: args.key, selectedY: activeOptionY});
	});
var $rakutentech$r10$R10$Country$toCountryCode = function (country) {
	switch (country.$) {
		case 'Afghanistan':
			return 'AF';
		case 'Albania':
			return 'AL';
		case 'Algeria':
			return 'DZ';
		case 'AmericanSamoa':
			return 'AS';
		case 'Andorra':
			return 'AD';
		case 'Angola':
			return 'AO';
		case 'Anguilla':
			return 'AI';
		case 'Antarctica':
			return 'AQ';
		case 'AntiguaandBarbuda':
			return 'AG';
		case 'Argentina':
			return 'AR';
		case 'Armenia':
			return 'AM';
		case 'Aruba':
			return 'AW';
		case 'Australia':
			return 'AU';
		case 'Austria':
			return 'AT';
		case 'Azerbaijan':
			return 'AZ';
		case 'Bahamas':
			return 'BS';
		case 'Bahrain':
			return 'BH';
		case 'Bangladesh':
			return 'BD';
		case 'Barbados':
			return 'BB';
		case 'Belarus':
			return 'BY';
		case 'Belgium':
			return 'BE';
		case 'Belize':
			return 'BZ';
		case 'Benin':
			return 'BJ';
		case 'Bermuda':
			return 'BM';
		case 'Bhutan':
			return 'BT';
		case 'Bolivia':
			return 'BO';
		case 'BosniaandHerzegovina':
			return 'BA';
		case 'Botswana':
			return 'BW';
		case 'Brazil':
			return 'BR';
		case 'BritishIndianOceanTerritory':
			return 'IO';
		case 'BritishVirginIslands':
			return 'VG';
		case 'Brunei':
			return 'BN';
		case 'Bulgaria':
			return 'BG';
		case 'BurkinaFaso':
			return 'BF';
		case 'Burundi':
			return 'BI';
		case 'Cambodia':
			return 'KH';
		case 'Cameroon':
			return 'CM';
		case 'Canada':
			return 'CA';
		case 'CapeVerde':
			return 'CV';
		case 'CaymanIslands':
			return 'KY';
		case 'CentralAfricanRepublic':
			return 'CF';
		case 'Chad':
			return 'TD';
		case 'Chile':
			return 'CL';
		case 'China':
			return 'CN';
		case 'ChristmasIsland':
			return 'CX';
		case 'CocosIslands':
			return 'CC';
		case 'Colombia':
			return 'CO';
		case 'Comoros':
			return 'KM';
		case 'CookIslands':
			return 'CK';
		case 'CostaRica':
			return 'CR';
		case 'Croatia':
			return 'HR';
		case 'Cuba':
			return 'CU';
		case 'Curacao':
			return 'CW';
		case 'Cyprus':
			return 'CY';
		case 'CzechRepublic':
			return 'CZ';
		case 'DemocraticRepublicoftheCongo':
			return 'CD';
		case 'Denmark':
			return 'DK';
		case 'Djibouti':
			return 'DJ';
		case 'Dominica':
			return 'DM';
		case 'DominicanRepublic':
			return 'DO';
		case 'EastTimor':
			return 'TL';
		case 'Ecuador':
			return 'EC';
		case 'Egypt':
			return 'EG';
		case 'ElSalvador':
			return 'SV';
		case 'EquatorialGuinea':
			return 'GQ';
		case 'Eritrea':
			return 'ER';
		case 'Estonia':
			return 'EE';
		case 'Ethiopia':
			return 'ET';
		case 'FalklandIslands':
			return 'FK';
		case 'FaroeIslands':
			return 'FO';
		case 'Fiji':
			return 'FJ';
		case 'Finland':
			return 'FI';
		case 'France':
			return 'FR';
		case 'FrenchPolynesia':
			return 'PF';
		case 'Gabon':
			return 'GA';
		case 'Gambia':
			return 'GM';
		case 'Georgia':
			return 'GE';
		case 'Germany':
			return 'DE';
		case 'Ghana':
			return 'GH';
		case 'Gibraltar':
			return 'GI';
		case 'Greece':
			return 'GR';
		case 'Greenland':
			return 'GL';
		case 'Grenada':
			return 'GD';
		case 'Guam':
			return 'GU';
		case 'Guatemala':
			return 'GT';
		case 'Guernsey':
			return 'GG';
		case 'Guinea':
			return 'GN';
		case 'GuineaBissau':
			return 'GW';
		case 'Guyana':
			return 'GY';
		case 'Haiti':
			return 'HT';
		case 'Honduras':
			return 'HN';
		case 'HongKong':
			return 'HK';
		case 'Hungary':
			return 'HU';
		case 'Iceland':
			return 'IS';
		case 'India':
			return 'IN';
		case 'Indonesia':
			return 'ID';
		case 'Iran':
			return 'IR';
		case 'Iraq':
			return 'IQ';
		case 'Ireland':
			return 'IE';
		case 'IsleofMan':
			return 'IM';
		case 'Israel':
			return 'IL';
		case 'Italy':
			return 'IT';
		case 'IvoryCoast':
			return 'CI';
		case 'Jamaica':
			return 'JM';
		case 'Japan':
			return 'JP';
		case 'Jersey':
			return 'JE';
		case 'Jordan':
			return 'JO';
		case 'Kazakhstan':
			return 'KZ';
		case 'Kenya':
			return 'KE';
		case 'Kiribati':
			return 'KI';
		case 'Kosovo':
			return 'XK';
		case 'Kuwait':
			return 'KW';
		case 'Kyrgyzstan':
			return 'KG';
		case 'Laos':
			return 'LA';
		case 'Latvia':
			return 'LV';
		case 'Lebanon':
			return 'LB';
		case 'Lesotho':
			return 'LS';
		case 'Liberia':
			return 'LR';
		case 'Libya':
			return 'LY';
		case 'Liechtenstein':
			return 'LI';
		case 'Lithuania':
			return 'LT';
		case 'Luxembourg':
			return 'LU';
		case 'Macau':
			return 'MO';
		case 'Macedonia':
			return 'MK';
		case 'Madagascar':
			return 'MG';
		case 'Malawi':
			return 'MW';
		case 'Malaysia':
			return 'MY';
		case 'Maldives':
			return 'MV';
		case 'Mali':
			return 'ML';
		case 'Malta':
			return 'MT';
		case 'MarshallIslands':
			return 'MH';
		case 'Mauritania':
			return 'MR';
		case 'Mauritius':
			return 'MU';
		case 'Mayotte':
			return 'YT';
		case 'Mexico':
			return 'MX';
		case 'Micronesia':
			return 'FM';
		case 'Moldova':
			return 'MD';
		case 'Monaco':
			return 'MC';
		case 'Mongolia':
			return 'MN';
		case 'Montenegro':
			return 'ME';
		case 'Montserrat':
			return 'MS';
		case 'Morocco':
			return 'MA';
		case 'Mozambique':
			return 'MZ';
		case 'Myanmar':
			return 'MM';
		case 'Namibia':
			return 'NA';
		case 'Nauru':
			return 'NR';
		case 'Nepal':
			return 'NP';
		case 'Netherlands':
			return 'NL';
		case 'NewCaledonia':
			return 'NC';
		case 'NewZealand':
			return 'NZ';
		case 'Nicaragua':
			return 'NI';
		case 'Niger':
			return 'NE';
		case 'Nigeria':
			return 'NG';
		case 'Niue':
			return 'NU';
		case 'NorthKorea':
			return 'KP';
		case 'NorthernMarianaIslands':
			return 'MP';
		case 'Norway':
			return 'NO';
		case 'Oman':
			return 'OM';
		case 'Pakistan':
			return 'PK';
		case 'Palau':
			return 'PW';
		case 'Palestine':
			return 'PS';
		case 'Panama':
			return 'PA';
		case 'PapuaNewGuinea':
			return 'PG';
		case 'Paraguay':
			return 'PY';
		case 'Peru':
			return 'PE';
		case 'Philippines':
			return 'PH';
		case 'Pitcairn':
			return 'PN';
		case 'Poland':
			return 'PL';
		case 'Portugal':
			return 'PT';
		case 'PuertoRico':
			return 'PR';
		case 'Qatar':
			return 'QA';
		case 'RepublicoftheCongo':
			return 'CG';
		case 'Reunion':
			return 'RE';
		case 'Romania':
			return 'RO';
		case 'Russia':
			return 'RU';
		case 'Rwanda':
			return 'RW';
		case 'SaintBarthelemy':
			return 'BL';
		case 'SaintHelena':
			return 'SH';
		case 'SaintKittsandNevis':
			return 'KN';
		case 'SaintLucia':
			return 'LC';
		case 'SaintMartin':
			return 'MF';
		case 'SaintPierreandMiquelon':
			return 'PM';
		case 'SaintVincentandTheGrenadines':
			return 'VC';
		case 'Samoa':
			return 'WS';
		case 'SanMarino':
			return 'SM';
		case 'SaoTomeandPrincipe':
			return 'ST';
		case 'SaudiArabia':
			return 'SA';
		case 'Senegal':
			return 'SN';
		case 'Serbia':
			return 'RS';
		case 'Seychelles':
			return 'SC';
		case 'SierraLeone':
			return 'SL';
		case 'Singapore':
			return 'SG';
		case 'SintMaarten':
			return 'SX';
		case 'Slovakia':
			return 'SK';
		case 'Slovenia':
			return 'SI';
		case 'SolomonIslands':
			return 'SB';
		case 'Somalia':
			return 'SO';
		case 'SouthAfrica':
			return 'ZA';
		case 'SouthKorea':
			return 'KR';
		case 'SouthSudan':
			return 'SS';
		case 'Spain':
			return 'ES';
		case 'SriLanka':
			return 'LK';
		case 'Sudan':
			return 'SD';
		case 'Suriname':
			return 'SR';
		case 'SvalbardandJanMayen':
			return 'SJ';
		case 'Swaziland':
			return 'SZ';
		case 'Sweden':
			return 'SE';
		case 'Switzerland':
			return 'CH';
		case 'Syria':
			return 'SY';
		case 'Taiwan':
			return 'TW';
		case 'Tajikistan':
			return 'TJ';
		case 'Tanzania':
			return 'TZ';
		case 'Thailand':
			return 'TH';
		case 'Togo':
			return 'TG';
		case 'Tokelau':
			return 'TK';
		case 'Tonga':
			return 'TO';
		case 'TrinidadandTobago':
			return 'TT';
		case 'Tunisia':
			return 'TN';
		case 'Turkey':
			return 'TR';
		case 'Turkmenistan':
			return 'TM';
		case 'TurksandCaicosIslands':
			return 'TC';
		case 'Tuvalu':
			return 'TV';
		case 'USVirginIslands':
			return 'VI';
		case 'Uganda':
			return 'UG';
		case 'Ukraine':
			return 'UA';
		case 'UnitedArabEmirates':
			return 'AE';
		case 'UnitedKingdom':
			return 'GB';
		case 'UnitedStates':
			return 'US';
		case 'Uruguay':
			return 'UY';
		case 'Uzbekistan':
			return 'UZ';
		case 'Vanuatu':
			return 'VU';
		case 'Vatican':
			return 'VA';
		case 'Venezuela':
			return 'VE';
		case 'Vietnam':
			return 'VN';
		case 'WallisandFutuna':
			return 'WF';
		case 'WesternSahara':
			return 'EH';
		case 'Yemen':
			return 'YE';
		case 'Zambia':
			return 'ZM';
		default:
			return 'ZW';
	}
};
var $rakutentech$r10$R10$FormComponents$Internal$Utils$maybeCountryCodeToString = function (maybeCountry_) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryCode, maybeCountry_));
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagButton = function (_v0) {
	var palette = _v0.palette;
	var disabled = _v0.disabled;
	var toMsg = _v0.toMsg;
	var key = _v0.key;
	var filteredFieldOption = _v0.filteredFieldOption;
	var model = _v0.model;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
		_Utils_ap(
			_List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.2s'),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 10, 5),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(10),
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(3),
					$lucamug$elm_ui_with_context$Element$WithContext$moveRight(8)
				]),
			(!disabled) ? _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, palette))
						])),
					$lucamug$elm_ui_with_context$Element$WithContext$focused(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
							A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, palette))
						])),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
						_List_fromArray(
							[
								_Utils_Tuple2(
								$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.space,
								toMsg(
									A3(
										$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnInputClick,
										model,
										{key: key, maxDisplayCount: 5, selectOptionHeight: 36},
										filteredFieldOption)))
							])))
				]) : _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1))
				])),
		{
			label: function () {
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				return A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(7)
						]),
					_List_fromArray(
						[
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_Nil,
							$rakutentech$r10$R10$FormComponents$Internal$Utils$getFlagIcon(
								$rakutentech$r10$R10$FormComponents$Internal$Utils$maybeCountryCodeToString(maybeCountryValue))),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($elm$core$Maybe$map, $rakutentech$r10$R10$Country$toCountryTelCode, maybeCountryValue))),
							A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$Font$size(11),
									$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.6),
									$rakutentech$r10$R10$Transition$transition('all 0.2s'),
									$lucamug$elm_ui_with_context$Element$WithContext$rotate(
									model.opened ? $elm$core$Basics$pi : 0)
								]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
								(!disabled) ? '▼' : ''))
						]));
			}(),
			onPress: disabled ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				toMsg(
					A3(
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnInputClick,
						model,
						{key: key, maxDisplayCount: 5, selectOptionHeight: 36},
						filteredFieldOption)))
		});
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowDown = function (a) {
	return {$: 'OnArrowDown', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowUp = function (a) {
	return {$: 'OnArrowUp', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc = F2(
	function (a, b) {
		return {$: 'OnEsc', a: a, b: b};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnFocus = function (a) {
	return {$: 'OnFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnLoseFocus = function (a) {
	return {$: 'OnLoseFocus', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnValueChange = F3(
	function (a, b, c) {
		return {$: 'OnValueChange', a: a, b: b, c: c};
	});
var $rakutentech$r10$R10$FormTypes$SpecialPhone = function (a) {
	return {$: 'SpecialPhone', a: a};
};
var $rakutentech$r10$R10$FormTypes$TypeSpecial = function (a) {
	return {$: 'TypeSpecial', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId = function (key) {
	return 'dropdown-container-' + key;
};
var $rakutentech$r10$R10$Form$Internal$Shared$toPhonePlaceholder = F2(
	function (fieldKey, maybeCountry) {
		return A2(
			$elm$core$Maybe$andThen,
			function (country) {
				var _v0 = _Utils_Tuple2(fieldKey, country);
				_v0$4:
				while (true) {
					if (_v0.b.$ === 'Japan') {
						switch (_v0.a) {
							case 'mobile_phone':
								var _v1 = _v0.b;
								return $elm$core$Maybe$Just('08011112222');
							case 'telephone':
								var _v2 = _v0.b;
								return $elm$core$Maybe$Just('08011112222');
							case 'idlite_phone':
								var _v3 = _v0.b;
								return $elm$core$Maybe$Just('08011112222');
							case 'fax':
								var _v4 = _v0.b;
								return $elm$core$Maybe$Just('08011112222');
							default:
								break _v0$4;
						}
					} else {
						break _v0$4;
					}
				}
				return $elm$core$Maybe$Nothing;
			},
			maybeCountry);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnScroll = function (a) {
	return {$: 'OnScroll', a: a};
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$comboboxOptionNoResults = function (_v0) {
	var palette = _v0.palette;
	var selectOptionHeight = _v0.selectOptionHeight;
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$el,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
				$lucamug$elm_ui_with_context$Element$WithContext$height(
				$lucamug$elm_ui_with_context$Element$WithContext$px(selectOptionHeight)),
				$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
				{bottom: 0, left: 12, right: 0, top: 0}),
				$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.5, palette))
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[$lucamug$elm_ui_with_context$Element$WithContext$centerY]),
			$lucamug$elm_ui_with_context$Element$WithContext$text('No results')));
};
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxOption = F4(
	function (countryValue, select, args, country) {
		var isSelected_ = _Utils_eq(
			$rakutentech$r10$R10$Country$fromString(select),
			$elm$core$Maybe$Just(country));
		var isActiveValue = _Utils_eq(
			countryValue,
			$elm$core$Maybe$Just(country));
		var getShadowColor = isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.1, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.1, args.palette);
		var getBackgroundColor = (isActiveValue && isSelected_) ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.15, args.palette) : (isActiveValue ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryVariantA, 0.09, args.palette) : (isSelected_ ? A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.09, args.palette) : A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0, args.palette)));
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(args.selectOptionHeight)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(getBackgroundColor),
					$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
							{
								blur: 0,
								color: getShadowColor,
								offset: _Utils_Tuple2(0, 0),
								size: 40
							})
						]))
				]),
			args.toOptionEl(country));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnSearch = F2(
	function (a, b) {
		return {$: 'OnSearch', a: a, b: b};
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnSearch = F2(
	function (args, newSearch) {
		return A2(
			$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnSearch,
			{
				filteredFieldOption: A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, newSearch, args.countryOptions),
				key: args.key,
				maxDisplayCount: args.maxDisplayCount,
				selectOptionHeight: args.selectOptionHeight
			},
			newSearch);
	});
var $rakutentech$r10$R10$Svg$Icons$x = F3(
	function (attrs, cl, size) {
		return A3(
			$rakutentech$r10$R10$Svg$Utils$wrapper32,
			attrs,
			size,
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill('none'),
							$elm$svg$Svg$Attributes$d('M0 0h32v32H0z')
						]),
					_List_Nil),
					A2(
					$elm$svg$Svg$path,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$fill(
							$rakutentech$r10$R10$Color$Utils$toCssRgba(cl)),
							$elm$svg$Svg$Attributes$d('M27 6.45L25.55 5 16 14.55 6.45 5 5 6.45 14.55 16 5 25.55 6.45 27 16 17.45 25.55 27 27 25.55 17.45 16 27 6.45z')
						]),
					_List_Nil)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewSearchBox = F2(
	function (model, args) {
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
					{bottom: 1, left: 0, right: 0, top: 0}),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette)),
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 10, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						return A2(
							$lucamug$elm_ui_with_context$Element$WithContext$Input$text,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$elm$html$Html$Attributes$id(
										$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownSearchBoxId(args.key))),
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
									$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
									{bottom: 16, left: 8, right: 16, top: 16}),
									$lucamug$elm_ui_with_context$Element$WithContext$Border$width(0),
									$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
									$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
										_List_fromArray(
											[
												_Utils_Tuple2(
												$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
												$elm$core$String$isEmpty(model.search) ? args.toMsg(
													A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc, args.key, true)) : args.toMsg($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$NoOp))
											])))
								]),
							{
								label: A2(
									$lucamug$elm_ui_with_context$Element$WithContext$Input$labelLeft,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$centerY,
											$lucamug$elm_ui_with_context$Element$WithContext$moveRight(5)
										]),
									A3(
										$rakutentech$r10$R10$Svg$Icons$search,
										_List_Nil,
										$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.contextR10.theme),
										18)),
								onChange: function (string) {
									return args.toMsg(
										A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getMsgOnSearch, args, string));
								},
								placeholder: $elm$core$Maybe$Nothing,
								text: model.search
							});
					}),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
									A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.3, args.palette))
								])),
							$rakutentech$r10$R10$Transition$transition('all 0.2s'),
							$lucamug$elm_ui_with_context$Element$WithContext$padding(6),
							$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(20)
						]),
					{
						label: $lucamug$elm_ui_with_context$Element$WithContext$withContext(
							function (c) {
								return A3(
									$rakutentech$r10$R10$Svg$Icons$x,
									_List_Nil,
									$rakutentech$r10$R10$Color$Svg$fontHighEmphasis(c.contextR10.theme),
									18);
							}),
						onPress: $elm$core$Maybe$Just(
							args.toMsg(
								A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc, args.key, false)))
					})
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxDropdown = F4(
	function (model, args, opened, filteredFieldOption) {
		var visibleCount = args.maxDisplayCount * 3;
		var optionsCount = $elm$core$List$length(filteredFieldOption);
		var elementsScrolledFromTop = ($elm$core$Basics$round(model.scroll) / args.selectOptionHeight) | 0;
		var visibleFrom = elementsScrolledFromTop - args.maxDisplayCount;
		var visibleMoveDown = $rakutentech$r10$R10$FormComponents$Internal$Phone$Update$dropdownHingeHeight + (A2($elm$core$Basics$max, 0, visibleFrom) * args.selectOptionHeight);
		var visibleTo = visibleFrom + visibleCount;
		var visibleOptions = function () {
			if (optionsCount > 0) {
				var maybeCountryValue = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
				return A2(
					$elm$core$List$map,
					function (country) {
						return _Utils_Tuple2(
							$rakutentech$r10$R10$Country$toCountryNameWithAlias(country),
							A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxOption, maybeCountryValue, model.select, args, country));
					},
					A3($rakutentech$r10$R10$FormComponents$Internal$Utils$listSlice, visibleFrom, visibleTo, filteredFieldOption));
			} else {
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'no_results',
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$comboboxOptionNoResults(args))
					]);
			}
		}();
		var contentHeight = args.selectOptionHeight * A2($elm$core$Basics$max, optionsCount, 1);
		return (!opened) ? $lucamug$elm_ui_with_context$Element$WithContext$none : A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$clip,
					$lucamug$elm_ui_with_context$Element$WithContext$moveDown(60),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					$elm$html$Html$Attributes$tabindex(-1)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$borderA, 0.5, args.palette)),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '2')),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(8),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 10,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA, 0.3, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: 3
					}),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2(
						$elm$html$Html$Events$on,
						'focusout',
						A2(
							$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut,
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId(args.key),
							args.toMsg(
								A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc, args.key, false)))))
				]),
			_List_fromArray(
				[
					A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewSearchBox, model, args),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height(
							$lucamug$elm_ui_with_context$Element$WithContext$px(
								A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Update$getDropdownHeight, args, optionsCount))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'overscroll-behavior', 'contain')),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onScroll(
								A2($elm$core$Basics$composeL, args.toMsg, $rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnScroll))),
							$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
							$rakutentech$r10$R10$FormComponents$Internal$UI$Color$font(args.palette)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContentId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$scrollbarX,
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A2(
								$lucamug$elm_ui_with_context$Element$WithContext$Keyed$column,
								_List_fromArray(
									[
										$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$shrink),
										$lucamug$elm_ui_with_context$Element$WithContext$moveDown(visibleMoveDown),
										$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'min-width', '100%'))
									]),
								visibleOptions))
						]),
					A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(contentHeight)),
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$view = F3(
	function (attrs, model, args) {
		var maybeTelCode = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				$rakutentech$r10$R10$Country$toCountryTelCode,
				$rakutentech$r10$R10$Country$fromTelephoneAsString(model.value)));
		var valueToShowOnTheScreen = A3($elm$core$String$replace, maybeTelCode, '', model.value);
		var maybeCountry = $rakutentech$r10$R10$Country$fromTelephoneAsString(model.value);
		var inputAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$type_('tel')),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$id(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$inputPhoneElementId(args.key))),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				A2(
					$elm$html$Html$Events$on,
					'focusout',
					A2(
						$rakutentech$r10$R10$FormComponents$Internal$Utils$FocusOut$onFocusOut,
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId(args.key),
						args.toMsg(
							$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnLoseFocus(model.value))))),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
					_List_fromArray(
						[
							_Utils_Tuple2(
							$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
							args.toMsg(
								A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc, args.key, false)))
						])))
			]);
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, model.search, args.countryOptions);
		var textArgs = {
			autocomplete: $elm$core$Maybe$Nothing,
			disabled: args.disabled,
			fieldType: $elm$core$Maybe$Just(
				$rakutentech$r10$R10$FormTypes$TypeSpecial(
					$rakutentech$r10$R10$FormTypes$SpecialPhone(
						{disableInternationalPrefixPhoneChange: false, isJapanService: false}))),
			floatingLabelAlwaysUp: true,
			focused: model.focused,
			helperText: args.helperText,
			idDom: $elm$core$Maybe$Nothing,
			label: args.label,
			leadingIcon: args.leadingIcon,
			maybeValid: args.maybeValid,
			msgOnChange: A2(
				$elm$core$Basics$composeL,
				args.toMsg,
				A2(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnValueChange,
					args.key,
					{filteredFieldOption: filteredFieldOption, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})),
			msgOnEnter: $elm$core$Maybe$Nothing,
			msgOnFocus: args.toMsg(
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnFocus(model.value)),
			msgOnKeyDown: $elm$core$Maybe$Nothing,
			msgOnLoseFocus: $elm$core$Maybe$Nothing,
			msgOnTogglePasswordShow: $elm$core$Maybe$Nothing,
			palette: args.palette,
			placeholder: A2($rakutentech$r10$R10$Form$Internal$Shared$toPhonePlaceholder, args.key, maybeCountry),
			requiredLabel: args.requiredLabel,
			showPassword: false,
			style: args.style,
			textType: $rakutentech$r10$R10$FormTypes$TextPlain,
			trailingIcon: args.trailingIcon,
			value: valueToShowOnTheScreen
		};
		var arrowKeysPressBatch = args.disabledCountryChange ? _List_Nil : _List_fromArray(
			[
				_Utils_Tuple2(
				$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.down,
				args.toMsg(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowDown(
						{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight}))),
				_Utils_Tuple2(
				$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.up,
				args.toMsg(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnArrowUp(
						{filteredFieldOption: filteredFieldOption, key: args.key, maxDisplayCount: args.maxDisplayCount, selectOptionHeight: args.selectOptionHeight})))
			]);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(50),
					$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
					{bottom: 0, left: 0, right: 0, top: 15})
				]),
			_List_fromArray(
				[
					A3(
					$rakutentech$r10$R10$FormComponents$Internal$Text$view,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$id(
								$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$dropdownContainerId(args.key))),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$elm$html$Html$Attributes$tabindex(-1)),
							$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
							$rakutentech$r10$R10$FormComponents$Internal$UI$onKeyPressBatch(
								_Utils_ap(
									arrowKeysPressBatch,
									model.opened ? A2(
										$elm$core$List$cons,
										_Utils_Tuple2(
											$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.esc,
											args.toMsg(
												A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnEsc, args.key, false))),
										function () {
											var _v0 = $rakutentech$r10$R10$Country$fromString(model.select);
											if (_v0.$ === 'Just') {
												var country = _v0.a;
												return _List_fromArray(
													[
														_Utils_Tuple2(
														$rakutentech$r10$R10$FormComponents$Internal$UI$keyCode.enter,
														args.toMsg(
															A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect, args.key, country)))
													]);
											} else {
												return _List_Nil;
											}
										}()) : _List_Nil))),
							$lucamug$elm_ui_with_context$Element$WithContext$inFront(
							A4($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$viewComboboxDropdown, model, args, model.opened, filteredFieldOption))
						]),
					_Utils_ap(inputAttrs, attrs),
					textArgs)
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$insertBold = F2(
	function (indexes, string) {
		return A3($rakutentech$r10$R10$FormComponents$Internal$Utils$stringInsertAtMulti, '**', indexes, string);
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$viewOptionEl = F2(
	function (_v0, country) {
		var search = _v0.search;
		var msgOnSelect = _v0.msgOnSelect;
		var label = $rakutentech$r10$R10$Country$toCountryNameWithAlias(country);
		var insertPositions = A2(
			$elm$core$List$concatMap,
			function (idx) {
				return _List_fromArray(
					[
						idx,
						idx + $elm$core$String$length(search)
					]);
			},
			A2(
				$elm$core$String$indexes,
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(search),
				$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$normalizeString(label)));
		var withBold = $elm$core$List$isEmpty(insertPositions) ? label : A2($rakutentech$r10$R10$FormComponents$Internal$Phone$insertBold, insertPositions, label);
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$row,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'z-index', '0')),
					$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
					msgOnSelect(country)),
					$lucamug$elm_ui_with_context$Element$WithContext$pointer,
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 12, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$spacing(8),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'mask-image', 'linear-gradient(right, rgba(255,255,0,0), rgba(255,255,0, 1) 16px)')),
					$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
					A2($elm$html$Html$Attributes$style, '-webkit-mask-image', '-webkit-linear-gradient(right, rgba(255,255,0,0) 10px, rgba(255,255,0, 1) 16px)'))
				]),
			_List_fromArray(
				[
					$rakutentech$r10$R10$FormComponents$Internal$Utils$getFlagIcon(
					$rakutentech$r10$R10$FormComponents$Internal$Utils$maybeCountryCodeToString(
						$elm$core$Maybe$Just(country))),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$row,
					_List_Nil,
					$rakutentech$r10$R10$SimpleMarkdown$elementMarkdown(withBold)),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$el,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5)
						]),
					$lucamug$elm_ui_with_context$Element$WithContext$text(
						'(' + ($rakutentech$r10$R10$Country$toCountryTelCode(country) + ')')))
				]));
	});
var $rakutentech$r10$R10$FormComponents$Internal$Phone$view = F3(
	function (attrs, model, conf) {
		var countryOptions_ = A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$FormComponents$Internal$Phone$countryOptions, conf.countryOptions);
		var filteredFieldOption = A2($rakutentech$r10$R10$FormComponents$Internal$Phone$Common$filterBySearch, model.search, countryOptions_);
		var args = {
			countryOptions: countryOptions_,
			disabled: conf.disabled,
			disabledCountryChange: conf.disabledCountryChange,
			helperText: conf.helperText,
			key: conf.key,
			label: conf.label,
			leadingIcon: _List_fromArray(
				[
					$rakutentech$r10$R10$FormComponents$Internal$Phone$getFlagButton(
					{disabled: conf.disabled || conf.disabledCountryChange, filteredFieldOption: filteredFieldOption, key: conf.key, model: model, palette: conf.palette, style: conf.style, toMsg: conf.toMsg})
				]),
			maxDisplayCount: 5,
			maybeValid: conf.maybeValid,
			palette: conf.palette,
			requiredLabel: conf.requiredLabel,
			selectOptionHeight: 36,
			style: conf.style,
			toMsg: conf.toMsg,
			toOptionEl: $rakutentech$r10$R10$FormComponents$Internal$Phone$viewOptionEl(
				{
					msgOnSelect: A2(
						$elm$core$Basics$composeR,
						$rakutentech$r10$R10$FormComponents$Internal$Phone$Common$OnOptionSelect(conf.key),
						conf.toMsg),
					search: model.search
				}),
			trailingIcon: _List_Nil
		};
		return A3($rakutentech$r10$R10$FormComponents$Internal$Phone$Combobox$view, attrs, model, args);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewSpecial = F3(
	function (args, typeSpecial, formConf) {
		var isOptional = !$rakutentech$r10$R10$Form$Internal$MakerForView$isRequired_(args.fieldConf.validationSpecs);
		var _v0 = args.fieldState.value;
		var disabledChangeCountry = typeSpecial.a;
		return $lucamug$elm_ui_with_context$Element$WithContext$withContext(
			function (_v2) {
				var model = {focused: args.focused, opened: args.active, over: args.fieldState.over, scroll: args.fieldState.scroll, search: args.fieldState.search, select: args.fieldState.select, value: args.fieldState.value};
				var countryTelCode = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$map,
						$rakutentech$r10$R10$Country$toCountryTelCode,
						$rakutentech$r10$R10$Country$fromTelephoneAsString(args.fieldState.value)));
				var valueWithoutCountryTelCode = A3($elm$core$String$replace, countryTelCode, '', args.fieldState.value);
				return A3(
					$rakutentech$r10$R10$FormComponents$Internal$Phone$view,
					_List_Nil,
					model,
					{
						countryOptions: $elm$core$Maybe$Nothing,
						disabled: args.fieldState.disabled,
						disabledCountryChange: disabledChangeCountry.disableInternationalPrefixPhoneChange,
						helperText: args.fieldConf.helperText,
						key: $rakutentech$r10$R10$Form$Internal$Key$toString(args.key),
						label: args.fieldConf.label,
						maybeValid: A3($rakutentech$r10$R10$Form$Internal$MakerForView$maybeValid, isOptional, valueWithoutCountryTelCode, args.fieldState.validation),
						palette: args.palette,
						requiredLabel: args.fieldConf.requiredLabel,
						style: args.style,
						toMsg: A3($rakutentech$r10$R10$Form$Internal$Msg$OnPhoneMsg, args.key, args.fieldConf, formConf)
					});
			});
	});
var $rakutentech$r10$R10$FormTypes$TextUsername = {$: 'TextUsername'};
var $rakutentech$r10$R10$FormTypes$TextUsernameWithUseEmailCheckbox = function (a) {
	return {$: 'TextUsernameWithUseEmailCheckbox', a: a};
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewUsernameWithUseEmailCheckbox = F5(
	function (makerArgs, args, checkboxLabel, formConf, formState) {
		var validationIcon = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$FormTypes$NoIcon,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.validationIcon;
				},
				args.fieldConf.validationSpecs));
		var fieldState = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$Form$Internal$FieldState$init,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, makerArgs.key, formState.fieldsState));
		var checkboxKey = $rakutentech$r10$R10$Form$Internal$Shared$copyEmailIntoUsernameCheckboxKey;
		var checkboxState = A2(
			$elm$core$Maybe$withDefault,
			function (state) {
				return _Utils_update(
					state,
					{value: 'True'});
			}($rakutentech$r10$R10$Form$Internal$FieldState$init),
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, checkboxKey, formState.fieldsState));
		var textArgs = function () {
			var oldFieldState = args.fieldState;
			var disabled = $rakutentech$r10$R10$Form$Internal$Helpers$stringToBool(checkboxState.value);
			return _Utils_update(
				args,
				{
					fieldState: _Utils_update(
						oldFieldState,
						{disabled: disabled})
				});
		}();
		var checkboxFocused = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isFocused, checkboxKey, formState.focused);
		var checkboxConf = {
			allowOverMaxLength: true,
			autocomplete: $elm$core$Maybe$Nothing,
			clickableLabel: true,
			helperText: $elm$core$Maybe$Nothing,
			id: $rakutentech$r10$R10$Form$Internal$Key$toString(checkboxKey),
			idDom: $elm$core$Maybe$Just(
				$rakutentech$r10$R10$Form$Internal$Key$toString(checkboxKey)),
			label: checkboxLabel,
			maxWidth: $elm$core$Maybe$Nothing,
			minWidth: $elm$core$Maybe$Nothing,
			placeholder: $elm$core$Maybe$Nothing,
			requiredLabel: $elm$core$Maybe$Nothing,
			type_: $rakutentech$r10$R10$FormTypes$TypeText(
				$rakutentech$r10$R10$FormTypes$TextUsernameWithUseEmailCheckbox(checkboxLabel)),
			validationSpecs: $elm$core$Maybe$Nothing
		};
		var checkboxActive = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isActive, checkboxKey, formState.active);
		var checkboxArgs = {
			active: checkboxActive,
			fieldConf: checkboxConf,
			fieldState: checkboxState,
			focused: checkboxFocused,
			key: checkboxKey,
			palette: makerArgs.palette,
			style: makerArgs.style,
			translator: makerArgs.translator(checkboxKey)
		};
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
				]),
			_List_fromArray(
				[
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					_List_fromArray(
						[
							A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewText, textArgs, $rakutentech$r10$R10$FormTypes$TextUsername, formConf),
							A3(
							$rakutentech$r10$R10$FormComponents$Internal$Validations$viewValidation,
							makerArgs.palette,
							validationIcon,
							A4(
								$rakutentech$r10$R10$Form$Internal$Converter$fromFieldStateValidationToComponentValidation,
								args.fieldConf.validationSpecs,
								fieldState,
								makerArgs.translator(makerArgs.key),
								args.fieldConf.type_))
						])),
					A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary, checkboxArgs, $rakutentech$r10$R10$FormTypes$BinaryCheckbox, formConf, $elm$core$Maybe$Nothing)
				]));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityField = F3(
	function (args, fieldConf, formConf) {
		var focused = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isFocused, args.key, args.formState.focused);
		var fieldState = A2(
			$elm$core$Maybe$withDefault,
			$rakutentech$r10$R10$Form$Internal$FieldState$init,
			A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.fieldsState));
		var active = A2($rakutentech$r10$R10$Form$Internal$MakerForView$isActive, args.key, args.formState.active);
		var args2 = {
			active: active,
			fieldConf: fieldConf,
			fieldState: fieldState,
			focused: focused,
			key: args.key,
			palette: args.palette,
			style: args.style,
			translator: args.translator(args.key)
		};
		var field = function () {
			var _v0 = fieldConf.type_;
			switch (_v0.$) {
				case 'TypeText':
					var typeText = _v0.a;
					switch (typeText.$) {
						case 'TextUsernameWithUseEmailCheckbox':
							var checkboxLabel = typeText.a;
							return A5($rakutentech$r10$R10$Form$Internal$MakerForView$viewUsernameWithUseEmailCheckbox, args, args2, checkboxLabel, formConf, args.formState);
						case 'TextPasswordCurrent':
							var checkboxLabel = typeText.a;
							return A6($rakutentech$r10$R10$Form$Internal$MakerForView$viewPasswordWithHideShowCheckbox, typeText, args, args2, checkboxLabel, formConf, args.formState);
						case 'TextPasswordNew':
							var checkboxLabel = typeText.a;
							return A6($rakutentech$r10$R10$Form$Internal$MakerForView$viewPasswordWithHideShowCheckbox, typeText, args, args2, checkboxLabel, formConf, args.formState);
						default:
							return A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewText, args2, typeText, formConf);
					}
				case 'TypeBinary':
					var typeBinary = _v0.a;
					return A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewBinary, args2, typeBinary, formConf, $elm$core$Maybe$Nothing);
				case 'TypeSingle':
					var typeSingle = _v0.a;
					var options = _v0.b;
					return A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewSingle, args2, typeSingle, options, formConf);
				case 'TypeMulti':
					return $lucamug$elm_ui_with_context$Element$WithContext$text('TODO');
				default:
					var typeSpecial = _v0.a;
					return A3($rakutentech$r10$R10$Form$Internal$MakerForView$viewSpecial, args2, typeSpecial, formConf);
			}
		}();
		return _List_fromArray(
			[field]);
	});
var $rakutentech$r10$R10$Form$Internal$Msg$AddEntity = function (a) {
	return {$: 'AddEntity', a: a};
};
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiLastRow = function (args) {
	var shadow = F2(
		function (size_, a) {
			return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
				{
					blur: 0,
					color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, a, args.palette),
					offset: _Utils_Tuple2(0, 0),
					size: size_
				});
		});
	var plusColor = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(args.palette);
	var iconSize = 18;
	var iconCommonAttrs = F4(
		function (widthPx, heightPx, color, rotateDeg) {
			return _List_fromArray(
				[
					$rakutentech$r10$R10$Transition$transition('all 0.2s '),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(2),
					$lucamug$elm_ui_with_context$Element$WithContext$centerX,
					$lucamug$elm_ui_with_context$Element$WithContext$centerY,
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
					$lucamug$elm_ui_with_context$Element$WithContext$height(
					$lucamug$elm_ui_with_context$Element$WithContext$px(heightPx)),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(color),
					$lucamug$elm_ui_with_context$Element$WithContext$rotate(
					$elm$core$Basics$degrees(rotateDeg))
				]);
		});
	var buttonAttrs = _List_fromArray(
		[
			$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
			$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
			$elm$html$Html$Attributes$class('ripple')),
			$rakutentech$r10$R10$Transition$transition('all 0.11s ease-out'),
			$lucamug$elm_ui_with_context$Element$WithContext$padding(8),
			$lucamug$elm_ui_with_context$Element$WithContext$width(
			$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
			$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
			A2(shadow, 10, 0),
			$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
			A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, args.palette)),
			$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
				])),
			$lucamug$elm_ui_with_context$Element$WithContext$focused(
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
					A2(shadow, 1, 1),
					$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
					A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
				]))
		]);
	var buttonToAddEntity = A2(
		$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
		buttonAttrs,
		{
			label: A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							A4(iconCommonAttrs, iconSize, 2, plusColor, 0),
							$lucamug$elm_ui_with_context$Element$WithContext$none)),
						$lucamug$elm_ui_with_context$Element$WithContext$inFront(
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							A4(iconCommonAttrs, 2, iconSize, plusColor, 0),
							$lucamug$elm_ui_with_context$Element$WithContext$none))
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none),
			onPress: $elm$core$Maybe$Just(
				$rakutentech$r10$R10$Form$Internal$Msg$AddEntity(args.key))
		});
	return A2(
		$lucamug$elm_ui_with_context$Element$WithContext$row,
		_List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
				$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
			]),
		_List_fromArray(
			[
				buttonToAddEntity,
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none)
			]));
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeSubTitle = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(18);
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntitySubTitle = F2(
	function (palette, titleConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing($rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
						_List_fromArray(
							[$rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeSubTitle]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(titleConf.title)
							])),
						A3(
						$rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText,
						palette,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$alpha(0.5),
								$lucamug$elm_ui_with_context$Element$WithContext$Font$size(14),
								$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
								{bottom: 0, left: 0, right: 0, top: $rakutentech$r10$R10$FormComponents$Internal$UI$genericSpacing})
							]),
						titleConf.helperText)
					]))
			]);
	});
var $rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeTitle = $lucamug$elm_ui_with_context$Element$WithContext$Font$size(24);
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityTitle = F2(
	function (palette, titleConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(12),
						$lucamug$elm_ui_with_context$Element$WithContext$paddingEach(
						{bottom: 0, left: 0, right: 0, top: 40}),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$paragraph,
						_List_fromArray(
							[$rakutentech$r10$R10$FormComponents$Internal$UI$fontSizeTitle]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(titleConf.title)
							])),
						A3($rakutentech$r10$R10$FormComponents$Internal$UI$viewHelperText, palette, _List_Nil, titleConf.helperText)
					]))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$Msg$ChangeTab = F2(
	function (a, b) {
		return {$: 'ChangeTab', a: a, b: b};
	});
var $rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrorsForOnlyExistingValidations = F2(
	function (allKeys, fieldsState) {
		return A2(
			$elm$core$List$filter,
			function (_v0) {
				var key = _v0.a;
				var fieldState = A2(
					$elm$core$Maybe$withDefault,
					$rakutentech$r10$R10$Form$Internal$FieldState$init,
					A2($rakutentech$r10$R10$Form$Internal$Dict$get, key, fieldsState));
				var _v1 = fieldState.validation;
				if (_v1.$ === 'NotYetValidated') {
					return false;
				} else {
					var listValidationMessage = _v1.a;
					return !$rakutentech$r10$R10$Form$Internal$FieldState$isValid(listValidationMessage);
				}
			},
			allKeys);
	});
var $rakutentech$r10$R10$Form$Internal$Update$isExistingFormFieldsValid = function (form) {
	var allKeys = $rakutentech$r10$R10$Form$Internal$Update$allValidationKeysMaker(form);
	var fieldsWithErrors_ = A2($rakutentech$r10$R10$Form$Internal$Update$entitiesWithErrorsForOnlyExistingValidations, allKeys, form.state.fieldsState);
	return _Utils_eq(
		$elm$core$List$head(fieldsWithErrors_),
		$elm$core$Maybe$Nothing);
};
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$mouseOverSurface = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$onSurfaceA(0.04);
var $rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA = F2(
	function (alpha, palette) {
		return $rakutentech$r10$R10$FormComponents$Internal$UI$Color$fromPaletteColor(
			A2($rakutentech$r10$R10$Palette$withOpacity, alpha, palette.surface));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewTab = F3(
	function (args, fieldState, _v0) {
		var index = _v0.index;
		var selected = _v0.selected;
		var entity = _v0.entity;
		var label = _v0.label;
		var valid = $rakutentech$r10$R10$Form$Internal$Update$isExistingFormFieldsValid(
			{
				conf: _List_fromArray(
					[entity]),
				state: args.formState
			});
		var _v1 = fieldState.disabled ? {clickOverlay: $lucamug$elm_ui_with_context$Element$WithContext$none, opacity: 0.5} : {
			clickOverlay: A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Events$onClick(
						A2(
							$rakutentech$r10$R10$Form$Internal$Msg$ChangeTab,
							args.key,
							$rakutentech$r10$R10$Form$Internal$Conf$getId(entity))),
						$lucamug$elm_ui_with_context$Element$WithContext$pointer,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$class('ripple')),
						$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
								$rakutentech$r10$R10$FormComponents$Internal$UI$Color$mouseOverSurface(args.palette))
							]))
					]),
				$lucamug$elm_ui_with_context$Element$WithContext$none),
			opacity: 1
		};
		var opacity = _v1.opacity;
		var clickOverlay = _v1.clickOverlay;
		var _v2 = selected ? {
			circleBackground: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA, opacity, args.palette),
			circleBorder: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette),
			circleText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette),
			labelText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$primaryA, opacity, args.palette)
		} : {
			circleBackground: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$surfaceA, opacity, args.palette),
			circleBorder: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette),
			circleText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette),
			labelText: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, opacity, args.palette)
		};
		var circleBackground = _v2.circleBackground;
		var circleBorder = _v2.circleBorder;
		var circleText = _v2.circleText;
		var labelText = _v2.labelText;
		return A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 0),
					$lucamug$elm_ui_with_context$Element$WithContext$inFront(clickOverlay)
				]),
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
						$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette)),
						A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, 8, 24),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(8),
						$lucamug$elm_ui_with_context$Element$WithContext$Font$color(labelText)
					]),
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
											$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
											$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
										]),
									$rakutentech$r10$R10$FormComponents$Internal$UI$showValidationIcon_(
										{
											displayValidation: true,
											maybeValid: $elm$core$Maybe$Just(valid),
											palette: args.palette,
											style: args.style
										}))),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
								$lucamug$elm_ui_with_context$Element$WithContext$width(
								$lucamug$elm_ui_with_context$Element$WithContext$px(24)),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(24),
								$lucamug$elm_ui_with_context$Element$WithContext$Background$color(circleBackground),
								$lucamug$elm_ui_with_context$Element$WithContext$Font$color(circleText),
								$lucamug$elm_ui_with_context$Element$WithContext$Border$innerShadow(
								{
									blur: 0,
									color: circleBorder,
									offset: _Utils_Tuple2(0, 0),
									size: 1
								})
							]),
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$el,
							_List_fromArray(
								[$lucamug$elm_ui_with_context$Element$WithContext$centerY, $lucamug$elm_ui_with_context$Element$WithContext$centerX]),
							$lucamug$elm_ui_with_context$Element$WithContext$text(
								$elm$core$String$fromInt(index + 1)))),
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$column,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$shrink)
							]),
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$text(label),
								A2(
								$lucamug$elm_ui_with_context$Element$WithContext$el,
								_Utils_ap(
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$Font$size(11),
											$lucamug$elm_ui_with_context$Element$WithContext$clip,
											$lucamug$elm_ui_with_context$Element$WithContext$Font$color(
											$rakutentech$r10$R10$FormComponents$Internal$UI$Color$error(args.palette)),
											$rakutentech$r10$R10$Transition$transition('all 0.15s ease-out')
										]),
									valid ? _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width(
											$lucamug$elm_ui_with_context$Element$WithContext$px(0)),
											$lucamug$elm_ui_with_context$Element$WithContext$height(
											$lucamug$elm_ui_with_context$Element$WithContext$px(0))
										]) : _List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width(
											$lucamug$elm_ui_with_context$Element$WithContext$px(80)),
											$lucamug$elm_ui_with_context$Element$WithContext$height(
											$lucamug$elm_ui_with_context$Element$WithContext$px(11))
										])),
								$lucamug$elm_ui_with_context$Element$WithContext$text('Validation error'))
							]))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					if ((_Utils_cmp(r, x / 2) > -1) && (_Utils_cmp(b, y / 2) > -1)) {
						var newTop = t - (y / 2);
						var newRight = r - (x / 2);
						var newLeft = l - (x / 2);
						var newBottom = b - (y / 2);
						return $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, newRight, newBottom, newLeft),
									newTop,
									newRight,
									newBottom,
									newLeft)));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $lucamug$elm_ui_with_context$Element$WithContext$wrappedRow = $lucamug$elm_ui_with_context$Element$WithContext$Internal$wrapContainer($mdgriffith$elm_ui$Element$wrappedRow);
var $rakutentech$r10$R10$Form$Internal$MakerForView$maker_ = F3(
	function (args, branchConf, rootFormConf) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (entity) {
					return A3(
						$rakutentech$r10$R10$Form$Internal$MakerForView$addValidationMessagesUnderTheField,
						A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
						entity,
						function () {
							switch (entity.$) {
								case 'EntityWrappable':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWrappable,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityWithBorder':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithBorder,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityNormal':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityNormal,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityWithTabs':
									var titleEntityList = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithTabs,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										titleEntityList,
										rootFormConf);
								case 'EntityMulti':
									var entities = entity.b;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMulti,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										entities,
										rootFormConf);
								case 'EntityField':
									var fieldConf = entity.a;
									return A3(
										$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityField,
										A2($rakutentech$r10$R10$Form$Internal$MakerForView$normalizeKey, args, entity),
										fieldConf,
										rootFormConf);
								case 'EntityTitle':
									var titleConf = entity.b;
									return A2($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityTitle, args.palette, titleConf);
								default:
									var titleConf = entity.b;
									return A2($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntitySubTitle, args.palette, titleConf);
							}
						}());
				},
				branchConf));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMulti = F3(
	function (args, entities, formConf) {
		var activeKeys = A2($rakutentech$r10$R10$Form$Internal$Helpers$getMultiActiveKeys, args.key, args.formState);
		return $elm$core$List$singleton(
			A2(
				$lucamug$elm_ui_with_context$Element$WithContext$column,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				function (rows) {
					return _Utils_ap(
						rows,
						_List_fromArray(
							[
								$rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiLastRow(args)
							]));
				}(
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							function (newKey) {
								return A4($rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiSingleRow, args, newKey, entities, formConf);
							},
							activeKeys)))));
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityMultiSingleRow = F4(
	function (args, newKey, entities, formConf) {
		var shadow = F2(
			function (size_, a) {
				return $lucamug$elm_ui_with_context$Element$WithContext$Border$shadow(
					{
						blur: 0,
						color: A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$labelA, a, args.palette),
						offset: _Utils_Tuple2(0, 0),
						size: size_
					});
			});
		var removeColor = $rakutentech$r10$R10$FormComponents$Internal$UI$Color$label(args.palette);
		var iconSize = 18;
		var iconCommonAttrs = F4(
			function (widthPx, heightPx, color, rotateDeg) {
				return _List_fromArray(
					[
						$rakutentech$r10$R10$Transition$transition('all 0.2s '),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(2),
						$lucamug$elm_ui_with_context$Element$WithContext$centerX,
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						$lucamug$elm_ui_with_context$Element$WithContext$px(widthPx)),
						$lucamug$elm_ui_with_context$Element$WithContext$height(
						$lucamug$elm_ui_with_context$Element$WithContext$px(heightPx)),
						$lucamug$elm_ui_with_context$Element$WithContext$Background$color(color),
						$lucamug$elm_ui_with_context$Element$WithContext$rotate(
						$elm$core$Basics$degrees(rotateDeg))
					]);
			});
		var buttonAttrs = _List_fromArray(
			[
				$lucamug$elm_ui_with_context$Element$WithContext$Border$width(1),
				$lucamug$elm_ui_with_context$Element$WithContext$Border$rounded(5),
				$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
				$elm$html$Html$Attributes$class('ripple')),
				$rakutentech$r10$R10$Transition$transition('all 0.11s ease-out'),
				$lucamug$elm_ui_with_context$Element$WithContext$padding(8),
				$lucamug$elm_ui_with_context$Element$WithContext$width(
				$lucamug$elm_ui_with_context$Element$WithContext$px(28)),
				$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
				A2(shadow, 10, 0),
				$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
				A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 0.5, args.palette)),
				$lucamug$elm_ui_with_context$Element$WithContext$mouseOver(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
						A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
					])),
				$lucamug$elm_ui_with_context$Element$WithContext$focused(
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alpha(1),
						A2(shadow, 1, 1),
						$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
						A2($rakutentech$r10$R10$FormComponents$Internal$UI$Color$containerA, 1, args.palette))
					]))
			]);
		var buttonToRemoveEntity = function (key_) {
			return A2(
				$lucamug$elm_ui_with_context$Element$WithContext$Input$button,
				buttonAttrs,
				{
					label: A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width(
								$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
								$lucamug$elm_ui_with_context$Element$WithContext$height(
								$lucamug$elm_ui_with_context$Element$WithContext$px(iconSize)),
								$rakutentech$r10$R10$Transition$transition('all 0.2s '),
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									A4(iconCommonAttrs, iconSize, 2, removeColor, 45),
									$lucamug$elm_ui_with_context$Element$WithContext$none)),
								$lucamug$elm_ui_with_context$Element$WithContext$inFront(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									A4(iconCommonAttrs, 2, iconSize, removeColor, -135),
									$lucamug$elm_ui_with_context$Element$WithContext$none))
							]),
						$lucamug$elm_ui_with_context$Element$WithContext$none),
					onPress: $elm$core$Maybe$Just(
						$rakutentech$r10$R10$Form$Internal$Msg$RemoveEntity(key_))
				});
		};
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$row,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(10),
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
					]),
				_List_fromArray(
					[
						buttonToRemoveEntity(newKey),
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$column,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
							]),
						A3(
							$rakutentech$r10$R10$Form$Internal$MakerForView$maker_,
							_Utils_update(
								args,
								{key: newKey}),
							entities,
							formConf))
					]))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityNormal = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric
					]),
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf)))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithBorder = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$el,
				_Utils_ap(
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
							$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					$rakutentech$r10$R10$FormComponents$Internal$UI$borderEntityWithBorder(args.palette)),
				A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$rakutentech$r10$R10$Form$Internal$MakerForView$paddingGeneric,
							$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric,
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf)))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWithTabs = F3(
	function (args, titleEntityList, formConf) {
		var tabSpacer = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width(
					A2($lucamug$elm_ui_with_context$Element$WithContext$maximum, 40, $lucamug$elm_ui_with_context$Element$WithContext$fill)),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill)
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		var paddingPx = 8;
		var firstEntity = $elm$core$List$head(titleEntityList);
		var maybeSelectedEntity = function () {
			var _v3 = A2($rakutentech$r10$R10$Form$Internal$Dict$get, args.key, args.formState.activeTabs);
			if (_v3.$ === 'Just') {
				var key_ = _v3.a;
				var _v4 = $elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v5) {
							var entity = _v5.b;
							return _Utils_eq(
								$rakutentech$r10$R10$Form$Internal$Conf$getId(entity),
								key_);
						},
						titleEntityList));
				if (_v4.$ === 'Just') {
					var entity_ = _v4.a;
					return $elm$core$Maybe$Just(entity_);
				} else {
					return firstEntity;
				}
			} else {
				return firstEntity;
			}
		}();
		var emptyTab = A2(
			$lucamug$elm_ui_with_context$Element$WithContext$el,
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
					$lucamug$elm_ui_with_context$Element$WithContext$moveLeft(paddingPx),
					$lucamug$elm_ui_with_context$Element$WithContext$Background$color(
					$rakutentech$r10$R10$FormComponents$Internal$UI$Color$surface(args.palette))
				]),
			$lucamug$elm_ui_with_context$Element$WithContext$none);
		if (maybeSelectedEntity.$ === 'Just') {
			var _v1 = maybeSelectedEntity.a;
			var selectedEntity = _v1.b;
			return _Utils_ap(
				_List_fromArray(
					[
						A2(
						$lucamug$elm_ui_with_context$Element$WithContext$el,
						_List_fromArray(
							[
								$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
								$lucamug$elm_ui_with_context$Element$WithContext$behindContent(
								A2(
									$lucamug$elm_ui_with_context$Element$WithContext$el,
									_List_fromArray(
										[
											$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
											$lucamug$elm_ui_with_context$Element$WithContext$centerY,
											A2($lucamug$elm_ui_with_context$Element$WithContext$paddingXY, paddingPx, 0)
										]),
									A2(
										$lucamug$elm_ui_with_context$Element$WithContext$el,
										_List_fromArray(
											[
												$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
												$lucamug$elm_ui_with_context$Element$WithContext$Border$widthEach(
												{bottom: 1, left: 0, right: 0, top: 0}),
												$lucamug$elm_ui_with_context$Element$WithContext$Border$color(
												$rakutentech$r10$R10$FormComponents$Internal$UI$Color$container(args.palette))
											]),
										$lucamug$elm_ui_with_context$Element$WithContext$none)))
							]),
						A2(
							$lucamug$elm_ui_with_context$Element$WithContext$row,
							_List_fromArray(
								[
									$lucamug$elm_ui_with_context$Element$WithContext$scrollbars,
									$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
								]),
							function (items) {
								return _Utils_ap(
									items,
									_List_fromArray(
										[emptyTab]));
							}(
								$elm$core$List$concat(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (index, _v2) {
												var label = _v2.a;
												var entity = _v2.b;
												var newKey = A2(
													$rakutentech$r10$R10$Form$Internal$Key$composeKey,
													args.key,
													$rakutentech$r10$R10$Form$Internal$Conf$getId(entity));
												var fieldState = A2(
													$elm$core$Maybe$withDefault,
													$rakutentech$r10$R10$Form$Internal$FieldState$init,
													A2($rakutentech$r10$R10$Form$Internal$Dict$get, newKey, args.formState.fieldsState));
												return _Utils_ap(
													_List_fromArray(
														[
															A3(
															$rakutentech$r10$R10$Form$Internal$MakerForView$viewTab,
															args,
															fieldState,
															{
																entity: entity,
																index: index,
																label: label,
																selected: _Utils_eq(
																	$rakutentech$r10$R10$Form$Internal$Conf$getId(selectedEntity),
																	$rakutentech$r10$R10$Form$Internal$Conf$getId(entity))
															})
														]),
													(!_Utils_eq(
														index + 1,
														$elm$core$List$length(titleEntityList))) ? _List_fromArray(
														[tabSpacer]) : _List_Nil);
											}),
										titleEntityList)))))
					]),
				A3(
					$rakutentech$r10$R10$Form$Internal$MakerForView$maker_,
					args,
					_List_fromArray(
						[selectedEntity]),
					formConf));
		} else {
			return _List_Nil;
		}
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$viewEntityWrappable = F3(
	function (args, entities, formConf) {
		return _List_fromArray(
			[
				A2(
				$lucamug$elm_ui_with_context$Element$WithContext$wrappedRow,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$alignTop,
						$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$fill),
						$rakutentech$r10$R10$Form$Internal$MakerForView$spacingGeneric,
						$lucamug$elm_ui_with_context$Element$WithContext$htmlAttribute(
						$elm$html$Html$Attributes$class('safari10-ios10-flex-fix'))
					]),
				A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, entities, formConf))
			]);
	});
var $rakutentech$r10$R10$Form$Internal$MakerForView$maker = F2(
	function (args, formConf) {
		return A3($rakutentech$r10$R10$Form$Internal$MakerForView$maker_, args, formConf, formConf);
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $lucamug$elm_ui_with_context$Element$WithContext$map = F2(
	function (f, _v0) {
		var g = _v0.a;
		return $lucamug$elm_ui_with_context$Element$WithContext$Internal$Element(
			A2(
				$elm$core$Basics$composeR,
				g,
				$mdgriffith$elm_ui$Element$map(f)));
	});
var $rakutentech$r10$R10$Form$viewWithOptions = F3(
	function (form, msgMapper, args) {
		var maker_ = A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$Internal$MakerForView$maker, args.maker);
		return A2(
			$elm$core$List$map,
			$lucamug$elm_ui_with_context$Element$WithContext$map(msgMapper),
			A2(
				maker_,
				{
					formState: form.state,
					key: $rakutentech$r10$R10$Form$Internal$Key$empty,
					palette: A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Palette$light, args.palette),
					style: args.style,
					translator: A2($elm$core$Maybe$withDefault, $rakutentech$r10$R10$Form$defaultTranslator, args.translator)
				},
				form.conf));
	});
var $rakutentech$r10$R10$Form$view = F2(
	function (form, msgMapper) {
		return A3(
			$rakutentech$r10$R10$Form$viewWithOptions,
			form,
			msgMapper,
			{maker: $elm$core$Maybe$Nothing, palette: $elm$core$Maybe$Nothing, style: $rakutentech$r10$R10$Form$defaultStyle, translator: $elm$core$Maybe$Nothing});
	});
var $author$project$Main$view = function (model) {
	return A4(
		$lucamug$elm_ui_with_context$Element$WithContext$layoutWith,
		$rakutentech$r10$R10$Context$default,
		{
			options: _List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$focusStyle(
					{backgroundColor: $elm$core$Maybe$Nothing, borderColor: $elm$core$Maybe$Nothing, shadow: $elm$core$Maybe$Nothing})
				])
		},
		_List_fromArray(
			[
				$rakutentech$r10$R10$Color$AttrsBackground$background,
				$lucamug$elm_ui_with_context$Element$WithContext$padding(20),
				$rakutentech$r10$R10$FontSize$normal
			]),
		A2(
			$lucamug$elm_ui_with_context$Element$WithContext$column,
			_Utils_ap(
				$rakutentech$r10$R10$Card$high,
				_List_fromArray(
					[
						$lucamug$elm_ui_with_context$Element$WithContext$centerX,
						$lucamug$elm_ui_with_context$Element$WithContext$centerY,
						$lucamug$elm_ui_with_context$Element$WithContext$width(
						A2($lucamug$elm_ui_with_context$Element$WithContext$maximum, 360, $lucamug$elm_ui_with_context$Element$WithContext$fill)),
						$lucamug$elm_ui_with_context$Element$WithContext$height($lucamug$elm_ui_with_context$Element$WithContext$shrink),
						$lucamug$elm_ui_with_context$Element$WithContext$spacing(30)
					])),
			_List_fromArray(
				[
					$lucamug$elm_ui_with_context$Element$WithContext$withContext(
					function (c) {
						return A3(
							$rakutentech$r10$R10$Svg$LogosExtra$r10,
							_List_fromArray(
								[$lucamug$elm_ui_with_context$Element$WithContext$centerX]),
							$rakutentech$r10$R10$Color$Svg$logo(c.contextR10.theme),
							32);
					}),
					A2(
					$rakutentech$r10$R10$Paragraph$normalMarkdown,
					_List_fromArray(
						[$lucamug$elm_ui_with_context$Element$WithContext$Font$center]),
					'This is an example of a form made with [Elm](https://elm-lang.org/), [elm-ui](https://package.elm-lang.org/packages/mdgriffith/elm-ui/latest/) and [R10](https://package.elm-lang.org/packages/rakutentech/r10/latest/) ([Source code](https://github.com/rakutentech/r10/blob/master/examples/simpleForm/src/Main.elm)).'),
					A2(
					$lucamug$elm_ui_with_context$Element$WithContext$column,
					_List_fromArray(
						[
							$lucamug$elm_ui_with_context$Element$WithContext$spacing(20),
							$lucamug$elm_ui_with_context$Element$WithContext$width($lucamug$elm_ui_with_context$Element$WithContext$fill)
						]),
					A2($rakutentech$r10$R10$Form$view, model.form, $author$project$Main$MsgForm)),
					A2(
					$rakutentech$r10$R10$Button$primary,
					_List_Nil,
					{
						label: $lucamug$elm_ui_with_context$Element$WithContext$text('Sign In'),
						libu: $rakutentech$r10$R10$Libu$Bu(
							$elm$core$Maybe$Just($author$project$Main$SendMsgToReact)),
						translation: {key: 'example'}
					}),
					$lucamug$elm_ui_with_context$Element$WithContext$text(model.message.id)
				])));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{init: $author$project$Main$init, subscriptions: $author$project$Main$subscriptions, update: $author$project$Main$update, view: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));